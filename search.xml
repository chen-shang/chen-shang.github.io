<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>吾日三省</title>
      <link href="/2023/09/17/mo-xiang-zhi-jian/wu-ri-san-sheng/wu-ri-san-sheng/"/>
      <url>/2023/09/17/mo-xiang-zhi-jian/wu-ri-san-sheng/wu-ri-san-sheng/</url>
      
        <content type="html"><![CDATA[<div class="card-container"><div class="card back">  <p>互联网的强大足以让我们查找到我们想要学习的资料。</p></div><div class="card back">说话做事前一定要先想一下这话该不该说，这事儿该不该做。一定要弄明白你自己的目的，说了做了能不能达到你想要的。说错了或者是做错了会有什么样的后果。若想清楚了还是一定要说或者是做，之后就是想该怎么说怎么做了。</div><div class="card back">别人说话做事的时候一定要想他为什么这么说，他为什么这样做，他这样说或是做的目的是什么，你拦不住别人怎么说怎么做，但一定要想清楚他这么做对你的利弊，如是有利则听之认之，若是不利则要考虑如何应对。</div><div class="card back">养成良好的生活习惯，做事有规律，例如东西放置的位置尽量记住和有规律，到了这个时间就该洗澡，一定要坚持，千万不能有惰性。</div><div class="card back">可以对比，但不可以攀比，对比知道自己的不足，攀比暴露自己的不足。</div><div class="card back">要确保自己不仅知道而起能说出来。</div><div class="card back">注重积累数据，用数据说话更具有说服力。</div><div class="card back">说话要抑扬顿挫显得有底气。</div><div class="card back">养成多琢磨的习惯，主要思考事情的来龙去脉，前因后果。比如说话，思考别人为什么这样说，这样说对他有什么好处，如果这样对他有好处以后也可以用他的方法来得到自己想要的好处。</div><div class="card back">人难免会有情绪，但是你的情绪只能针对这一件事有情绪，永远不要吧情绪牵连到其他的事情或人身上，否则其他的事情也都做不好了。</div></div><style>.card-container {  display: flex;  justify-content: space-between;  flex-wrap: wrap;}.card {  flex-basis: calc(33.33% - 20px);  background-color: #f9f9f9;  border-radius: 10px;  padding: 20px;  margin-bottom: 20px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  transition: background-color 0.3s ease;}/* 在小屏幕设备上的样式 */@media screen and (max-width: 768px) {  .card {    /* 小屏幕样式 */    flex-basis: calc(100%);    background-color: #f9f9f9;    border-radius: 10px;    padding: 20px;    margin-bottom: 20px;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);    transition: background-color 0.3s ease;  }}.card p {  font-size: 16px;  color: #333;}</style><script>// 获取卡片容器const cardContainer = document.querySelector('.card-container');// 获取所有卡片元素const cards = Array.from(cardContainer.querySelectorAll('.card'));// 随机排序卡片顺序cards.sort(() => Math.random() - 0.5);// 清空卡片容器cardContainer.innerHTML = '';// 将排序后的卡片重新添加到容器中cards.forEach(card => {  cardContainer.appendChild(card);});function getRandomColor() {  var letters = '0123456789ABCDEF';  var color = '#';  do {    for (var i = 0; i < 6; i++) {      color += letters[Math.floor(Math.random() * 16)];    }  } while (color === '#00FF00' || color === '#00FF80' || color === '#00FFBF' || color === '#00FFFF' || color === '#00BFFF'); // 排除绿色系列  return color;}function isColorTooDark(color) {  var hex = color.replace('#', '');  var r = parseInt(hex.substring(0, 2), 16);  var g = parseInt(hex.substring(2, 4), 16);  var b = parseInt(hex.substring(4, 6), 16);  var brightness = (r *299 + g* 587 + b * 114) / 1000;  return brightness < 128;}var backCards = document.getElementsByClassName('back');for (var i = 0; i < backCards.length; i++) {  var randomColor1 = getRandomColor();  var randomColor2 = getRandomColor();  while (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    randomColor1 = getRandomColor();    randomColor2 = getRandomColor();  }  backCards[i].style.background = 'linear-gradient(to right, ' + randomColor1 + ', ' + randomColor2 + ')';  if (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    backCards[i].style.color = '#333';  }}</script>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 吾日三省 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 吾日三省 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>唐诗宋词</title>
      <link href="/2023/09/17/mo-xiang-zhi-jian/tang-shi-song-ci/tang-shi-song-ci/"/>
      <url>/2023/09/17/mo-xiang-zhi-jian/tang-shi-song-ci/tang-shi-song-ci/</url>
      
        <content type="html"><![CDATA[<div class="card-container">  <div class="card back">    山亭夏日 唐·高骈    <hr>    <p>绿树荫浓夏日长，楼台倒影入池塘。</p>    <p>水晶帘动微风起，满架蔷薇一院香。</p>  </div></div><style>.card-container {  display: flex;  justify-content: space-between;  flex-wrap: wrap;}.card {  flex-basis: calc(33.33% - 20px);  background-color: #f9f9f9;  border-radius: 10px;  padding: 20px;  margin-bottom: 20px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  transition: background-color 0.3s ease;}/* 在小屏幕设备上的样式 */@media screen and (max-width: 768px) {  .card {    /* 小屏幕样式 */    flex-basis: calc(100%);    background-color: #f9f9f9;    border-radius: 10px;    padding: 20px;    margin-bottom: 20px;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);    transition: background-color 0.3s ease;  }}.back {    background: linear-gradient(to right, #FFC3A0, #FFAFBD);}.card:hover {  background-color: #e3e3e3;}.card h2 {  font-size: 18px;  color: #333;  margin-bottom: 10px;}.card p {  font-size: 16px;  color: #333;}</style><script>function getRandomColor() {  var letters = '0123456789ABCDEF';  var color = '#';  do {    for (var i = 0; i < 6; i++) {      color += letters[Math.floor(Math.random() * 16)];    }  } while (color === '#00FF00' || color === '#00FF80' || color === '#00FFBF' || color === '#00FFFF' || color === '#00BFFF'); // 排除绿色系列  return color;}function isColorTooDark(color) {  var hex = color.replace('#', '');  var r = parseInt(hex.substring(0, 2), 16);  var g = parseInt(hex.substring(2, 4), 16);  var b = parseInt(hex.substring(4, 6), 16);  var brightness = (r *299 + g* 587 + b * 114) / 1000;  return brightness < 128;}var backCards = document.getElementsByClassName('back');for (var i = 0; i < backCards.length; i++) {  var randomColor1 = getRandomColor();  var randomColor2 = getRandomColor();  while (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    randomColor1 = getRandomColor();    randomColor2 = getRandomColor();  }  backCards[i].style.background = 'linear-gradient(to right, ' + randomColor1 + ', ' + randomColor2 + ')';  if (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    backCards[i].style.color = '#333';  }}</script>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 唐诗宋词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美文句摘</title>
      <link href="/2023/09/17/mo-xiang-zhi-jian/mei-wen-ju-zhai/mei-wen-ju-zhai/"/>
      <url>/2023/09/17/mo-xiang-zhi-jian/mei-wen-ju-zhai/mei-wen-ju-zhai/</url>
      
        <content type="html"><![CDATA[<div class="card-container"><div class="card back">  <p>三毛说：“读书多了，容颜自然改变，许多时候，自己可能以为许多看过的书籍都成过眼烟云，不复记忆，其实它们仍是潜在气质里、在谈吐上、在胸襟的无涯，当然也可能显露在生活和文字中。”</p></div><div class="card back">  <p>自己太软弱，就不要说现实太残酷。自己的爱情不笃定，就不要说周围有太多诱惑。</p></div><div class="card back">  <p>正如《后会无期》里的一句台词，"我听过很多大道理，可依然过不好这一生"。</p></div><div class="card back">  <p>是我的错那就道歉让你生气了；不是我的错那就抱歉让你误会了。</p></div><div class="card back">  <p>喜欢孤独，享受人群后默默耕耘的寂静时光。</p></div><div class="card back">  <p>大航海家南森就曾说过：“人生的第一件大事是发现自己，因此人们需要不时孤独和沉思。”</p></div><div class="card back">  <p>有的时候我很怀疑情商是真的存在的吗？还是某些人把它当成讨厌一个人或者喜欢一个人的理由和借口。</p></div><div class="card back">  <p>成了年啊，言行总不能比身份矮太多。</p></div><div class="card back">  <p>收获不佳的三种情况，接触不久以为全面，掌握不多急于推翻，领悟不够夸夸其谈。</p></div><div class="card back">  <p>总之，凡是有人得到了她没有得到的东西，她都持怀疑态度，她怀疑这个世上有完美的爱情，她怀疑努力的意义，她怀疑一个人能够靠正常的渠道取得成功。她觉得世界上的所有人，都应该和自己一样，过着平淡平庸的生活。凡是与她不一样的人，凡是她没有经历过的事，她都不相信会真实地存在着。</p></div><div class="card back">  <p>有人一年四季在路上，不但看遍世界各地的风景人情，还能顺便赚很多钱，真让人羡慕，好想也做这么随心的事。</p></div><div class="card back">  <p>如果没有很清晰的头脑，总是高涨的热情，很容易将生活变得混乱。</p></div><div class="card back">  <p>没有爱情，人不会死，没有面包，人会饿死。</p></div><div class="card back">  <p>没有绝对的安全，有的只是绝对的不安全；没有绝对安全的防火墙，即使密度在厚的防火墙也不能保证有绝对的安全。防火墙是汇编而成的程序，只要是程序就有漏洞。</p></div><div class="card back">  <p>一个剑客最重要的是什么，当然是剑；那么一个黑客如果攻击的话最重要的就是工具。一个运做速度快且又精确度高的工具，往往是一把锋利的剑。</p></div><div class="card back">  <p>选择合适的工具与使用最好的算法同等重要。</p></div><div class="card back">  <p>人之为学，不日进则日退。独学无友，则孤陋而难成；久处一方，则习染而不自觉。</p></div><div class="card back">  <p>最好的关系，就是爸爸爱妈妈，妈妈爱宝宝啊。</p></div><div class="card back">  <p>一到冬天，他都要求我穿上超厚的加绒棉裤，让我不要羡慕那些穿丝袜的长腿美女，保护好自己的关节才会美得更持久。</p></div><div class="card back">  <p>不打扰别人是一种极高的教养。</p></div><div class="card back">  <p>英国诗人蒲柏在牛顿的墓志铭中写道：『自然和自然的法则在黑暗中隐藏，上帝说，让牛顿去吧，于是一切都被照亮！』</p></div><div class="card back">  <p>主义的危险，就是能使人心满意足，自以为寻着治病的根本方法，从此用不着费心力去研究这个那个具体问题的解决法了。</p></div><div class="card back">  <p>生命本没有意义，你要给它什么意义，它就有什么意义。与其终日冥想人生有何意义，不如试用此生做点有意义的事。</p></div><div class="card back">  <p>读古人的书，一方面要知道古人聪明到怎样，一方面也要知道古人傻到怎样。</p></div><div class="card back">  <p>要用自己的头脑独立思考，不要轻易受人惑，不要轻易相信别人的理论，哪怕是我胡适说的话。</p></div><div class="card back">  <p>世间有一种最流行的迷信，叫做'服从多数的迷信'。人都以为多数人的公论总是不错的。</p></div><div class="card back">  <p>我这里千言万语，只是要教人一个不受人惑的方法。被孔丘、朱熹牵着鼻子走，固然不算高明；被马克思、列宁、斯大林牵着鼻子走，也算不得好汉。我自己决不想牵着谁的鼻子走。我只希望尽我的微薄的能力，教我的少年朋友们学一点防身的本领，努力做一个不受人惑的人。</p></div><div class="card back">  <p>第一层面是理论，理论是认知的必经途径，也是被广泛认同和传播的基线。</p></div><div class="card back">  <p>我的母亲出生于上世纪五十年代。她经历了物质极度匮乏的年代。她的内心一直很匮乏，总是认为自己没钱，总是认为自己不值得拥有美好的东西。</p></div><div class="card back">  <p>万般皆下品惟有读书高的时代已经过去，要是放在以前，人们对大学生那是要高看一眼的。</p></div><div class="card back">  <p>闷头码代码的是码农，抬头看世界才是优质程序员</p></div><div class="card back">  <p>原来我的经验不过是豹之一斑，荒谬的年代从未真正终结，它就在我们身边。</p></div><div class="card back">  <p>椿萱并茂，棠棣同馨，葳蕤繁祉，延彼遐龄</p></div><div class="card back">  <p>夏虫不可语于冰，笃于时也；井蛙不可语于海，拘于虚也；曲士不可语于道，束于教也</p></div><div class="card back">  <p>不飞则已一飞冲天，不鸣则已一鸣惊人</p></div><div class="card back">  <p>言者众，思虑者少，献计者寡，担当者无几</p></div><div class="card back">  <p>人到底是应该遵从自己的内心活着，还是按照别人的意愿而活。</p></div><div class="card back">  <p>大城市大，多数压力来自工作，觉得人情冷漠；小城市小，多数压力来自世故，觉得无处可躲。在大城市如果你有能力，工资低只会是一时的，但在小城市，则有可能是一世的。</p></div><div class="card back">  <p>请把注意力放在真正值得的事情上。</p></div><div class="card back">  <p>贵有恒何必三更起五更睡，最无益只怕一日曝十日寒。-- 毛泽东</p></div><div class="card back">  <p>坚信概率，坚持按照优势概率下注，哪怕违反直觉，哪怕屡屡受挫也不更改人生下注的原则，这就是赢家的秘密。</p></div><div class="card back">  <p>主义的危险，就是能使人心满意足，自以为寻着治病的根本方法，从此用不着费心力去研究这个那个具体问题的解决法了。</p></div></div><style>.card-container {  display: flex;  justify-content: space-between;  flex-wrap: wrap;}.card {  flex-basis: calc(33.33% - 20px);  background-color: #f9f9f9;  border-radius: 10px;  padding: 20px;  margin-bottom: 20px;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  transition: background-color 0.3s ease;}/* 在小屏幕设备上的样式 */@media screen and (max-width: 768px) {  .card {    /* 小屏幕样式 */    flex-basis: calc(100%);    background-color: #f9f9f9;    border-radius: 10px;    padding: 20px;    margin-bottom: 20px;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);    transition: background-color 0.3s ease;  }}.card p {  font-size: 16px;  color: #333;}</style><script>// 获取卡片容器const cardContainer = document.querySelector('.card-container');// 获取所有卡片元素const cards = Array.from(cardContainer.querySelectorAll('.card'));// 随机排序卡片顺序cards.sort(() => Math.random() - 0.5);// 清空卡片容器cardContainer.innerHTML = '';// 将排序后的卡片重新添加到容器中cards.forEach(card => {  cardContainer.appendChild(card);});function getRandomColor() {  var letters = '0123456789ABCDEF';  var color = '#';  do {    for (var i = 0; i < 6; i++) {      color += letters[Math.floor(Math.random() * 16)];    }  } while (color === '#00FF00' || color === '#00FF80' || color === '#00FFBF' || color === '#00FFFF' || color === '#00BFFF'); // 排除绿色系列  return color;}function isColorTooDark(color) {  var hex = color.replace('#', '');  var r = parseInt(hex.substring(0, 2), 16);  var g = parseInt(hex.substring(2, 4), 16);  var b = parseInt(hex.substring(4, 6), 16);  var brightness = (r *299 + g* 587 + b * 114) / 1000;  return brightness < 128;}var backCards = document.getElementsByClassName('back');for (var i = 0; i < backCards.length; i++) {  var randomColor1 = getRandomColor();  var randomColor2 = getRandomColor();  while (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    randomColor1 = getRandomColor();    randomColor2 = getRandomColor();  }  backCards[i].style.background = 'linear-gradient(to right, ' + randomColor1 + ', ' + randomColor2 + ')';  if (isColorTooDark(randomColor1) || isColorTooDark(randomColor2)) {    backCards[i].style.color = '#333';  }}</script>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 美文句摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 美文句摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode插件&amp;快捷键</title>
      <link href="/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/"/>
      <url>/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="插件推荐"><a class="markdownIt-Anchor" href="#插件推荐"></a> 插件推荐</h1><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">https://marketplace.visualstudio.com/items?itemName=vscodevim.vim</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv">https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">路径补全</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MarcusElg.markdowntoolbar">https://marketplace.visualstudio.com/items?itemName=MarcusElg.markdowntoolbar</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=azmi.toolbar-extended-menu">https://marketplace.visualstudio.com/items?itemName=azmi.toolbar-extended-menu</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced</a></li><li>Markdown All in One</li><li><a href="https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck">https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode">https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format">https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode">https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack">https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard">https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard</a></li></ol><h1 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h1><p>打开VsCode,通过顶部菜单栏点击 Code -&gt; 首选项 -&gt; 键盘快捷键<br><img src="/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/iShot_2023-09-16_10.43.07.jpg" alt="Code -> 首选项 -> 键盘快捷键"></p><p>可以打开看到现在所有的操作的快捷键<br><img src="/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/iShot_2023-09-16_10.45.52.jpg" alt="所有的操作的快捷键"><br>比如 我就经常使用 cmd+d 来代表删除当前行，但是在mac上大都是用 cmd+x 来代替，在这里可以进行修改</p><h1 id="常用配置"><a class="markdownIt-Anchor" href="#常用配置"></a> 常用配置</h1><h2 id="括号启用着色"><a class="markdownIt-Anchor" href="#括号启用着色"></a> 括号启用着色</h2><center> <img src="/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/1.png"> </center><h2 id="markdownlintconfig"><a class="markdownIt-Anchor" href="#markdownlintconfig"></a> markdownlint.config</h2><p><img src="/2023/09/16/gong-ju-kong/vscode/vscode-cha-jian-kuai-jie-jian/iShot_2023-09-17_01.40.42.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> VsCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>努力做一个开明的父母</title>
      <link href="/2023/09/16/si-kao/nu-li-zuo-yi-ge-kai-ming-de-fu-mu/"/>
      <url>/2023/09/16/si-kao/nu-li-zuo-yi-ge-kai-ming-de-fu-mu/</url>
      
        <content type="html"><![CDATA[<p>陈卓一周岁的时候抓周抓了一枚大印。</p><p>抓周的时候孩子爷爷希望他抓书，因为孩子爷爷认为"天子重英豪，文章教尔曹，万般皆下品,惟有读书高"。孩子姥爷则希望他抓金元宝，因为孩子姥爷认为"钱不是万能的，但没钱是万万不能的",“有钱能使鬼推磨，何况人乎”。陈卓的表现也似乎令人满意，众言：“拿了大印，以后当官，钱权都有了”。孩子姥姥满心欢喜 : “只要当官就比平头老百姓强，老百姓只能认人摆置”。孩子奶奶并未言语，她似乎并不关心陈卓长大了到底做什么，亦或是不管你陈卓做什么我都认为是好的。</p><p>我并没有想好要把陈卓培养成什么样的人，我也是第一次当父亲，自己的一生都没有想明白，岂敢妄图左右他的人生。我问爱人，你觉得呢？她说：希望陈卓以后开开心心，树立正确的三观。我便问：你可知什么是三观，你怎知你所谓的三观是正确的呢? 这个问题没有答案。</p><p>我们在教给他知识、经验、认知的时候，一定是掺杂了个人的主观意愿的，这无可避免，所以我们其实是在引导他成为一个我们想要他成为的人。我回忆到小陈卓手上玩具被抢的一个事，宝妈朋友带着孩子来家里玩，他们也是一个小男孩，比陈卓小几天，见陈卓拿着一个玩具汽车，便一把抢了过来，然后小陈卓也急了，欲夺回来，众人上来制止，彼时所有人都在说：陈卓，你不可以和弟弟抢了，你要让着弟弟，要学会分享，要跟弟弟一起玩。我看到小陈卓真的是一瞬间便撤回了手。但我跟所有人的观点都不同，我认为私有财产神圣不可侵犯，你抢我的东西，我夺回来有什么错么？我说到：陈卓，这是你的东西，你想要分享便分享，你要是不想分享…那就不分享。很多时候我们都在要求他：你不可以怎么怎么样，你要怎么怎么样，而不是你自己想的是怎么样呢。可话说回来，我的思想观点会不会让他成为一个很自私的人呢，会不会让他以后成为想怎样便怎样然后胡作非为的一个人呢？</p><p>他真的是一张白纸，我们写什么，他便是什么。我本想无为而治，不去左右，但这根本不现实，他的一生当中，有一多半我们会参与其中。我本天性凉薄之人，却也希望他在成长的过程中少走弯路，这或许就是当了父亲之后的变化吧，既然要引导，那我希望我们能努力做一个开明的父母。</p><p>对于知识、经验、三观、认知<br>有形的无形的<br>我所有的所有<br>我会的，且认为对的，我便倾囊相授<br>我不会的，但认为对的，愿一起成长<br>你可以挑战我的权威，但绝不允许触碰法律的底线<br>你也可以否定我观点，但绝不允许逾越普世的观念</p><p>陈卓，等你大点了，看到这篇文章，不知作何感想呢？</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用操作</title>
      <link href="/2023/09/15/gong-ju-kong/vim/vim-chang-yong-cao-zuo/"/>
      <url>/2023/09/15/gong-ju-kong/vim/vim-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<ol><li><p>移动光标：</p><ul><li>h：向左移动光标</li><li>j：向下移动光标</li><li>k：向上移动光标</li><li>l：向右移动光标</li><li>w：跳到下一个单词的开头</li><li>b：跳到上一个单词的开头</li><li>0：跳到行首</li><li>$：跳到行尾</li><li>gg：跳到文件开头</li><li>G：跳到文件末尾</li></ul></li><li><p>编辑文本：</p><ul><li>i：在光标前插入文本</li><li>a：在光标后插入文本</li><li>o：在当前行下方插入新行</li><li>dd：删除当前行</li><li>yy：复制当前行</li><li>p：粘贴复制的文本</li></ul></li><li><p>撤销和重做：</p><ul><li>u：撤销上一步操作</li><li>Ctrl + r：重做上一步被撤销的操作</li></ul></li><li><p>查找和替换：</p><ul><li>:/text：向下搜索文本（按下 n 跳到下一个匹配项）</li><li>:?text：向上搜索文本（按下 N 跳到上一个匹配项）</li><li>:%s/old/new/g：替换整个文件中的所有匹配项</li></ul></li><li><p>分屏和窗口：</p><ul><li>:split：水平分割窗口</li><li>:vsplit：垂直分割窗口</li><li>Ctrl + w + h/j/k/l：在分割窗口之间切换</li><li>Ctrl + w + c：关闭当前窗口</li></ul></li><li><p>保存和退出：</p><ul><li>:w：保存文件</li><li>:q：退出 Vim</li><li>:wq：保存并退出</li><li>:q!：强制退出，不保存修改</li></ul></li><li><p>vim 竖向操作</p><ol><li><p>进入块选择模式：</p><ul><li>按下 Ctrl + v 进入可视块模式</li></ul></li><li><p>竖向选择文本块：</p><ul><li>使用上下箭头键或 j/k 键来选择你想要的竖向区域</li></ul></li><li><p>竖向编辑：</p><ul><li>在进入可视块模式后，你可以进行以下操作：<ul><li>I：在所选区域的每行行首插入文本</li><li>A：在所选区域的每行行尾插入文本</li><li>c：删除所选区域，并进入插入模式以输入新文本</li><li>d：删除所选区域</li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-图片压缩</title>
      <link href="/2023/09/08/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-tu-pian-ya-suo/"/>
      <url>/2023/09/08/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-tu-pian-ya-suo/</url>
      
        <content type="html"><![CDATA[<p>在访问自己网站的时候发现有些请求比较耗时，观察得出是某个图片实在太大了导致加载的时间比较久。于是想要压缩这些背景图片，发现了一款在linux终端就能压缩图片的工具–jpegoptim<br><img src="/2023/09/08/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-tu-pian-ya-suo/iShot_2023-09-08_22.30.46.jpg" alt="Alt text"></p><p>在终端中运行以下命令来优化单个 JPEG 图像文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpegoptim image.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优化多个 JPEG 图像文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpegoptim image1.jpg image2.jpg image3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>递归优化目录中的所有 JPEG 图像文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpegoptim <span class="token parameter variable">-r</span> directory/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置优化质量，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpegoptim <span class="token parameter variable">--max</span><span class="token operator">=</span><span class="token number">80</span> image.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将将优化质量设置为 80，其中 80 是一个介于 0 和 100 之间的值。较低的值会产生更高的压缩率，但可能会降低图像质量。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>brew跳过某个软件不升级</title>
      <link href="/2023/09/08/gong-ju-kong/mac/brew-tiao-guo-mou-ge-ruan-jian-bu-sheng-ji/"/>
      <url>/2023/09/08/gong-ju-kong/mac/brew-tiao-guo-mou-ge-ruan-jian-bu-sheng-ji/</url>
      
        <content type="html"><![CDATA[<p>有时候执行<code>brew upgrade</code>的时候会卡在某个软件一直下载不下来，这时候可以先把这个软件给跳过，先更新其他的软件再说。</p><ul><li><p>brew update ：这个命令用于更新Homebrew自身和Homebrew的软件包清单。当您运行 brew update 时，Homebrew会检查官方软件包库中是否有新的软件包版本或更新，然后更新本地的软件包清单以反映最新的变化。这个命令并不会升级已安装的软件包，它只更新软件包清单。</p></li><li><p>brew upgrade ：这个命令用于升级已安装的软件包到最新版本。当您运行 brew upgrade 时，Homebrew会检查已安装的软件包是否有可用的新版本，并将其升级到最新版本。这个命令会逐个检查并升级所有已安装的软件包。</p></li></ul><p>比如我遇到了 minio 这个工具下载很慢，于是使用下面的命令先跳过 minio 的升级。<br>指定minio不升级</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew pin minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解除minio的版本固定</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew unpin minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示固定了版本的软件包列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew list <span class="token parameter variable">--pinned</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上Excel打开csv文件乱码</title>
      <link href="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/"/>
      <url>/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/</url>
      
        <content type="html"><![CDATA[<p>在csv文件里面汉字展示的好好的，结果到了excel中打开变成乱七八糟的</p><p><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_00.44.55.jpg" alt="Mac上Excel打开csv文件乱码"></p><p>方案一：通过文本编辑器重新改编码然后保存<br>解决方案是把 csv 文件通过文本编辑器打开，然后在重新保存为 GBK 编码，最后再用 Excel 打开<br><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_01.05.35.jpg" alt=""><br><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_01.05.52.jpg" alt=""><br><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_01.06.48.jpg" alt=""><br>然后再用 excel 打开就好了</p><p>方案二：通过Excel的导入功能，导入的时候直接选择正确的编码<br>新建一个空白页-&gt;文件-&gt;导入-&gt;选择CSV文件-&gt;点击导入<br><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_01.11.04.jpg" width="50%" height="auto"><br>然后 改成 UTF-8 就行了<br><img src="/2023/09/07/gong-ju-kong/excel/mac-shang-excel-da-kai-csv-wen-jian-luan-ma/iShot_2023-09-07_01.11.40.jpg" width="50%" height="auto"><br>然后再用 excel 打开就好了</p><p>这两个方案改变的字符编码不一样，我也不知道为什么两种效果都可以展示正确的中文，不过先这么改吧，后面在研究为什么。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法访问此网站</title>
      <link href="/2023/09/06/gong-ju-kong/mac/wu-fa-fang-wen-ci-wang-zhan/"/>
      <url>/2023/09/06/gong-ju-kong/mac/wu-fa-fang-wen-ci-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>今天遇到内网服务访问显示无法访问的问题，纠结了半天，结果谜底就在谜面上，顺着chrome 给出的提示就可以解决。</p><p><img src="/2023/09/06/gong-ju-kong/mac/wu-fa-fang-wen-ci-wang-zhan/iShot_2023-09-04_09.31.55.jpg" alt=""></p><p><img src="/2023/09/06/gong-ju-kong/mac/wu-fa-fang-wen-ci-wang-zhan/iShot_2023-09-04_09.33.00.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jrebel激活</title>
      <link href="/2023/09/04/gong-ju-kong/intellij-idea/jrebel-ji-huo/"/>
      <url>/2023/09/04/gong-ju-kong/intellij-idea/jrebel-ji-huo/</url>
      
        <content type="html"><![CDATA[<p>最近因为升级了Jrebel插件导致的激活失败问题–那就暂时先不要升级了,先降级回支持的版本再说,网上本地激活的方式暂时没有尝试，后续实在受不了低版本了在尝试吧。</p><p>一键地址直接使用: <code>https://jrebel.qekang.com/cd61166e-caf3-4415-bd50-b44ef3031a43</code></p><p>方法：降低IDEA 的 jrebel版本为 2022.4.1</p><ol><li>删掉用户名下的.jrebel文件夹，否则降级idea或降级jrebel都不管用都激活失败</li><li>不要升级idea到2022.3 因为其内置的jrebel是最新版的2022.4.2 这个版本的jrebel应该是更改了激活方式 qekang方式激活不成功</li><li>如果升级了idea到2022.3，则需要手动把jrebel降低到2022.4.1，然后最好删掉.jrebel文件夹，再激活。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于认证、授权、ACL、RBAC、OAuth、SSO的理解</title>
      <link href="/2023/09/04/ji-suan-ji/ji-suan-ji-an-quan/guan-yu-ren-zheng-shou-quan-acl-rbac-oauth-sso-de-li-jie/"/>
      <url>/2023/09/04/ji-suan-ji/ji-suan-ji-an-quan/guan-yu-ren-zheng-shou-quan-acl-rbac-oauth-sso-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h1><p>认证是指验证实体（如用户、设备）的身份是否真实和有效。认证通常要求提供凭据（如用户名和密码）或使用其他身份验证方（如生物特征识别）。所以我理解 认证 就是 认识并证明 某人是某人，使其能够表明自己的身份。</p><p>常用的认证手段</p><ol><li>用户名和密码认证：用户提供预先注册的用户名和对应的密码进行身份验证。</li><li>双因素认证：用户需要提供两种或多种不同类型的凭据，如密码和手机验证码、指纹扫描等，以增加身份验证的安全性。</li><li>生物特征认证：使用个体的生物特征信息，如指纹、面部识别、虹膜扫描等来验证身份。</li><li>证书认证：基于数字证书进行身份验证，使用公钥和私钥来确保身份的真实性和完整性。</li></ol><h1 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h1><p>授权是指授予用户或实体特定权限或访问权限。授权机制可以确保用户只能访问其被授权的资源，从而保护系统的安全性和完整性。所以我理解 授权就是 授予 某人 某种权限，使其能够获得对应的资源。</p><p>常用的认证方式</p><ol><li>访问控制列表（ACL）：ACL是一种基于资源的授权技术，通过定义资源的访问控制列表，指定哪些用户或组可以访问该资源。</li><li>角色基础访问控制（RBAC）：RBAC是一种授权模型，将权限授予特定的角色，然后将角色分配给用户，以实现对资源的授权。</li><li>属性基础访问控制（ABAC）：ABAC是一种基于属性的授权技术，根据用户的属性和环境条件，动态决定其对资源的访问权限。</li><li>强制访问控制（MAC）：基于系统定义的安全策略，授予用户对资源的访问权限。</li></ol><h2 id="访问控制列表acl-和-角色基础访问控制rbac有什么区别"><a class="markdownIt-Anchor" href="#访问控制列表acl-和-角色基础访问控制rbac有什么区别"></a> 访问控制列表（ACL） 和 角色基础访问控制（RBAC）有什么区别</h2><ol><li><p>RBAC（角色基础访问控制）：RBAC是一种基于角色的访问控制模型。它将权限授予特定的角色，而不是直接授予用户。用户通过被分配到适当的角色来获得相应的权限。RBAC可以简化权限管理，特别是在大型组织或系统中，因为权限的管理集中在角色上，而不是每个用户上。例如，一个系统可能有管理员角色、编辑角色和普通用户角色，每个角色都有不同的权限级别。</p></li><li><p>ACL（访问控制列表）：ACL是一种基于资源的访问控制模型。它使用列表来定义哪些用户或组可以访问特定的资源。每个资源都有一个关联的ACL，其中包含了被授权用户或组的列表。ACL可以精确地控制每个用户对资源的访问权限。例如，一个文件系统可以为每个文件或目录定义一个ACL，确定哪些用户可以读取、写入或执行该文件或目录。</p></li></ol><p>总的来说，RBAC更适合在大型组织或系统中管理复杂的权限结构，通过角色的方式来授予用户权限。而ACL更适合对于每个资源进行细粒度的权限控制，可以更精确地控制用户对特定资源的访问权限。具体使用哪种访问控制机制，取决于应用的需求和安全策略。</p><p>接下来要说的这俩货 <code>SSO（单点登录）</code> 和 <code>OAuth（开放授权）</code> 我认为及涉及到了 <strong>认证</strong> 也涉及到了 <strong>鉴权</strong></p><h1 id="sso单点登录"><a class="markdownIt-Anchor" href="#sso单点登录"></a> SSO（单点登录）</h1><p>维基百科的解释</p><blockquote><p>单点登录（英语：Single sign-on，缩写为 SSO），又译为单一签入，一种对于许多相互关连，但是又是各自独立的软件系统，提供访问控制的属性。当拥有这项属性时，当用户登录时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以轻型目录访问协议（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，单一退出（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。<br>百度百科<br>单点登录(SingleSignOn，SSO)，就是通过用户的一次性鉴别登录。当用户在身份认证服务器上登录一次以后，即可获得访问单点登录系统中其他关联系统和应用软件的权限，同时这种实现是不需要管理员对用户的登录状态或其他信息进行修改的，这意味着在多个应用系统中，用户只需一次登录就可以访问所有相互信任的应用系统。这种方式减少了由登录产生的时间消耗，辅助了用户管理，是比较流行的。</p></blockquote><p>看样子 SSO 更关注的是 用户登录问题，登录就会涉及到 用户、密码 啊啥的，所以 SSO 更像是一种认证技术，但是从另一个角度来看看，是不是可以理解为 某种机制或者某个东西授权了你可以在它认为可信的系统中来回穿梭呢，这不就是授权么。所以这里我也不再纠结了。</p><ol><li>基于令牌的SSO：用户在完成认证后，SSO系统会颁发一个令牌（如JSON Web Token）给用户，该令牌包含用户身份信息和访问权限。用户在访问其他应用程序时，将令牌传递给应用程序进行验证，从而实现单点登录。</li><li>基于SAML的SSO：SAML（Security Assertion Markup Language）是一种基于XML的开放标准，用于在不同的身份提供者和服务提供者之间进行身份认证和授权。用户通过SSO系统进行认证后，SSO系统会向应用程序发送SAML断言，证明用户的身份和权限。</li><li>OAuth和OpenID Connect：OAuth和OpenID Connect是一种常见的SSO实现方式，特别适用于第三方应用程序集成。用户通过授权服务器进行认证，并获得访问令牌。应用程序可以使用该令牌进行用户身份验证和访问授权。</li><li>集中式认证和授权系统：通过建立一个集中式的认证和授权系统，所有应用程序都与该系统进行集成。用户在认证系统中进行一次登录后，系统会为其颁发令牌，并将令牌传递给其他应用程序进行验证。</li></ol><p>上面第三点说到了 <code>OAuth</code>. 你可能会好奇 这玩意不是用来授权的么，怎么跟认证又有关系了呢？因为这里登录的时候认证方式用的是授权的形式，只要第三放应用授权了，你的网站就默认登录了。所以也不必纠结到底该算授权呢还是概算认证呢。认证之后紧跟着就该是鉴权了(鉴权之前得先授权吧)。</p><h1 id="oauth开放授权"><a class="markdownIt-Anchor" href="#oauth开放授权"></a> OAuth（开放授权）</h1><p>OAuth（开放授权）是一种开放标准的授权协议，用于授权用户访问第三方应用程序或服务的受保护资源，而无需共享其凭据（如用户名和密码）。OAuth通过颁发访问令牌（Access Token）来实现授权，该令牌用于代表用户向资源服务器请求访问。OAuth适用于用户允许第三方应用程序访问其受保护资源的场景，同时保护用户的凭据安全。</p><p>所以，OAuth 的终极目标是为了隐藏凭据，也就是账号密码。</p><p>OAuth现在以OAuth2为主,有以下几种模式</p><hr>1. 授权码模式（Authorization Code Grant）：在这种模式下，用户在客户端应用程序中发起授权请求，被重定向到授权服务器进行身份验证。一旦用户授权，授权服务器将返回一个授权码给客户端应用程序，然后客户端应用程序使用该授权码与授权服务器进行交换，以获取访问令牌和刷新令牌。<ul><li>优点：安全性高，授权码只在后端服务器之间传输，避免了敏感信息在浏览器中的传输。支持刷新令牌，可实现长期访问。</li><li>缺点：实现复杂，涉及多个步骤和交互。需要维护客户端的机密性。</li></ul><p>适用场景：适用于具有后端服务器的应用程序，需要高度安全性和长期访问的情况。</p><hr>2. 简化模式（Implicit Grant）：这种模式适用于无法保持客户端应用程序的机密性的情况，如前端JavaScript应用程序。用户在客户端应用程序中发起授权请求，被重定向到授权服务器进行身份验证。一旦用户授权，授权服务器将直接返回访问令牌给客户端应用程序，不再返回授权码。<ul><li>优点：简化了授权过程，减少了交互步骤。适用于前端JavaScript应用程序等无法保持机密性的情况。</li><li>缺点：访问令牌直接暴露在浏览器中，安全性较低。不支持刷新令牌，访问令牌的有效期较短。</li></ul><p>适用场景：适用于无法保持机密性的前端应用程序，对安全性要求较低且访问令牌有效期较短的情况。</p><hr>3. 密码模式（Resource Owner Password Credentials Grant）：在这种模式下，用户直接向客户端应用程序提供其用户名和密码。客户端应用程序使用这些凭据与授权服务器进行交换，以获取访问令牌和刷新令牌。这种模式需要用户将凭据直接提供给客户端应用程序，因此应谨慎使用。<ul><li>优点：简化了授权过程，无需重定向到授权服务器。适用于信任度高、对安全性要求较低的情况。</li><li>缺点：需要用户直接提供用户名和密码给客户端应用程序，安全性较低。不适用于对用户隐私敏感的场景。</li></ul><p>适用场景：适用于内部应用程序或高度信任的环境，对安全性要求较低且用户隐私不敏感的情况。</p><hr>4. 客户端模式（Client Credentials Grant）：这种模式适用于客户端应用程序自身作为资源所有者的情况，而不是代表特定用户。客户端应用程序使用其自己的凭据与授权服务器进行交换，以获取访问令牌。<ul><li>优点：简单直接，适用于客户端自身作为资源所有者的情况。无需用户参与，适用于后台任务或服务间的授权。</li><li>缺点：无法代表特定用户，适用范围有限。</li></ul><p>适用场景：适用于客户端自身作为资源所有者的情况，例如后台任务或服务间的授权。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security学习笔记</title>
      <link href="/2023/09/03/java/spring/spring-security-xue-xi-bi-ji/"/>
      <url>/2023/09/03/java/spring/spring-security-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="/2023/09/04/guan-yu-ren-zheng-shou-quan-acl-rbac-oauth-sso-de-li-jie">关于认证、授权、ACL、RBAC、OAuth、SSO的理解</a></p><p><a href="https://spring.io/projects/spring-security">Spring Security 官网</a></p><p>按照官网的教程这么写<br><img src="/2023/09/03/java/spring/spring-security-xue-xi-bi-ji/iShot_2023-09-03_10.03.28.jpg" alt=""></p><h2 id="坑一-运行时报错-javalangillegalargumentexception-there-is-no-passwordencoder-mapped-for-the-id-null"><a class="markdownIt-Anchor" href="#坑一-运行时报错-javalangillegalargumentexception-there-is-no-passwordencoder-mapped-for-the-id-null"></a> 坑一: 运行时报错 java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id “null”</h2><p>解决手段,添加 <code>PasswordEncoder</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面这个写法也行，但是没有谁会在内存里这么写的，都是去用户中心查询用户<br><img src="/2023/09/03/java/spring/spring-security-xue-xi-bi-ji/iShot_2023-09-03_10.34.45.jpg" alt="这种写法就不用配置PasswordEncoder了"></p><h2 id="坑二编译时报错-role_user-cannot-start-with-role_-it-is-automatically-added"><a class="markdownIt-Anchor" href="#坑二编译时报错-role_user-cannot-start-with-role_-it-is-automatically-added"></a> 坑二：编译时报错 ROLE_USER cannot start with ROLE_ (it is automatically added)</h2><p>解决手段,去掉 “ROLE_” 前缀<br><img src="/2023/09/03/java/spring/spring-security-xue-xi-bi-ji/iShot_2023-09-03_10.07.29.jpg" alt="去掉ROLE前缀"></p><p>注意：</p><ol><li>In-Memory Authentication: 基于内存的认证，这个没有实际意义，仅仅用于测试或者演示方便而已</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用笔记</title>
      <link href="/2023/09/02/gong-ju-kong/markdown/markdown-shi-yong-bi-ji/"/>
      <url>/2023/09/02/gong-ju-kong/markdown/markdown-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="跳转到目标网站"><a class="markdownIt-Anchor" href="#跳转到目标网站"></a> 跳转到目标网站</h1><p>语法 : [链接文本](链接URL)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">Linux终端生存之道-网络小工具</span>](<span class="token url">https://chen-shang.github.io/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>长下面这个样子<br><a href="https://chen-shang.github.io/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/">Linux终端生存之道-网络小工具</a><br><a id="section1"></a></p><h1 id="去掉跳转链接的下划线"><a class="markdownIt-Anchor" href="#去掉跳转链接的下划线"></a> 去掉跳转链接的下划线</h1><p>Markdown本身并没有提供一种直接的方式来去掉链接文本下的下划线。这是因为Markdown的设计初衷是提供一种简单且易读的标记语言，而不是提供复杂的样式控制。<br>直接写<code>&lt;a&gt;</code>标签实现<br>语法 : &lt;a href="链接URL" style="text-decoration:none;"&gt;链接文本&lt;/a&gt;</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>Linux终端生存之道-网络小工具<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>长下面这个样子<br><a href="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/" style="text-decoration:none;">Linux终端生存之道-网络小工具</a></p><h1 id="跳转到目标网站的目标章节"><a class="markdownIt-Anchor" href="#跳转到目标网站的目标章节"></a> 跳转到目标网站的目标章节</h1><p>这时候可以使用所谓的锚点实现。<br>语法 : [跳转到目标章节](目标网站URL#目标章节锚点)</p><p>比如我想跳转到  <code>Linux终端生存之道-网络小工具</code> 这篇文章 的 <code>dig</code> 这个小节.</p><ol><li><p>先在目标页面的目标目录插入一个锚点 <code>&lt;a name="section1"&gt;</code><br><img src="/2023/09/02/gong-ju-kong/markdown/markdown-shi-yong-bi-ji/iShot_2023-09-02_11.43.43.jpg" alt=""></p></li><li><p>然后在在另一篇文章中，按照如下写跳转链接，注意最后加上 <code>#section1</code></p></li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">Linux终端生存之道-网络小工具-dig</span>](<span class="token url">/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/#section1</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接如下,点击查看效果<br><a href="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/#section1">Linux终端生存之道-网络小工具-dig</a></p><h1 id="跳转到当前页面的目标章节"><a class="markdownIt-Anchor" href="#跳转到当前页面的目标章节"></a> 跳转到当前页面的目标章节</h1><p>刚才是跳转到了其他页面的目标章节，如果想要在当前页面实现跳转呢?<br>Markdown本身并没有提供一种直接的方式在当前页面中实现跳转到目标章节而不打开新的页面。Markdown是一种标记语言，主要用于文本的格式化和排版，并不支持页面内部的交互功能。</p><p>如果这么写</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">跳转到第一部分</span>](<span class="token url">#section1</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次都会打开一个新的页面，其实不是我们想要的效果，这时候只能 上  JavaScript 代码了。</p><p>示例：<a href="#section1">跳转到第一部分-每次都会打开一个新的页面</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#section1"</span> onclick<span class="token operator">=</span><span class="token string">"scrollToSection('#section1'); return false;"</span><span class="token operator">&gt;</span>跳转到第一部分<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">function</span> <span class="token function">scrollToSection</span><span class="token punctuation">(</span><span class="token parameter">sectionId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> section <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>sectionId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">)</span> <span class="token punctuation">{</span>      section<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">'smooth'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是先插入锚点<br><img src="/2023/09/02/gong-ju-kong/markdown/markdown-shi-yong-bi-ji/iShot_2023-09-02_17.12.14.jpg" alt=""></p><p>然后在文章的结尾加上 上面的script 代码<br><img src="/2023/09/02/gong-ju-kong/markdown/markdown-shi-yong-bi-ji/iShot_2023-09-02_17.14.44.jpg" alt=""></p><p>示例：<a href="#section1" style="text-decoration:none;" onclick="scrollToSection('#section1'); return false;">跳转到第一部分-使用JavaScript实现平滑跳转</a></p><script>  function scrollToSection(sectionId) {    var section = document.querySelector(sectionId);    if (section) {      section.scrollIntoView({ behavior: 'smooth' });    }  }</script>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用笔记</title>
      <link href="/2023/09/02/gou-jian-gong-ju/npm/npm-shi-yong-bi-ji/"/>
      <url>/2023/09/02/gou-jian-gong-ju/npm/npm-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-是啥"><a class="markdownIt-Anchor" href="#npm-是啥"></a> npm 是啥</h1><p>npm是Node Package Manager（Node包管理器）的缩写，是JavaScript运行时环境Node.js的默认包管理工具。它允许开发者在Node.js项目中方便地安装、管理和共享代码库（称为包或模块）。 跟 Maven 类似。</p><p>通过npm，开发者可以轻松地安装和更新各种JavaScript包。这些包可以包含各种功能，如框架、库、工具等，可以用于开发Web应用、命令行工具、服务器端应用等。</p><p>使用npm，您可以在命令行界面中运行各种命令，例如：</p><ul><li>npm install ：安装项目所需的所有依赖包。</li><li>npm update ：更新项目中已安装的包到最新版本。</li><li>npm uninstall ：卸载项目中不再需要的包。</li><li>npm search ：搜索npm注册表中的包。</li><li>npm publish ：将自己开发的包发布到npm注册表，供其他人使用。</li></ul><p>除了管理包，npm还提供了一些其他功能，如创建和管理项目脚手架、管理全局安装的包、管理项目的依赖关系等。</p><p>总而言之，npm是一个强大的工具，可以大大简化JavaScript项目的依赖管理和代码共享过程。</p><h1 id="npm版本号怎么看"><a class="markdownIt-Anchor" href="#npm版本号怎么看"></a> npm版本号怎么看</h1><pre class="line-numbers language-none"><code class="language-none">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="npm版本号各个数的含义"><a class="markdownIt-Anchor" href="#npm版本号各个数的含义"></a> npm版本号各个数的含义</h2><p>如前所述，npm版本号由三部分组成: Major.Minor.Patch。其中，三个数字各自代表的含义如下：<br>Major（主版本号）：表示大版本更新，通常涉及到项目中大的改变，可能引起了不兼容的更改。<br>Minor（次版本号）：表示小功能新增。这些新增功能版本与之前版本是兼容的，在项目中的影响不会太大。<br>Patch（修订版本号）：用于修复bug或增强某些功能，但不会引入新功能。和Minor相似，此版本与之前版本兼容不会对项目产生影响。</p><h1 id="查看需要升级的包"><a class="markdownIt-Anchor" href="#查看需要升级的包"></a> 查看需要升级的包</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> outdated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/09/02/gou-jian-gong-ju/npm/npm-shi-yong-bi-ji/iShot_2023-09-02_17.40.34.jpg" alt=""></p><h1 id="更新-npm-自身版本"><a class="markdownIt-Anchor" href="#更新-npm-自身版本"></a> 更新 npm 自身版本</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="更新依赖模块版本不破坏依赖间的联系"><a class="markdownIt-Anchor" href="#更新依赖模块版本不破坏依赖间的联系"></a> 更新依赖模块版本（不破坏依赖间的联系）</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="使用-ncu-工具一把梭"><a class="markdownIt-Anchor" href="#使用-ncu-工具一把梭"></a> 使用 ncu 工具一把梭</h1><p><img src="/2023/09/02/gou-jian-gong-ju/npm/npm-shi-yong-bi-ji/iShot_2023-09-04_01.34.17.jpg" alt=""></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> npm-check-updates <span class="token parameter variable">-g</span>$ ncuChecking /Users/tommy/blog/package.json<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">16</span>/16 <span class="token number">100</span>% hexo                    ^4.2.0  →  ^5.0.0 hexo-generator-sitemap  ^2.0.0  →  ^2.1.0Run ncu <span class="token parameter variable">-u</span> to upgrade package.json$ ncu <span class="token parameter variable">-u</span>Upgrading /Users/tommy/blog/package.json<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">16</span>/16 <span class="token number">100</span>% hexo                    ^4.2.0  →  ^5.0.0 hexo-generator-sitemap  ^2.0.0  →  ^2.1.0Run <span class="token function">npm</span> <span class="token function">install</span> to <span class="token function">install</span> new versions.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
          <category> NPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 构建工具 </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-查看开放端口</title>
      <link href="/2023/09/01/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-cha-kan-kai-fang-duan-kou/"/>
      <url>/2023/09/01/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-cha-kan-kai-fang-duan-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="telnet-nc-查看开放端口号"><a class="markdownIt-Anchor" href="#telnet-nc-查看开放端口号"></a> telnet、nc 查看开放端口号</h2><p><img src="/2023/09/01/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-cha-kan-kai-fang-duan-kou/iShot_2023-09-02_01.02.15.jpg" alt="telnet 和 nc 工具对比使用: 本地访问"></p><p><img src="/2023/09/01/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-cha-kan-kai-fang-duan-kou/2023-09-02_010434.jpg" alt="telnet 和 nc 工具对比使用: 远程访问"></p><h3 id="telnet-命令"><a class="markdownIt-Anchor" href="#telnet-命令"></a> telnet 命令</h3><p>telnet 命令 的可选参数</p><pre class="line-numbers language-none"><code class="language-none">telnet [-468EFKLNacdfruxy] [-S tos] [-X authtype] [-e escapechar] [-k realm] [-l user] [-n tracefile] [-s src_addr] [host           [port]]    -4      Forces telnet to use IPv4 addresses only.    -6      Forces telnet to use IPv6 addresses only.    -8      Specifies an 8-bit data path.  This causes an attempt to negotiate the TELNET BINARY option on both input and            output.    -E      Stops any character from being recognized as an escape character.    -F      If Kerberos V5 authentication is being used, the -F option allows the local credentials to be forwarded to the            remote system, including any credentials that have already been forwarded into the local environment.    -K      Specifies no automatic login to the remote system.    -L      Specifies an 8-bit data path on output.  This causes the BINARY option to be negotiated on output.    -N      Prevents IP address to name lookup when destination host is given as an IP address.    -S tos  Sets the IP type-of-service (TOS) option for the telnet connection to the value tos, which can be a numeric TOS            value or, on systems that support it, a symbolic TOS name found in the /etc/iptos file.    -X atype            Disables the atype type of authentication.    -a      Attempt automatic login.  This is now the default, so this option is ignored.  Currently, this sends the user name            via the USER variable of the ENVIRON option if supported by the remote system.  The name used is that of the            current user as returned by getlogin(2) if it agrees with the current user ID, otherwise it is the name associated            with the user ID.    -c      Disables the reading of the user's .telnetrc file.  (See the toggle skiprc command on this man page.)    -d      Sets the initial value of the debug toggle to TRUE.    -e escapechar            Sets the initial telnet escape character to escapechar.  If escapechar is omitted, then there will be no escape            character.    -f      If Kerberos V5 authentication is being used, the -f option allows the local credentials to be forwarded to the            remote system.    -k realm            If Kerberos authentication is being used, the -k option requests that telnet obtain tickets for the remote host in            realm realm instead of the remote host's realm, as determined by krb_realmofhost(3).    -l user            When connecting to the remote system, if the remote system understands the ENVIRON option, then user will be sent            to the remote system as the value for the variable USER.  This option implies the -a option.  This option may also            be used with the open command.    -n tracefile            Opens tracefile for recording trace information.  See the set tracefile command below.    -r      Specifies a user interface similar to rlogin(1).  In this mode, the escape character is set to the tilde (~)            character, unless modified by the -e option.    -s src_addr            Set the source IP address for the telnet connection to src_addr, which can be an IP address or a host name.    -u      Forces telnet to use AF_UNIX addresses only (e.g., UNIX domain sockets, accessed with a file path).    -x      Turns on encryption of the data stream if possible.  This is now the default, so this option is ignored.    -y      Suppresses encryption of the data stream.    host    Indicates the official name, an alias, or the Internet address of a remote host.  If host starts with a ‘/’, telnet            establishes a connection to the corresponding named socket.    port    Indicates a port number (address of an application).  If a number is not specified, the default telnet port is            used.            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nc命令"><a class="markdownIt-Anchor" href="#nc命令"></a> nc命令</h3><p>nc命令（也称为netcat）命令的可选参数</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">GNU netcat 0.7.1, a rewrite of the famous networking tool.Basic usages:connect to somewhere:  nc [options] hostname port [port] ...listen for inbound:    nc -l -p port [options] [hostname] [port] ...tunnel to somewhere:   nc -L hostname:port -p port [options]Mandatory arguments to long options are mandatory for short options too.Options:  -c, --close                close connection on EOF from stdin  -e, --exec=PROGRAM         program to exec after connect  -g, --gateway=LIST         source-routing hop point[s], up to 8  -G, --pointer=NUM          source-routing pointer: 4, 8, 12, ...  -h, --help                 display this help and exit  -i, --interval=SECS        delay interval for lines sent, ports scanned  -l, --listen               listen mode, for inbound connects  -L, --tunnel=ADDRESS:PORT  forward local port to remote address  -n, --dont-resolve         numeric-only IP addresses, no DNS  -o, --output=FILE          output hexdump traffic to FILE (implies -x)  -p, --local-port=NUM       local port number  -r, --randomize            randomize local and remote ports  -s, --source=ADDRESS       local source address (ip or hostname)  -t, --tcp                  TCP mode (default)  -T, --telnet               answer using TELNET negotiation  -u, --udp                  UDP mode  -v, --verbose              verbose (use twice to be more verbose)  -V, --version              output version information and exit  -x, --hexdump              hexdump incoming and outgoing traffic  -w, --wait=SECS            timeout for connects and final net reads  -z, --zero                 zero-I/O mode (used for scanning)Remote port number can also be specified as range.  Example: '1-1024'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql用户、权限基操</title>
      <link href="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/"/>
      <url>/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/</url>
      
        <content type="html"><![CDATA[<p>初始话安装 mysql 之后,大多数版本会为你本机创建一个名为root的用户,这个用户是一个管理员账户,拥有至高无上的权限,而且大多数mysql版本在当前服务器上创建的这个root用户是没有密码的。你说那不是不安全么，其实也还好，因为这root用户只能在当前服务器上登录，通过远程的方式是链接不上的。所以只要没有服务器的登录权限，就没有服务器上数据库的登录权限，不过我还是建议在安装好数据库后立马给root用户设置一个密码，以加强数据库的安全。如果可以最好在创建一个用户，用来替代root用户作为管理员，然后吧root账户给降级或者删除掉。比如你可以叫Alice 或者 叫Bob ，这样就会更加安全，因为按照惯例，如果有人攻破了你的服务会第一时间用root作为账户名开始暴力破击你的数据库密码。</p><h3 id="给初始root用户设置密码"><a class="markdownIt-Anchor" href="#给初始root用户设置密码"></a> 给初始root用户设置密码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'新密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20221806.jpg" alt="无需密码就能登录数据库"><br><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-29%20221919.jpg" alt="现在需要密码才能登录了"></p><h3 id="查看当前数据库的用户"><a class="markdownIt-Anchor" href="#查看当前数据库的用户"></a> 查看当前数据库的用户</h3><p>查看所有用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image0.png" alt="这完全没办法看呀"></p><p>查看所有用户，只返回 User,Host</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">User</span><span class="token punctuation">,</span>Host <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image.png" alt="默认用户"><br>可以看到 默认 只有 4 个用户，其中一个就是 root , 其他几个我们基本用不到，也不要去手动干预他们，否则会有意想不到的后果，虽然我也不知道会怎样。</p><h3 id="查看数据库用户的权限"><a class="markdownIt-Anchor" href="#查看数据库用户的权限"></a> 查看数据库用户的权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'mysql.sys'</span><span class="token variable">@'localhost'</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-1.png" alt="root 权限也没办法看，展示不友好"></p><p>小技巧 ，在 sql 的后面 加个 <code>\G</code> 使用垂直方式显示，每行一个字段，更易于阅读。  注意在数据量小的时候好一点。<br><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-2.png" alt="使用垂直方式查看"><br>可以看到 root 用户激活拥有了所有的权限。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Grants <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">|</span> <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span><span class="token punctuation">,</span> <span class="token keyword">DROP</span><span class="token punctuation">,</span> RELOAD<span class="token punctuation">,</span> <span class="token keyword">SHUTDOWN</span><span class="token punctuation">,</span> PROCESS<span class="token punctuation">,</span> <span class="token keyword">FILE</span><span class="token punctuation">,</span> <span class="token keyword">REFERENCES</span><span class="token punctuation">,</span> <span class="token keyword">INDEX</span><span class="token punctuation">,</span> <span class="token keyword">ALTER</span><span class="token punctuation">,</span> <span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">,</span> SUPER<span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLES</span><span class="token punctuation">,</span> <span class="token keyword">LOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">,</span> <span class="token keyword">EXECUTE</span><span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> SLAVE<span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> CLIENT<span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span><span class="token punctuation">,</span> <span class="token keyword">SHOW</span> <span class="token keyword">VIEW</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">ROUTINE</span><span class="token punctuation">,</span> <span class="token keyword">ALTER</span> <span class="token keyword">ROUTINE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">USER</span><span class="token punctuation">,</span> EVENT<span class="token punctuation">,</span> <span class="token keyword">TRIGGER</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> ROLE<span class="token punctuation">,</span> <span class="token keyword">DROP</span> ROLE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token identifier"><span class="token punctuation">`</span>root<span class="token punctuation">`</span></span><span class="token variable">@`localhost`</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span> <span class="token number">2.</span> <span class="token keyword">row</span> <span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Grants <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">|</span> <span class="token keyword">GRANT</span> APPLICATION_PASSWORD_ADMIN<span class="token punctuation">,</span>AUDIT_ABORT_EXEMPT<span class="token punctuation">,</span>AUDIT_ADMIN<span class="token punctuation">,</span>AUTHENTICATION_POLICY_ADMIN<span class="token punctuation">,</span>BACKUP_ADMIN<span class="token punctuation">,</span>BINLOG_ADMIN<span class="token punctuation">,</span>BINLOG_ENCRYPTION_ADMIN<span class="token punctuation">,</span>CLONE_ADMIN<span class="token punctuation">,</span>CONNECTION_ADMIN<span class="token punctuation">,</span>ENCRYPTION_KEY_ADMIN<span class="token punctuation">,</span>FIREWALL_EXEMPT<span class="token punctuation">,</span>FLUSH_OPTIMIZER_COSTS<span class="token punctuation">,</span>FLUSH_STATUS<span class="token punctuation">,</span>FLUSH_TABLES<span class="token punctuation">,</span>FLUSH_USER_RESOURCES<span class="token punctuation">,</span>GROUP_REPLICATION_ADMIN<span class="token punctuation">,</span>INNODB_REDO_LOG_ARCHIVE<span class="token punctuation">,</span>INNODB_REDO_LOG_ENABLE<span class="token punctuation">,</span>PASSWORDLESS_USER_ADMIN<span class="token punctuation">,</span>PERSIST_RO_VARIABLES_ADMIN<span class="token punctuation">,</span>REPLICATION_APPLIER<span class="token punctuation">,</span>REPLICATION_SLAVE_ADMIN<span class="token punctuation">,</span>RESOURCE_GROUP_ADMIN<span class="token punctuation">,</span>RESOURCE_GROUP_USER<span class="token punctuation">,</span>ROLE_ADMIN<span class="token punctuation">,</span>SENSITIVE_VARIABLES_OBSERVER<span class="token punctuation">,</span>SERVICE_CONNECTION_ADMIN<span class="token punctuation">,</span>SESSION_VARIABLES_ADMIN<span class="token punctuation">,</span>SET_USER_ID<span class="token punctuation">,</span>SHOW_ROUTINE<span class="token punctuation">,</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>SYSTEM_VARIABLES_ADMIN<span class="token punctuation">,</span>TABLE_ENCRYPTION_ADMIN<span class="token punctuation">,</span>TELEMETRY_LOG_ADMIN<span class="token punctuation">,</span>XA_RECOVER_ADMIN <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token identifier"><span class="token punctuation">`</span>root<span class="token punctuation">`</span></span><span class="token variable">@`localhost`</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span> <span class="token number">3.</span> <span class="token keyword">row</span> <span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Grants <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">|</span> <span class="token keyword">GRANT</span> PROXY <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span><span class="token punctuation">`</span></span>@<span class="token punctuation">`</span><span class="token identifier"><span class="token punctuation">`</span> TO <span class="token punctuation">`</span></span>root<span class="token identifier"><span class="token punctuation">`</span>@<span class="token punctuation">`</span></span>localhost<span class="token punctuation">`</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建用户"><a class="markdownIt-Anchor" href="#创建用户"></a> 创建用户</h3><p>MySQL 创建用户的基本语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定多个主机名或 IP 地址：您可以使用多个  ‘主机名’  或  ‘IP地址’  来允许用户从多个主机或 IP 地址连接。例如：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名1,主机名2,IP地址1,IP地址2'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定所有主机都可以连接，用通配符 <code>%</code>。例如：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定默认的身份验证插件：您可以使用  WITH plugin_name  选项来指定用户的默认身份验证插件。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定用户的默认角色：您可以使用  DEFAULT ROLE role_name  选项来指定用户的默认角色。例如：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span> <span class="token keyword">DEFAULT</span> ROLE <span class="token string">'role_name'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定用户的最大连接数和并发连接数：您可以使用  MAX_CONNECTIONS  和  MAX_USER_CONNECTIONS  选项来限制用户的最大连接数和并发连接数。例如：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span> <span class="token keyword">WITH</span> MAX_CONNECTIONS <span class="token number">10</span> MAX_USER_CONNECTIONS <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-3.png" alt="创建用户并用新用户登录"><br>我们在查看一下用户<br><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-4.png" alt="查看用户"></p><h3 id="删除用户"><a class="markdownIt-Anchor" href="#删除用户"></a> 删除用户</h3><p>只有具有足够权限的用户才能删除其他用户。如果您没有足够的权限，请使用具有适当权限的用户执行此操作。 一般用root用户来操作，尽量不要把删除、更新用户信息的权限随便授予某一个用户。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-5.png" alt="删除用户操作示例"></p><h3 id="给用户授权"><a class="markdownIt-Anchor" href="#给用户授权"></a> 给用户授权</h3><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-6.png" alt="查看一下各自有权限的数据库"></p><p>基本语法<br>授予数据库的所有权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> database_name<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>授予特定权限而不是所有权限，可以根据需要更改  ALL PRIVILEGES  部分</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> database_name<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新 MySQL 权限, 这一步是使 权限 生效的，类似 我们改了 linux 配置 是有 source 命令一样。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/08/29/shu-ju-ku/mysql-yong-hu-quan-xian-ji-cao/image-7.png" alt="赋权了，然后就可以看到了"></p><h3 id="取消用户授权"><a class="markdownIt-Anchor" href="#取消用户授权"></a> 取消用户授权</h3><p>使用  REVOKE  命令来取消用户的权限。例如，如果要取消用户  ‘username’@‘localhost’  对所有数据库的所有权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要取消用户对特定数据库的权限，可以指定数据库名称：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token keyword">database</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>racher2.0如何关闭一个服务</title>
      <link href="/2023/08/29/za-qi-za-ba/racher2-0-ru-he-guan-bi-yi-ge-fu-wu/"/>
      <url>/2023/08/29/za-qi-za-ba/racher2-0-ru-he-guan-bi-yi-ge-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>Rancher 是一款 Kubernetes 管理平台，也是 Rancher Labs 的旗舰产品，目前 Rancher 产品在 k8s 多集群管理领域里处于绝对领先的位置。</p><p><img src="/2023/08/29/za-qi-za-ba/racher2-0-ru-he-guan-bi-yi-ge-fu-wu/iShot_2023-08-29_17.12.15.jpg" alt="根据 集群-项目-命名空间 找到你的 服务"><br><img src="/2023/08/29/za-qi-za-ba/racher2-0-ru-he-guan-bi-yi-ge-fu-wu/iShot_2023-08-29_17.12.30.jpg" alt="把Pod配置副本数减成0"><br><img src="/2023/08/29/za-qi-za-ba/racher2-0-ru-he-guan-bi-yi-ge-fu-wu/iShot_2023-08-29_17.12.46.jpg" alt="再次访问目标网站发现已经访问不了了"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSO单点登录</title>
      <link href="/2023/08/28/ji-suan-ji/ji-suan-ji-ji-chu/sso-dan-dian-deng-lu/"/>
      <url>/2023/08/28/ji-suan-ji/ji-suan-ji-ji-chu/sso-dan-dian-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="多系统登录问题"><a class="markdownIt-Anchor" href="#多系统登录问题"></a> 多系统登录问题</h1><p>传统的登录方式要求用户在每个应用系统中都输入用户名和密码进行登录，这样不仅繁琐，还会增加用户的负担。比如 你有 100个系统，你可能会有一百个域名，每个系统都有一个登录页面，这样你就有一百个登录页面，不同的系统你可能有不同的登录方式，也可能有不同的账号密码，这时候从一个系统切换到另一个系统你就得输入一百次账号密码。</p><h1 id="用户中心"><a class="markdownIt-Anchor" href="#用户中心"></a> 用户中心</h1><p>为了解决这类问题，首先是账号的问题，你在不同系统中的账号必须是相互关联的，不能说你在 A 系统的账号是 Alice 你在 B 系统的账号是 Ali , 此时没有人知道 Alice 和 Ali 都是你，更何谈单点登录呢。由于这些系统互相独立，且每个系统都需要识别用户的身份，并根据用户的身份来进行权限控制。如果每个系统都各自实现用户管理和认证的功能，就会带来用户信息冗余、不同步等问题，也会导致用户必须记住每一个系统的用户名和密码，从而给用户带来不少麻烦。例如，用户同时使用某个大型企业内部的10个应用系统，就必须在这10个应用系统中都创建自己的账户并记住账户，这样每个系统都需要管理用户的信息，而且一旦用户在某个系统中修改了信息，就会导致系统之间用户信息不一致的问题。万一系统的数量增加到50个、100个了？估计企业和用户都要疯了。<br>解决上述问题的根本方法是建立统一用户中心，存储、维护、管理所有应用系统的用户信息，首先确保了使用同一套账号密码。<br>用户中心的职责：</p><ol><li>用户信息的存储、维护、管理等功能。</li><li>用户身份识别、角色分配等功能。</li></ol><h1 id="sso-定义"><a class="markdownIt-Anchor" href="#sso-定义"></a> sso 定义</h1><p>统一用户管理系统能够很好的解决用户信息冗余和不同步的问题，也能减轻用户需要创建并管理多个账户的痛苦，即使这样也仍然存在多个系统都需要用户登录的问题。例如，用户同时使用某个大型企业内部的10个应用系统，那么就需要用户使用同一个账号信息去分别登录每个系统，这样的操作必定会导致用户体验太差。单点登录就是为了解决这个问题而提出的。</p><p>注意：单点登录是为了解决同一用户在使用多个系统时的重复登录的问题。</p><p>维基百科</p><blockquote><p>单一登入（英语：Single sign-on，缩写为 SSO），又译为单一签入，一种对于许多相互关连，但是又是各自独立的软体系统，提供存取控制的属性。当拥有这项属性时，当使用者登入时，就可以取得所有系统的存取权限，不用对每个单一系统都逐一登入。这项功能通常是以轻型目录访问协议（LDAP）来实作，在伺服器上会将使用者资讯储存到LDAP资料库中。相同的，单一登出（single sign-off）就是指，只需要单一的登出动作，就可以结束对于多个系统的存取权限。<br>百度百科<br>单点登录(SingleSignOn，SSO)，就是通过用户的一次性鉴别登录。当用户在身份认证服务器上登录一次以后，即可获得访问单点登录系统中其他关联系统和应用软件的权限，同时这种实现是不需要管理员对用户的登录状态或其他信息进行修改的，这意味着在多个应用系统中，用户只需一次登录就可以访问所有相互信任的应用系统。这种方式减少了由登录产生的时间消耗，辅助了用户管理，是比较流行的。</p></blockquote><p>我觉得百度百科的解释可能更贴切些。注意 sso 是一种思想，他并不是一种具体的实现。就跟 LDAP 一样，他只是一个协议，而OpenLDAP才是它的具体实现一样。 sso 有好几种实现方式，但所有的实现都会用到令牌，对令牌的不同使用方式就诞生了不同的sso实现手段，网上怎么叫的都有，也没有一个统一的标准。其实所谓的单点登录就是对令牌的共享，只要各个系统都认你这一套令牌，那我就默认你自动登录了。</p><p>要想实现单点登录 首先必须 得有 上面说的 统一的 用户中心。其次还得有一个统一 认证中心，用来干 认证 凭证 的事情。因为如果 十个 系统有 十个登录页面，这明显是重复劳动，于是我们先把 这十个 页面 统一 成一个页面，所有系统的登录都从这个页面开始。</p><p>令牌的玩法如下</p><h3 id="基于cas的sso"><a class="markdownIt-Anchor" href="#基于cas的sso"></a> 基于CAS的SSO</h3><p>这个页面要能实现</p><ol><li>用户登录后能够记住已经登录过</li><li>在确认用户已经登录过后，自动跳转到各自系统地页面</li><li>要能让各自系统知道当前用户的信息<br>上面三个功能是最基础的，此外这些功能必须保证安全，信息不泄露</li></ol><p><img src="/2023/08/28/ji-suan-ji/ji-suan-ji-ji-chu/sso-dan-dian-deng-lu/image.png" alt="Alt text"><br>上图是CAS官网上的标准流程，具体流程如下：</p><p>用户访问app系统，app系统是需要登录的，但用户现在没有登录。<br>跳转到CAS server，即SSO登录系统，以后图中的CAS Server我们统一叫做SSO系统。 SSO系统也没有登录，弹出用户登录页。<br>用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器（Browser）中写入SSO域下的Cookie。<br>SSO系统登录完成后会生成一个ST（Service Ticket），然后跳转到app系统，同时将ST作为参数传递给app系统。<br>app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效。<br>验证通过后，app系统将登录状态写入session并设置app域下的Cookie。<br>至此，跨域单点登录就完成了。以后我们再访问app系统时，app就是登录的。接下来，我们再看看访问app2系统时的流程。</p><p>用户访问app2系统，app2系统没有登录，跳转到SSO。<br>由于SSO已经登录了，不需要重新登录认证。<br>SSO生成ST，浏览器跳转到app2系统，并将ST作为参数传递给app2。<br>app2拿到ST，后台访问SSO，验证ST是否有效。<br>验证成功后，app2将登录状态写入session，并在app2域下写入Cookie。<br>这样，app2系统不需要走登录流程，就已经是登录了。SSO，app和app2在不同的域，它们之间的session不共享也是没问题的。</p><p>SSO系统登录后，跳回原业务系统时，带了个参数ST，业务系统还要拿ST再次访问SSO进行验证，觉得这个步骤有点多余。他想SSO登录认证通过后，通过回调地址将用户信息返回给原业务系统，原业务系统直接设置登录状态，这样流程简单，也完成了登录，不是很好吗？</p><p>其实这样问题时很严重的，如果我在SSO没有登录，而是直接在浏览器中敲入回调的地址，并带上伪造的用户信息，是不是业务系统也认为登录了呢？这是很可怕的。</p><h3 id="基于域的sso"><a class="markdownIt-Anchor" href="#基于域的sso"></a> 基于域的SSO</h3><p>在基于域的SSO中，不同的应用程序都属于同一个父域名下的子域名。例如，<a href="http://xn--Aa-if3c34qjer8umrneb727l7j9apedspo.example.com">应用程序A的域名可以是a.example.com</a>，<a href="http://xn--Bb-if3c34qjer8umrneb727l7j9apedspo.example.com">应用程序B的域名可以是b.example.com</a>。这些应用程序共享相同的用户身份验证机制和令牌。</p><p>当用户登录到其中一个应用程序时，身份验证会在父域名下进行。一旦用户成功登录，并在父域名下生成了令牌，该令牌可以被其他子域名下的应用程序共享和验证。这样，用户在访问其他子域名下的应用程序时，无需再次输入凭据，而是直接使用已验证的令牌进行登录。</p><p>一个企业一般情况下只有一个域名，通过二级域名区分不同的系统。比如我们有个域名叫做：<a href="http://a.com">a.com</a>，同时有两个业务系统分别为：<a href="http://app1.a.xn--comapp2-bs4l.a.com">app1.a.com和app2.a.com</a>。我们要做单点登录（SSO），需要一个登录系统，叫做：<a href="http://sso.a.com">sso.a.com</a>。</p><p>我们只要在sso.a.com登录，app1.a.com和app2.a.com就也登录了。通过上面的登陆认证机制，我们可以知道，在sso.a.com中登录了，其实是在sso.a.com的服务端的session中记录了登录状态，同时在浏览器端（Browser）的sso.a.com下写入了Cookie。那么我们怎么才能让app1.a.com和app2.a.com登录呢？这里有两个问题：</p><p>Cookie是不能跨域的，<a href="http://xn--Cookiedomainsso-vh6xg68nmiourizovmm2f.a.com">我们Cookie的domain属性是sso.a.com</a>，在给app1.a.com和app2.a.com发送请求是带不上的。<br>sso、app1和app2是不同的应用，它们的session存在自己的应用内，是不共享的。<br><img src="/2023/08/28/ji-suan-ji/ji-suan-ji-ji-chu/sso-dan-dian-deng-lu/image2.png" alt="Alt text"></p><p>那么我们如何解决这两个问题呢？针对第一个问题，sso登录以后，可以将Cookie的域设置为顶域，<a href="http://xn--zlr.a.com">即.a.com</a>，这样所有子域的系统都可以访问到顶域的Cookie。我们在设置Cookie时，只能设置顶域和自己的域，不能设置其他的域。比如：我们不能在自己的系统中给baidu.com的域设置Cookie。</p><p>Cookie的问题解决了，我们再来看看session的问题。我们在sso系统登录了，这时再访问app1，Cookie也带到了app1的服务端（Server），app1的服务端怎么找到这个Cookie对应的Session呢？这里就要把3个系统的Session共享，如图所示。共享Session的解决方案有很多，例如：Spring-Session。这样第2个问题也解决了。</p><p>同域下的单点登录就实现了，但这还不是真正的单点登录。</p><p>参考：<a href="https://developer.aliyun.com/article/636281">https://developer.aliyun.com/article/636281</a><br>参考：<a href="http://www.taodudu.cc/news/show-4247685.html?action=onClick">http://www.taodudu.cc/news/show-4247685.html?action=onClick</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局学习笔记</title>
      <link href="/2023/08/27/qian-duan/vue/flex-bu-ju-xue-xi-bi-ji/"/>
      <url>/2023/08/27/qian-duan/vue/flex-bu-ju-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>现在最流行的前端布局技术之一是弹性布局（Flexbox）。Flexbox提供了一种简单而强大的方式来创建自适应和灵活的布局。它可以轻松地实现水平和垂直居中、等高列布局、自适应网格等常见布局需求。Flexbox还具有简洁的语法和强大的控制能力，使得布局变得更加直观和易于理解。</p><p>另一个流行的布局技术是栅格布局（Grid）。栅格布局提供了更多的灵活性和精确控制的能力，可以实现复杂的网格布局。它可以将页面划分为行和列，通过设置网格单元格的属性，实现各种布局需求。栅格布局在响应式设计中非常有用，可以适应不同屏幕尺寸和设备。</p><h1 id="前端布局发展史"><a class="markdownIt-Anchor" href="#前端布局发展史"></a> 前端布局发展史</h1><p>前端的布局技术也是一点发展出来的</p><ol><li><p>表格布局：在Web技术的早期阶段，网页设计主要采用表格布局技术。通过使用HTML表格元素来创建网页布局，但这种方法存在一些限制，不够灵活，难以适应不同设备和屏幕尺寸。</p></li><li><p>基于表格的布局：随着对表格布局的限制的认识，人们开始使用基于表格的布局技术，如使用div和表格属性来创建网页布局。这种方法可以更好地控制布局，但仍然存在一些局限性。</p><ul><li>优点：简单易用，适用于简单的网页布局。</li><li>缺点：不够灵活，难以适应不同设备和屏幕尺寸，不推荐用于复杂的布局。</li></ul></li><li><p>浮动布局：随着CSS技术的发展，浮动布局成为一种流行的前端布局技术。通过将元素浮动到左侧或右侧，其他元素可以环绕在其周围。这种方法可以实现多列布局，但对于复杂的布局可能会出现问题。</p><ul><li>优点：相对于纯表格布局更灵活，可以更好地控制布局。</li><li>缺点：仍然受到表格布局的限制，不适用于响应式布局。</li></ul></li><li><p>定位布局：定位布局是一种通过使用CSS中的定位属性（如position）来放置元素的布局技术。通过设置元素的位置和偏移量，可以将元素放置在页面的任何位置。这种方法对于创建特定位置的元素非常有用，但不适用于自适应布局。</p><ul><li>优点：可以实现多列布局，适用于简单的布局需求。</li><li>缺点：对于复杂的布局可能会出现问题，需要处理清除浮动等附加样式。</li></ul></li><li><p>弹性布局：弹性布局（Flexbox）是CSS3中引入的一种布局技术。它通过使用弹性容器和弹性项目来实现自适应和灵活的布局。弹性布局可以在不同屏幕尺寸和设备上自动调整元素的大小和位置，使得响应式布局更加容易实现。</p><ul><li>优点：自适应性强，可以在不同屏幕尺寸和设备上自动调整元素的大小和位置。</li><li>缺点：对于复杂的布局可能需要更多的CSS样式和媒体查询。</li></ul></li><li><p>栅格布局：栅格布局（Grid）是CSS3中另一种强大的布局技术。它通过将网格划分为行和列，可以更精确地控制元素的位置和大小。栅格布局提供了更多的布局选项和灵活性，使得复杂的网页布局更加容易实现。</p><ul><li>优点：提供了更多的布局选项和灵活性，可以更精确地控制元素的位置和大小。</li><li>缺点：对于较旧的浏览器支持可能不完整，需要使用浏览器前缀或后备方案。<br>除了以上提到的布局技术，还有一些流行的框架和库，如Bootstrap、Foundation和Tailwind CSS等，它们提供了预定义的布局组件和样式，使得前端布局更加简单和快速。</li></ul></li></ol><p>注意 浮动布局 根本就不是一种布局手段，千万不要用。那玩意是用来做文字环绕的，根本不是为了布局而生的。</p><h1 id="flex-布局学习笔记"><a class="markdownIt-Anchor" href="#flex-布局学习笔记"></a> Flex 布局学习笔记</h1><p>自己写了一个小demo ，用来 观察 在 flex 布局下 不同属性的效果，进而加深对 flex 布局的理解</p><p><img src="/2023/08/27/qian-duan/vue/flex-bu-ju-xue-xi-bi-ji/iShot_2023-08-27_14.24.38.gif" alt="对齐属性效果"><br><img src="/2023/08/27/qian-duan/vue/flex-bu-ju-xue-xi-bi-ji/image.png" alt="不用flex布局效果"><br><img src="/2023/08/27/qian-duan/vue/flex-bu-ju-xue-xi-bi-ji/image2.png" alt="默认flex布局效果 以及 换行效果"><br>vue 单页面应用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card0<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>默认布局<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flexBox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1 { width: 600px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card1<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ display: flex;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flexBox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1 { width: 600px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card2<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ display: flex; flex-wrap: wrap}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flexBox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1 { width: 600px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5 { width: 300px;}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-group</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>justify<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-end<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-evenly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-around<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-text</span><span class="token punctuation">&gt;</span></span> { display: flex; flex-wrap: wrap ;justify-content: {{ justify }}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-text</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-group</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-group</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alignItem<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-end<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stretch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-text</span><span class="token punctuation">&gt;</span></span> { display: flex; flex-wrap: wrap ;align-items: {{ alignItem }}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-text</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-group</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-group</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alignContent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-end<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-around<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-evenly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-button</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stretch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-text</span><span class="token punctuation">&gt;</span></span> { display: flex; flex-wrap: wrap ;align-content: {{ alignContent }}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-text</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-group</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ between: justify==='space-between',evenly: justify==='space-evenly',around:justify==='space-around',        justify_content_start: justify==='flex-start',justify_content_end: justify==='flex-end',justify_content_center: justify==='center',                      start:alignItem==='flex-start',end:alignItem==='flex-end',center:alignItem==='center',stretch:alignItem==='stretch',                      content_start:alignContent==='flex-start',content_end:alignContent==='flex-end',content_center:alignContent==='center',content_stretch:alignContent==='stretch',                      space_between:alignContent==='space-between',space_around:alignContent==='space-around',space_evenly:alignContent==='space-evenly'                      }<span class="token punctuation">"</span></span>             <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flexBox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item1<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1 {width: 300px; height:auto}<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item2<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2 {width: 600px;height: 200px}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item3<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3 {width: 300px;height: 100px}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item4<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4 {width: 300px;height: 150px}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item5<span class="token punctuation">"</span></span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5 {width: 300px;height: 200px}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> justify <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> alignItem <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> alignContent <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">#card0 .item</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card0 .item1</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card1 .flexBox</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card1 .item</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card1 .item1</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card2 .flexBox</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">}</span><span class="token selector">#card2 .item</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card2 .item1</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card4 .item1</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card4 .item2</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">}</span><span class="token selector">#card4 .item3</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">}</span><span class="token selector">#card4 .item4</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">}</span><span class="token selector">#card4 .item5</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">}</span><span class="token selector">#card4 .flexBox</span> <span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card4 .justify_content_start</span> <span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">}</span><span class="token selector">#card4 .justify_content_end</span><span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card4 .justify_content_center</span> <span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">}</span><span class="token selector">#card4 .between</span> <span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">}</span><span class="token selector">#card4 .around</span> <span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card4 .evenly</span> <span class="token punctuation">{</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">}</span><span class="token selector">#card4 .start</span> <span class="token punctuation">{</span><span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">}</span><span class="token selector">#card4 .end</span> <span class="token punctuation">{</span><span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">}</span><span class="token selector">#card4 .center</span> <span class="token punctuation">{</span><span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">}</span><span class="token selector">#card4 .stretch</span> <span class="token punctuation">{</span><span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">}</span><span class="token selector">#card4 .content_start</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">}</span><span class="token selector">#card4 .content_end</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">}</span><span class="token selector">#card4 .content_center</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">}</span><span class="token selector">#card4 .content_stretch</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">}</span><span class="token selector">#card4 .space_between</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">}</span><span class="token selector">#card4 .space_around</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span>  space-around <span class="token punctuation">}</span><span class="token selector">#card4 .space_evenly</span> <span class="token punctuation">{</span><span class="token property">align-content</span><span class="token punctuation">:</span>  space-evenly <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue怎么就响应式了</title>
      <link href="/2023/08/27/qian-duan/vue/vue-zen-me-jiu-xiang-ying-shi-liao/"/>
      <url>/2023/08/27/qian-duan/vue/vue-zen-me-jiu-xiang-ying-shi-liao/</url>
      
        <content type="html"><![CDATA[<p>我们看这段vue代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h1&gt;{{ count }}&lt;/h1&gt;    &lt;el-button @click="count++"&gt;count++&lt;/el-button&gt;&lt;/template&gt;&lt;script setup&gt;const count = 10;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图<br><img src="/2023/08/27/qian-duan/vue/vue-zen-me-jiu-xiang-ying-shi-liao/iShot_2023-08-27_12.27.25.gif"><br>这里我们怎么点击 count++ 按钮, h1 标签中 count 显示的值都不会变化。 但是你说 内存 中 count 的值 变了么，当然变了，只是我们没有再反向给 h1 标签 赋值而已</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h1&gt;{{ count }}&lt;/h1&gt;    &lt;el-button @click="count++"&gt;count++&lt;/el-button&gt;&lt;/template&gt;&lt;script setup&gt;import {ref} from "vue";const count = ref(10);&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 如果 我们 使用 ref() 这个 函数 来定义 一个变量 ，那么 当我们再次点击 count++ 按钮的时候 ，h1 标签里面的值就会自动跟着变了。这就是 响应式 最基本的 表现形式 之一。</p><p><img src="/2023/08/27/qian-duan/vue/vue-zen-me-jiu-xiang-ying-shi-liao/iShot_2023-08-27_12.26.18.gif"></p><p>响应式的实现原理 参考 vue 的官方文档吧 <a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#ref">https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#ref</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中ref属性的作用</title>
      <link href="/2023/08/26/qian-duan/vue/vue-zhong-ref-shu-xing-de-zuo-yong/"/>
      <url>/2023/08/26/qian-duan/vue/vue-zhong-ref-shu-xing-de-zuo-yong/</url>
      
        <content type="html"><![CDATA[<p>注意这里指的 <code>ref</code> 是 内置的特殊 Attributes ，不是指的 <code>ref()</code> 函数。也就是用在 模板 标签 的属性上的那个 <code>ref</code></p><p>我们在引入组件后，怎么得到这个组件的引用，进而通过引用来操作组件呢。以elementui中表单组件的校验为例<br><img src="/2023/08/26/qian-duan/vue/vue-zhong-ref-shu-xing-de-zuo-yong/image.png"></p><p>其实 <code>&lt;el-form ref="formRef" &gt;</code>，这有点像java 中的 变量定义  <code>String formRef= null</code>.  意思是 针对 组件 <code>el-form</code> 我给他定义一个变量 <code>formRef</code> 后面就可以用 <code>formRef</code> 来代替当前组件了。</p><p>这个 ref 属性 属于 内置的特殊 Attributes。vue 中 内置的特殊 Attributes 一共有 仨 : <code>key</code>,<code>is</code>,<code>ref</code><br>参考 官方 文档 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#ref">https://cn.vuejs.org/api/built-in-special-attributes.html#ref</a><br><img src="/2023/08/26/qian-duan/vue/vue-zhong-ref-shu-xing-de-zuo-yong/image2.png"></p><p>ref 的作用 主要 用于注册模板引用。</p><p>什么是 模板引用 <a href="https://cn.vuejs.org/guide/essentials/template-refs.html">https://cn.vuejs.org/guide/essentials/template-refs.html</a></p><p>说白了，就是我最开始解释的那样，为了在后续能够方便和直接的操作那个组件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aria-label标签</title>
      <link href="/2023/08/26/qian-duan/vue/aria-label-biao-qian/"/>
      <url>/2023/08/26/qian-duan/vue/aria-label-biao-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="不寻常的属性"><a class="markdownIt-Anchor" href="#不寻常的属性"></a> 不寻常的属性</h1><p>html 中 总有一些 奇奇怪怪 不常见 的一些 标签和属性，今天见到了一个 叫 <code>aria-label</code> 的属性。</p><p>“aria-label” 是一个用于辅助技术的属性，用于提供元素的可访问名称。它用于描述一个元素的目的或功能，以便屏幕阅读器等辅助技术可以正确地传达给用户。 它通常用于没有文本内容的元素，例如图标按钮或仅包含图像的元素。</p><p>以下是一个示例，展示了如何使用 “aria-label” 属性：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-search<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们使用 “aria-label” 属性为按钮提供了一个可访问的名称，即 “搜索”。这样，屏幕阅读器用户将能够听到按钮的目的，即搜索功能。</p><h1 id="屏幕阅读器"><a class="markdownIt-Anchor" href="#屏幕阅读器"></a> 屏幕阅读器</h1><p>屏幕阅读器是一种辅助技术，用于帮助视力受限的用户浏览和使用网页。</p><p>屏幕阅读器通常提供导航功能，如标题导航、链接导航、表单导航等。用户可以使用这些功能快速浏览和定位到页面上的不同元素。</p><p>屏幕阅读器会逐个读取网页上的元素，如标题、段落、链接、按钮等。用户可以使用屏幕阅读器的命令来控制阅读速度、跳过内容等。</p><p>屏幕阅读器可以帮助用户导航到页面上的链接和表单元素，并提供相应的命令和提示，使用户能够点击链接或填写表单。</p><p>开发者应该正确使用 HTML 标记和语义，以便屏幕阅读器能够准确解读和呈现网页内容。例如，使用语义化的标签（如  </p><h1>  到  </h1><h6> 、 <nav> 、 <main>  等）来表示页面结构。<p></p></main></nav></h6>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea打开properties文件显示中文乱码解决方案</title>
      <link href="/2023/08/24/gong-ju-kong/intellij-idea/idea-da-kai-properties-wen-jian-xian-shi-zhong-wen-luan-ma-jie-jue-fang-an/"/>
      <url>/2023/08/24/gong-ju-kong/intellij-idea/idea-da-kai-properties-wen-jian-xian-shi-zhong-wen-luan-ma-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<center> <img src="/2023/08/24/gong-ju-kong/intellij-idea/idea-da-kai-properties-wen-jian-xian-shi-zhong-wen-luan-ma-jie-jue-fang-an/iShot_2023-08-24_15.44.07.jpg"> </center><p>打开设置,找到路径:File | Settings | Editor | File Encodings</p><center> <img src="/2023/08/24/gong-ju-kong/intellij-idea/idea-da-kai-properties-wen-jian-xian-shi-zhong-wen-luan-ma-jie-jue-fang-an/iShot_2023-08-24_15.43.29.jpg" style="width:800px"> </center>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven settings 配置</title>
      <link href="/2023/08/23/gou-jian-gong-ju/maven/maven-pei-zhi/"/>
      <url>/2023/08/23/gou-jian-gong-ju/maven/maven-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>参考 maven 官网 <a href="https://maven.apache.org/pom.html#Distribution_Management">https://maven.apache.org/pom.html#Distribution_Management</a></p><h1 id="settingxml-的作用"><a class="markdownIt-Anchor" href="#settingxml-的作用"></a> setting.xml 的作用</h1><p>settings.xml  是 Maven 的配置文件，用于配置 Maven 构建工具的行为和环境设置。它位于 Maven 安装目录下的  conf  文件夹中。</p><ol><li>仓库配置：您可以在  settings.xml  中配置 Maven 的本地仓库路径和远程仓库地址。本地仓库用于存储下载的依赖库和构建生成的构件。远程仓库用于下载依赖库和发布构件。</li><li>代理配置：如果您在访问远程仓库时需要经过代理服务器，可以在  settings.xml  中配置代理设置，包括代理主机、端口、用户名和密码等。</li><li>镜像配置：镜像是指向远程仓库的替代地址，用于加速依赖库的下载。您可以在  settings.xml  中配置镜像设置，指定镜像仓库的地址和对应的远程仓库。</li><li>服务器配置：如果您需要连接到需要身份验证的远程仓库或发布构件到远程仓库，可以在  settings.xml  中配置服务器凭据，包括服务器的唯一标识符、用户名和密码等。</li><li>构建配置： settings.xml  还可以配置构建过程中的一些行为和选项，例如构建工具的版本、构建插件的配置、构建环境的配置等。</li></ol><p>需要注意的是， settings.xml  是全局配置文件，适用于所有 Maven 项目。如果需要针对特定项目进行个性化配置，可以在项目的  pom.xml  文件中使用  <code>repositories</code> 、 <code>pluginRepositories</code>  等元素进行配置覆盖。</p><h1 id="属性配置"><a class="markdownIt-Anchor" href="#属性配置"></a> 属性配置</h1><p>在 Maven 的  settings.xml  文件中，第一层的属性可以配置如下：</p><ol><li>localRepository : 指定本地仓库的路径。</li><li>interactiveMode : 是否启用交互模式，即在构建过程中是否需要用户输入确认。</li><li>offline : 是否离线模式，即是否禁止从远程仓库下载依赖项。</li><li>pluginGroups : 定义插件组的列表，用于简化插件的引用。</li><li>proxies : 配置代理服务器的列表，用于访问远程仓库。</li><li>servers : 配置服务器的列表，用于连接到远程仓库或发布构件时的身份验证。</li><li>mirrors : 配置镜像的列表，用于加速下载依赖项的过程。</li><li>profiles : 定义配置文件的列表，每个配置文件可以包含特定环境的配置，如代理设置、仓库设置等。</li></ol><p>其中最常用的就是<br>6. servers : 配置服务器的列表，用于连接到远程仓库或发布构件时的身份验证。 就是配置账号密码的<br>7. mirrors : 配置镜像的列表，用于加速下载依赖项的过程。 这个是为了加速用的<br>8. profiles : 定义配置文件的列表，每个配置文件可以包含特定环境的配置，如代理设置、仓库设置等。 这个是真正配置远程仓库的地方，指定去哪里下载，上传到哪里的。</p><h2 id="servers"><a class="markdownIt-Anchor" href="#servers"></a> servers</h2><p>构建和部署的仓库是通过POM文件中的<code>repositories</code>和<code>distributionManagement</code>元素来定义的。然而，某些设置，如用户名和密码，不应该与pom.xml一起分发。这类信息应该存在于构建服务器的settings.xml文件中。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>server001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>my_login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>my_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>privateKey</span><span class="token punctuation">&gt;</span></span>${user.home}/.ssh/id_dsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>privateKey</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>passphrase</span><span class="token punctuation">&gt;</span></span>some_passphrase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>passphrase</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filePermissions</span><span class="token punctuation">&gt;</span></span>664<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filePermissions</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directoryPermissions</span><span class="token punctuation">&gt;</span></span>775<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directoryPermissions</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>id：这是服务器的ID（不是要登录的用户的ID），与Maven尝试连接的仓库/镜像的id元素匹配。</p><p>username、password：这些元素作为一对出现，表示登录到该服务器所需的用户名和密码进行身份验证。</p><p>privateKey、passphrase：与前两个元素类似，这对指定了私钥的路径（默认为${user.home}/.ssh/id_dsa）和（如果需要）密码。将来，密码和密码短语元素可能会外部化，但目前必须在settings.xml文件中以明文形式设置。</p><p>filePermissions、directoryPermissions：在部署时创建仓库文件或目录时，使用的权限。每个权限的合法值是对应于*nix文件权限的三位数字，例如664或775。</p><p>注意：如果您使用私钥登录服务器，请确保省略<code>password</code>元素。否则，密钥将被忽略。</p><h2 id="mirrors"><a class="markdownIt-Anchor" href="#mirrors"></a> mirrors</h2><p><code>mirrors</code>  元素在 Maven 的  settings.xml  文件中用于配置镜像仓库。镜像仓库是指向远程仓库的替代地址，用于加速依赖库的下载。 <code>mirrors</code> 走的是镜像服务器，一般也就是你搭建的 nexus 私服。不过 mirror 中配置的应该是一个公开的镜像仓库地址，一般不需要账号密码就可以访问进行查看，但是你是没有权限直接下载。比如 阿里云的镜像服务器 <a href="https://maven.aliyun.com/nexus/content/groups/public">https://maven.aliyun.com/nexus/content/groups/public</a><br>当 Maven 构建过程中需要下载依赖项时，它会首先检查  <code>mirrors</code>  元素中是否配置了与远程仓库匹配的镜像。如果找到匹配的镜像配置，Maven 将使用镜像仓库的地址来下载依赖项，而不是直接访问远程仓库。镜像仓库的作用是提供更快的下载速度和更好的稳定性，特别是在网络环境不佳的情况下。通过配置镜像仓库，可以将远程仓库的内容镜像到本地或其他可访问的服务器，从而加快依赖项的下载速度。<br>示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>planetmirror.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>PlanetMirror Australia<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://downloads.planetmirror.com/pub/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>id用于区分镜像元素，并在连接到镜像时从<code>servers</code>部分选择相应的凭据。</p><h2 id="profiles"><a class="markdownIt-Anchor" href="#profiles"></a> profiles</h2><p>settings.xml中的 <code>profile</code> 元素是pom.xml中 <code>profile</code> 元素的简化版本。它包括<code>activation</code>、<code>repositories</code>、<code>pluginRepositories</code>和<code>properties</code>元素。<code>profile</code>元素仅包含这四个元素，因为它们关注的是整个构建系统（这是settings.xml文件的作用），而不是个别项目对象模型设置。 如果从settings中激活了一个<code>profile</code>，它的值将覆盖POM或profiles.xml文件中具有相同ID的<code>profile</code>的任何值。</p><ol><li>id ：配置文件的唯一标识符。</li><li>activation ：配置文件的激活条件，可以根据不同的条件来激活特定的配置文件。例如，可以根据操作系统、Java 版本、环境变量等来激活配置文件。</li><li>properties ：定义配置文件中使用的属性，这些属性可以在配置文件中引用和使用。</li><li>repositories ：配置配置文件中使用的远程仓库，可以指定特定的远程仓库地址。</li><li>pluginRepositories ：配置配置文件中使用的插件仓库，可以指定特定的插件仓库地址。</li><li>activation ：定义配置文件的激活条件，可以根据不同的条件来激活特定的配置文件。</li><li>build ：定义配置文件中的构建设置，包括插件、资源、插件管理等。</li><li>dependencyManagement ：定义配置文件中的依赖管理，可以统一管理项目中的依赖项版本。</li></ol><p>这里头最常用的就是</p><ol start="4"><li>repositories ：配置配置文件中使用的远程仓库，可以指定特定的远程仓库地址。这个是下载的地址。</li><li>properties ：定义配置文件中使用的属性，这些属性可以在配置文件中引用和使用。 里头可以配置  <code>altReleaseDeploymentRepository</code>  和  <code>altSnapshotDeploymentRepository</code> 用于指定替代的发布和快照部署仓库。它们允许您在构建过程中指定不同于默认发布和快照部署仓库的替代仓库.</li></ol><h3 id="properties"><a class="markdownIt-Anchor" href="#properties"></a> properties</h3><p>这个是属性变量配置的地方</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>      ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user.install</span><span class="token punctuation">&gt;</span></span>${user.home}/our-project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user.install</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>      ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repositories"><a class="markdownIt-Anchor" href="#repositories"></a> repositories</h4><p>这个是jar上传下载的地方</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>      ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>codehausSnapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Codehaus Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>never<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>fail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://snapshots.maven.codehaus.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>myPluginRepo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>My Plugins repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven-central-eu....com/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>      ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="altreleasedeploymentrepository-altsnapshotdeploymentrepository"><a class="markdownIt-Anchor" href="#altreleasedeploymentrepository-altsnapshotdeploymentrepository"></a> altReleaseDeploymentRepository &amp; altSnapshotDeploymentRepository</h1><p>官网上对这俩的记载比较少。关于  altReleaseDeploymentRepository  和  altSnapshotDeploymentRepository  这两个属性，它们通常用于在特定的构建配置文件（profile）中定义替代的发布部署仓库。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>altReleaseDeploymentRepository</span><span class="token punctuation">&gt;</span></span>https://example.com/release-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>altReleaseDeploymentRepository</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>altSnapshotDeploymentRepository</span><span class="token punctuation">&gt;</span></span>https://example.com/snapshot-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>altSnapshotDeploymentRepository</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中， <code>altReleaseDeploymentRepository</code>  和  <code>altSnapshotDeploymentRepository</code>  属性分别设置了替代的发布部署仓库的地址。 这样，在构建过程中，当 Maven 需要发布构件时，它将使用这些属性中定义的替代仓库地址，而不是  <code>istributionManagement</code>  元素中配置的默认仓库地址。</p><p>一个完整的基本的setting.xml 大致长下面这个样子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置本地仓库路径 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>/path/to/local/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 是否启用交互模式 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interactiveMode</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interactiveMode</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 是否离线模式 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>offline</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>offline</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置插件组 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroup</span><span class="token punctuation">&gt;</span></span>com.example.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置代理服务器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxy</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_proxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocol</span><span class="token punctuation">&gt;</span></span>http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocol</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">&gt;</span></span>proxy.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>proxy_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>proxy_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonProxyHosts</span><span class="token punctuation">&gt;</span></span>localhost|*.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonProxyHosts</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxy</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置服务器凭据 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>my_username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>my_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置镜像 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://mirror.example.com/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置配置文件列表 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 定义配置文件的唯一标识符 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_profile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 配置文件的激活条件 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 定义配置文件中使用的属性 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my.property</span><span class="token punctuation">&gt;</span></span>example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my.property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>altReleaseDeploymentRepository</span><span class="token punctuation">&gt;</span></span>rdc-releases::default::https://packages.aliyun.com/maven/repository/2130760-release-QBA04h/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>altReleaseDeploymentRepository</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>altSnapshotDeploymentRepository</span><span class="token punctuation">&gt;</span></span>rdc-snapshots::default::https://packages.aliyun.com/maven/repository/2130760-snapshot-ERthMg/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>altSnapshotDeploymentRepository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!-- 配置特定的远程仓库地址 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://example.com/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!-- 配置特定的插件仓库地址 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my_plugin_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://example.com/plugin-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 构建工具 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把json变成excel</title>
      <link href="/2023/08/22/linux/shell/ba-json-bian-cheng-excel/"/>
      <url>/2023/08/22/linux/shell/ba-json-bian-cheng-excel/</url>
      
        <content type="html"><![CDATA[<p>通过 jq 工具可以把 一段 json 数组 转换成 cvs , 然后就能用 excel 工具打开了。</p><p>参考 <a href="https://jqlang.github.io/jq/manual/">https://jqlang.github.io/jq/manual/</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"City A"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"City B"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存到文件  data.json 中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jq <span class="token parameter variable">-r</span> <span class="token string">'.[] | [.name, .age, .location] | @csv'</span> data.json <span class="token operator">&gt;</span> output.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> text.json  <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'.[] | [.name, .age] | @csv'</span> <span class="token operator">&gt;</span> output.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone 凭据缓存问题</title>
      <link href="/2023/08/21/gong-ju-kong/git/git-cang-ku-shi-yong-bu-tong-yong-hu-xia-zai-dai-ma/"/>
      <url>/2023/08/21/gong-ju-kong/git/git-cang-ku-shi-yong-bu-tong-yong-hu-xia-zai-dai-ma/</url>
      
        <content type="html"><![CDATA[<img src="/2023/08/21/gong-ju-kong/git/git-cang-ku-shi-yong-bu-tong-yong-hu-xia-zai-dai-ma/image1.png"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://git-demo.flydiysz.cn/autoapp-demo-repo/vw3mq0dto6/mod300004223.gitCloning into <span class="token string">'mod300004223'</span><span class="token punctuation">..</span>.Username <span class="token keyword">for</span> <span class="token string">'https://git-demo.flydiysz.cn'</span><span class="token builtin class-name">:</span> chenxiaoshangPassword <span class="token keyword">for</span> <span class="token string">'https://chenxiaoshang@git-demo.flydiysz.cn'</span><span class="token builtin class-name">:</span>remote: HTTP Basic: Access deniedfatal: Authentication failed <span class="token keyword">for</span> <span class="token string">'https://git-demo.flydiysz.cn/autoapp-demo-repo/vw3mq0dto6/mod300004223.git/'</span>chenshang@192.168.1.210:~/Work/Fly$ <span class="token function">git</span> clone https://git-demo.flydiysz.cn/autoapp-demo-repo/vw3mq0dto6/mod300004223.gitCloning into <span class="token string">'mod300004223'</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个问题通常是由于凭据缓存导致的。在 MacOS 上，Git 会使用系统中的凭据缓存，这可能导致在使用不同用户克隆代码时出现访问被拒绝的问题。</p><p>清除凭据缓存：</p><p>打开“钥匙串访问”应用程序。<br>在左上方的搜索框中输入“git”以筛选结果。<br>选择所有与 Git 相关的凭据条目。<br>右键单击所选条目，然后选择删除。</p><img src="/2023/08/21/gong-ju-kong/git/git-cang-ku-shi-yong-bu-tong-yong-hu-xia-zai-dai-ma/image.png">]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换node版本</title>
      <link href="/2023/08/21/qian-duan/vue/qie-huan-node-ban-ben/"/>
      <url>/2023/08/21/qian-duan/vue/qie-huan-node-ban-ben/</url>
      
        <content type="html"><![CDATA[<p>今天启动vue服务的时候遇到了以下报错<br><img src="/2023/08/21/qian-duan/vue/qie-huan-node-ban-ben/image.png"></p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Error:</span> error<span class="token operator">:</span><span class="token number">0308010C</span><span class="token operator">:</span>digital envelope routines<span class="token operator">:</span><span class="token operator">:</span>unsupported    at new Hash <span class="token operator">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>crypto<span class="token operator">/</span>hash<span class="token operator">:</span><span class="token number">67</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">)</span>    at Object<span class="token punctuation">.</span>createHash <span class="token operator">(</span>node<span class="token operator">:</span>crypto<span class="token operator">:</span><span class="token number">135</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">)</span>    at <span class="token domain constant">module.exports</span> <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/util/createHash.js</span><span class="token operator">:</span><span class="token number">135</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">)</span>    at Compilation<span class="token punctuation">.</span>createHash <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1918</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">)</span>    at <span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1386</span><span class="token operator">:</span><span class="token number">9</span>    at AsyncSeriesHook<span class="token punctuation">.</span>eval <span class="token punctuation">[</span>as callAsync<span class="token punctuation">]</span> <span class="token operator">(</span>eval at create <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/tapable/lib/HookCodeFactory.js</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">)</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span>    at AsyncSeriesHook<span class="token punctuation">.</span>lazyCompileHook <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/tapable/lib/Hook.js</span><span class="token operator">:</span><span class="token number">154</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">)</span>    at Compilation<span class="token punctuation">.</span>seal <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1342</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">)</span>    at <span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compiler.js</span><span class="token operator">:</span><span class="token number">675</span><span class="token operator">:</span><span class="token number">18</span>    at <span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1261</span><span class="token operator">:</span><span class="token number">4</span>    at AsyncSeriesHook<span class="token punctuation">.</span>eval <span class="token punctuation">[</span>as callAsync<span class="token punctuation">]</span> <span class="token operator">(</span>eval at create <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/tapable/lib/HookCodeFactory.js</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">)</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span>    at AsyncSeriesHook<span class="token punctuation">.</span>lazyCompileHook <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/tapable/lib/Hook.js</span><span class="token operator">:</span><span class="token number">154</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">)</span>    at Compilation<span class="token punctuation">.</span>finish <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1253</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">)</span>    at <span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compiler.js</span><span class="token operator">:</span><span class="token number">672</span><span class="token operator">:</span><span class="token number">17</span>    at eval <span class="token operator">(</span>eval at create <span class="token operator">(</span><span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/tapable/lib/HookCodeFactory.js</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">)</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span>    at <span class="token file-path string">/Users/chenshang/Work/Fly/web001/node_modules/webpack/lib/Compilation.js</span><span class="token operator">:</span><span class="token number">1185</span><span class="token operator">:</span><span class="token number">12</span> <span class="token operator">{</span>  <span class="token property">opensslErrorStack:</span> <span class="token punctuation">[</span> <span class="token string">'error:03000086:digital envelope routines::initialization error'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">library:</span> <span class="token string">'digital envelope routines'</span><span class="token punctuation">,</span>  <span class="token property">reason:</span> <span class="token string">'unsupported'</span><span class="token punctuation">,</span>  <span class="token property">code:</span> <span class="token string">'ERR_OSSL_EVP_UNSUPPORTED'</span><span class="token operator">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照 同事 给出的解决手段 在 package.json 中 使用 如下配置</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"serve": "export NODE_OPTIONS=—openssl-legacy-provider;node scripts/config.js &amp; npm run env &amp;&amp; vue-cli-service serve",  "build": "export NODE_OPTIONS=—openssl-legacy-provider;vue-cli-service build",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者在环境变量里面单独 添加</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">export NODE_OPTIONS=—openssl-legacy-provide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是无法解决问题，遂 打算降低  node 的版本尝试一下</p><p>全局安装 n 工具，是专门管理 node 版本的，可以用他来切换 node 的版本，当然还有其他工具也可以切换，自行百度就好，我用的是 n 工具。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install -g n       // 全局安装nn                      // 查看Node.js版本列表n &lt;版本号&gt;              // 安装指定版本的Node.jsn list                 // 切换当前使用的Node.js版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>记得使用 sudo 指令获取管理员权限</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript异步机制</title>
      <link href="/2023/08/20/qian-duan/javascript/javascript-yi-bu-bian-cheng/"/>
      <url>/2023/08/20/qian-duan/javascript/javascript-yi-bu-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中的异步机制主要通过回调函数、Promise 和 async/await 来实现。</p><p>回调函数：在早期，异步操作通常通过回调函数来处理。例如，在执行异步操作时，可以指定一个回调函数，在操作完成后将调用该函数。但是，回调地狱（Callback Hell）的问题使得代码难以阅读和维护。</p><p>Promise：Promise 是一种更加可读和结构化的异步编程方式。一个 Promise 表示一个可能还未完成的异步操作，并提供了一种链式处理这个操作的方式。通过 .then() 方法可以附加处理已解决（resolved）和已拒绝（rejected）状态的回调函数，以处理操作的结果。</p><p>async/await：async/await 是 ES2017 引入的异步编程的更高级抽象。使用 async 关键字标记一个函数为异步函数，可以在其中使用 await 关键字来等待一个 Promise 完成。这种方式使得异步代码看起来更像同步代码，更易于理解和维护。</p><p>尽管 JavaScript 的异步操作使得程序在等待某些操作时能够继续执行其他任务，但它并不总是真正的并行。JavaScript 运行在单线程的主事件循环中，意味着在同一时刻只能执行一个任务。这意味着异步操作实际上是基于事件触发的，而不是真正的多线程并行执行。</p><p>总结来说，JavaScript 中的异步操作是一种允许程序在执行期间不阻塞主线程的机制，它通过回调函数、Promise 和 async/await 等方式实现。尽管不是真正的并行执行，异步操作仍然能够提高程序的响应性和性能。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中方法的参数传递</title>
      <link href="/2023/08/20/qian-duan/javascript/javascript-zhong-fang-fa-de-can-shu-chuan-di/"/>
      <url>/2023/08/20/qian-duan/javascript/javascript-zhong-fang-fa-de-can-shu-chuan-di/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中 如果定义了一个无参的函数 ，我们仍然可以调用这个函数并传递参数给这个函数，在JavaScript 中这是允许的，而且不会报错。但是这在Java中确实不允许的，这一点可以对比一下。</p><p>例如</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function echo(){    console.log("我执行了echo()")}// 你仍然可以调用而不用担心报错echo(1,2,3,4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这么是因为 你传递的参数其实是 放到了 函数 内部一个名叫 arguments 的方法 里面。我们可以在函数内部，使用 arguments 变量 依次取出 传递给 函数的 参数</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function echo(){    console.log("我执行了echo() 第一个参数是:",arguments[0])}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的函数是可以打印出传递的参数的，即使 函数没有显示的定义一个变量来接受参数</p><p>这一点 和 shell 很像. 在 shell 里面, 定义一个函数，你可以传参也可以不传参，传参的话，一个参数就用 $1 取值，第二个参数就用 $2 取值，依次类推</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">param1</span><span class="token operator">=</span><span class="token variable">$1</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">param2</span><span class="token operator">=</span><span class="token variable">$2</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${param1}</span> and <span class="token variable">${param2}</span>"</span><span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过要注意一下 JavaScript 中对于箭头函数中，是没有办法 获取到 arguments 这个特殊变量的 ,因为 箭头函数这种写法其实是没有绑定一个实体的，他连this 都没有。不过可以使用 剩余参数的形式来间接实现</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const echo=(...arg)=&gt;{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不过，JavaScript 语法实在是太多而且太灵活了，一种形式可以有多种写法，而且还有原生和EMACScript等多种标准，学习每一种写法，不亚于重新学习了一门新的语言。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块的导入和导出</title>
      <link href="/2023/08/20/qian-duan/javascript/javascript-mo-kuai-de-dao-ru-he-dao-chu/"/>
      <url>/2023/08/20/qian-duan/javascript/javascript-mo-kuai-de-dao-ru-he-dao-chu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://chen-shang.github.io/2023/07/01/qian-duan/html/liu-lan-qi-zhi-chi-es-mo-kuai-zhong-de-es-mo-kuai-shi-shi-me/">浏览器支持ES模块 中的 ES模块 是什么</a></p><p>ECMAScript 6 (ES6) 是 JavaScript 的一个版本，它引入了许多新的语法特性和功能。其中包括 import 和 export 关键字，用于模块的导入和导出。</p><p>在 ES6 之前，JavaScript 并没有官方的模块系统，导致开发者使用各种自定义的模块加载器或框架来管理模块。ES6 的 import 和 export 关键字提供了一种标准化的模块化方案，使得开发者可以更方便地组织、管理和重用代码。</p><p>注意在ES6之前，JavaScript并没有官方的模块系统。开发者通常使用一些工具或框架来实现模块化的导入和导出功能。其中，一个常见的实现方式是使用模块加载器库（如RequireJS）来处理模块的导入和导出。</p><p>在理解 import 和 export 的使用方式之前，需要了解一些基本的概念：</p><blockquote><p>模块：ES6 的模块是 JavaScript 中的一个独立文件，可以包含变量、函数、类等代码。每个模块可以通过 import 和 export 来与其他模块进行交互。</p></blockquote><blockquote><p>导出：使用 export 关键字将模块中的变量、函数或类导出，使其可以被其他模块引用。一个模块中可以有多个导出。</p></blockquote><p>我们知道 Java 语言中，如果我们需要调用另一个类中的方法, 我们最简单的手段就是把他声明为 public 就行了。而在javascript中如果一个方法需要被其他模块能够使用，就要用 export 进行暴露，只要没有用export暴露的就都是当前模块私有的。你可以理解 export 就相当于给属性或者函数加了 public 修饰符而已。只不过 export 的用法比较灵活，它甚至可以在 模块的 最后在选择暴露，而不是在定义的时候暴露。这一点和 shell 这类面向过程的编程语言有点类似</p><h1 id="导出-export-导入-import"><a class="markdownIt-Anchor" href="#导出-export-导入-import"></a> 导出 export  &amp; 导入 import</h1><p>在ES6中，模块可以通过两种方式导出功能：默认导出和命名导出。</p><h2 id="默认导出"><a class="markdownIt-Anchor" href="#默认导出"></a> 默认导出</h2><p>一个模块可以使用 default 关键字导出一个默认的值，并且默认的导出在导入时可以随意命名。如果使用默认导出，可以在一个模块中只导出一个默认功能。当一个模块只需要导出一个功能时，可以使用默认导出。使用默认导出时，在导入该功能时可以就不用加{}了。{} 属于命名导出，其本质是解构语法。否则idea也会有提示。<br><img src="/2023/08/20/qian-duan/javascript/javascript-mo-kuai-de-dao-ru-he-dao-chu/image.png"></p><p>例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出默认值</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 导入默认值</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'./math.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名导出"><a class="markdownIt-Anchor" href="#命名导出"></a> 命名导出</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出变量</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'John'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">// 导出函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 导出类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入：使用 import 关键字引入其他模块导出的变量、函数或类。导入的内容可以通过解构赋值的方式进行引用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入变量、函数、类</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sayHello<span class="token punctuation">,</span> Person <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：'John'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：25</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：'Hello!'</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：'Alice'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，模块的导入和导出只能在 ES6 模块系统的环境中使用，如在现代浏览器中、Node.js 中或使用一些支持 ES6 的构建工具中。对于较旧的 JavaScript 运行环境，可以使用 Babel 等编译工具将 ES6 代码转换为可兼容的 JavaScript 代码。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript不支持方法的重载</title>
      <link href="/2023/08/19/qian-duan/javascript/javascript-bu-zhi-chi-fang-fa-de-chong-zai/"/>
      <url>/2023/08/19/qian-duan/javascript/javascript-bu-zhi-chi-fang-fa-de-chong-zai/</url>
      
        <content type="html"><![CDATA[<p>我们先看一下下面的html页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>echo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">echo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>echo(1)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">echo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>echo(1,2)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我执行了echo()"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我执行了echo(a)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再看一下其中的javascript代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我执行了echo()"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我执行了echo(a)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们点击按钮最终调用的都是</p><pre class="line-numbers language-none"><code class="language-none">function echo(a) {        alert("我执行了echo(a)");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就跟我们的常识有点出入了,要知道像Java、Scala、Python这样的语言都是支持方法重载的,也就是在一个类中(你可以理解为文件中)是可以定义同名但是入参不同的函数的，这就叫方法的重载<br>比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">String</span> a <span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义的三个函数，在调用的时候，编译器会尽最大努力进行精确匹配 ，如果你写<br><code>echo()</code> 那么调用的就是第一个 <code>echo()</code> 函数;如果你写<br><code>echo("1")</code> 那么调用的就是 第二个 <code>echo(String a)</code>; 如果你写<br><code>echo("1","2")</code> 那么调用的就是 第三个 <code>echo(String a ,String b)</code>;</p><p>这似乎更符合人类的感官。但是 JavaScript 语言这类语言却反其道而行之，JavaScript 遇到重名的函数，走的是覆盖的逻辑，也就是最后定义的函数会覆盖前面的函数，这样，第二个 echo(a) 函数就是最终的名叫 echo 的函数，而 javsscript 中之前的两个函数就相当于没有定义一样。</p><p>这类语言一般都是面向过程的语言，javascript 最开始的时候确实就是面向过程的，后来随着 EMAC 标准的制定，逐渐变得有点多范式的感觉了。</p><p>这里javascrip 语言真是特别灵活 ，对于  echo(1,2) 这个调用，他居然也能正常的调用到 echo(a) ,按照我们的理解，echo(1,2) 需要两个入参，但是我们并没有定义有两个入参的 echo(a,b) 这样的函数要，理论上应该报错才对啊, 这你就想错。 如果你这样瞎传参数，无论括号里面有多少个 参数，也只有第一个参数有作用，会调用到 echo(a) ,然后把第一个参数赋值给a,剩下的参数就不能显示的获取了。 这种特性有点类似于结构，一些函数编程语言会提供这种高级的用法，期待Java也能慢慢支持这种语法糖吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中声明变量</title>
      <link href="/2023/08/19/qian-duan/javascript/javascript-zhong-sheng-ming-bian-liang/"/>
      <url>/2023/08/19/qian-duan/javascript/javascript-zhong-sheng-ming-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="在javascript中声明变量的三种方式"><a class="markdownIt-Anchor" href="#在javascript中声明变量的三种方式"></a> 在JavaScript中声明变量的三种方式</h1><p>在JavaScript中，可以使用关键字var、let或const来声明变量。<br>使用var关键字声明变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个名为myVariable的变量并将其初始化为10。使用var声明的变量是函数作用域的，意味着它们只在声明它们的函数内部可见。</p><p>使用let关键字声明变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与var不同，使用let声明的变量是块级作用域的，意味着它们只在声明它们的块（例如，if语句或循环）内部可见。</p><p>使用const关键字声明常量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myConstant <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用const声明的变量是常量，不可以重新赋值。一旦初始化，它们的值将保持不变。</p><p>注意：在ECMAScript 6（ES6）中引入了let和const关键字。如果您的项目是基于ES6或更高版本的JavaScript，建议使用let和const来声明变量，因为它们提供了更好的作用域规则和不可变性。</p><h1 id="var-let-const-的区别"><a class="markdownIt-Anchor" href="#var-let-const-的区别"></a> var | let | const 的区别</h1><p>在JavaScript中，我们有三种声明变量的方式：<code>var</code>、<code>let</code>和<code>const</code>。它们之间有一些区别，让我们来逐个解释它们：</p><p><code>var</code>：在ES5及更早版本的JavaScript中，var是声明变量的主要方式。使用var声明的变量是函数作用域，这意味着它们在它们被声明的函数内部可见。如果在函数外或在其他代码块中使用var声明变量，它们将成为全局变量。</p><p><code>let</code>：ES6引入了let关键字。let声明的变量是块级作用域，这意味着它们在声明的代码块内部可见。与var不同，let不会在外部块中创建全局变量。如果在同一个作用域中使用let声明同名变量，会引起一个错误。</p><p><code>const</code>：同样是在ES6中引入的，const用于声明常量，这意味着一旦值被赋值后就不能再改变。const声明的变量也是块级作用域。与let一样，如果在同一个作用域中使用const声明同名变量，会引起一个错误。</p><p>总结一下：</p><p>使用<code>var</code>声明的变量是函数作用域，而使用<code>let</code>和<code>const</code>声明的变量是块级作用域。<br>使用<code>var</code>声明的变量可以被重新赋值和重新声明，而使用<code>let</code>声明的变量可以被重新赋值但不能被重新声明，使用<code>const</code>声明的变量既不能被重新赋值也不能被重新声明。<br>在同一个作用域中，使用<code>var</code>可以重复声明同名变量，而使用<code>let</code>和<code>const</code>会引起一个错误。<br>根据实际需求，选择合适的声明变量的方式是很重要的。如果需要一个可以重新赋值的变量，可以使用<code>let</code>关键字；如果需要一个不可改变的常量，可以使用<code>const</code>关键字。在ES6之前，var是唯一的选择；但是在ES6之后，推荐使用<code>let</code>和<code>const</code>来声明变量，因为它们更加灵活、安全和可读性更高。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Afred和Spotlight无法搜索问题解决</title>
      <link href="/2023/08/18/gong-ju-kong/mac/afred-he-spotlight-wu-fa-sou-suo-wen-ti-jie-jue/"/>
      <url>/2023/08/18/gong-ju-kong/mac/afred-he-spotlight-wu-fa-sou-suo-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p>试图重建索引</p><center> <img src="/2023/08/18/gong-ju-kong/mac/afred-he-spotlight-wu-fa-sou-suo-wen-ti-jie-jue/image.png" style="height:300px"> </center>但是在Alfred内使用重建功能时报错。<p>既然Alfred帮我们建立不了，那我自己手工去重建 Spotlight 的索引让它使用就好了。</p><p>我们进入到  Alfred 的安装目录下，这里面有对应的重建索引的脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Applications/Alfred <span class="token number">5</span>.app/Contents/Frameworks/Alfred Framework.framework/Versions/A/Resources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本分别是</p><pre class="line-numbers language-none"><code class="language-none">sh reindex.shsh reindexdel.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果遇到  <code>Spotlight server is disabled.</code> 这种报错</p><pre class="line-numbers language-none"><code class="language-none">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plistsudo mdutil -i off /sudo mdutil -E /sudo mdutil -i on /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提示 Indexing enabled. 即可。然后在重新执行重建索引命令</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac &amp; windows 键鼠共享</title>
      <link href="/2023/08/18/gong-ju-kong/sharemouse/mac-windows-jian-shu-gong-xiang/"/>
      <url>/2023/08/18/gong-ju-kong/sharemouse/mac-windows-jian-shu-gong-xiang/</url>
      
        <content type="html"><![CDATA[<p>当使用多台计算机时，使用一个键盘和鼠标来控制所有计算机可能会非常方便。</p><p>ShareMouse 是一个可以实现 Mac 和 Windows 之间键盘和鼠标共享的软件。以下是使用 ShareMouse 实现键盘和鼠标共享的简单教程：</p><p>步骤 1：下载和安装 ShareMouse 首先，你需要在每台计算机上下载和安装 ShareMouse 软件。你可以在官方网站上找到 ShareMouse 的下载链接。确保选择适合你的操作系统的版本。</p><p>步骤 2：设置主机和客户端 在你的计算机网络中，其中一台计算机将被设置为主机（即使用该计算机的键盘和鼠标来控制其他计算机），其他计算机将作为客户端。</p><p>在主机计算机上运行 ShareMouse 软件，并选择 “This computer is the master” 选项。</p><p>在客户端计算机上运行 ShareMouse 软件，并选择 “This computer is a client” 选项。</p><p>步骤 3：连接主机和客户端 在主机和客户端计算机上运行 ShareMouse 软件后，它们会自动在同一个网络中进行搜索，然后显示在软件的界面中。</p><p>在主机计算机上，你应该能够看到所有客户端计算机的名称。从中选择要共享键盘和鼠标的客户端计算机。 在 Mac 上配置如下</p><center> <img src="/2023/08/18/gong-ju-kong/sharemouse/mac-windows-jian-shu-gong-xiang/image2.png" style="height:300px"> </center><p>在客户端计算机上，你应该能够看到主机计算机的名称。选择主机计算机以连接到主机。在windows上配置如下</p><p>步骤 4：开始键盘和鼠标共享 连接成功后，你将能够使用主机计算机的键盘和鼠标来控制客户端计算机。</p><center> <img src="/2023/08/18/gong-ju-kong/sharemouse/mac-windows-jian-shu-gong-xiang/image.png" style="height:300px"> </center><p>将鼠标移动到客户端计算机的屏幕边缘，鼠标会跨越到主机计算机的屏幕。这样你就可以在主机和客户端之间自由地切换。</p><p>你还可以使用 ShareMouse 软件提供的一些额外功能，如跨屏剪贴板共享和文件拖放。</p><p>步骤 5：停止键盘和鼠标共享 当你完成键盘和鼠标共享后，你可以随时在 ShareMouse 软件界面的 “Disconnect” 或 “Exit” 按钮上点击来停止共享。</p><p>如果连接不成功就重启试试. windows 上运行的时候记得用 管理员打开 ，不然有些系统应用比如 设备管理器 啥的能打开但是无法点击里面的内容</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> ShareMouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5语意标签</title>
      <link href="/2023/08/16/qian-duan/html/html5-yu-yi-biao-qian/"/>
      <url>/2023/08/16/qian-duan/html/html5-yu-yi-biao-qian/</url>
      
        <content type="html"><![CDATA[<p>HTML5引入了一些语义标签，HTML5语义化标签是一种在HTML文档中使用特定标记来描述页面结构和内容的方法。尽管使用这些标签并不会直接影响页面的外观或功能，但它可以提供更清晰和易于理解的代码结构,有助于更好地描述网页的结构和内容，也有助于搜索引擎优化（SEO）。</p><p>以下是一些常见的HTML5语义标签：</p><p><code>&lt;header&gt;</code>: 定义文档或节的页眉（头部）。<br><code>&lt;nav&gt;</code>: 定义导航链接的部分。<br><code>&lt;main&gt;</code>: 定义文档或应用程序的主要内容。<br><code>&lt;article&gt;</code>: 定义独立的、完整的文章或内容块。<br><code>&lt;section&gt;</code>: 定义文档中的节或内容块。<br><code>&lt;aside&gt;</code>: 定义页面的侧边栏内容。<br><code>&lt;footer&gt;</code>: 定义文档或节的页脚（尾部）。</p><p>这些标签不仅帮助浏览器和搜索引擎更好地理解你的网页结构，还可以提供有关网页内容的更多上下文信息。此外，这些标签还可以使屏幕阅读器等辅助技术更容易理解和导航你的网页。</p><p>例如，使用<code>&lt;header&gt;</code>标签将头部内容包装起来，使用<code>&lt;nav&gt;</code>标签将导航链接包装起来，使用<code>&lt;main&gt;</code>标签将主要内容包装起来。这样做不仅可以使你的代码更具语义化，也可以使页面更易于阅读和理解。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 刷新DNS缓存</title>
      <link href="/2023/08/16/gong-ju-kong/mac/mac-shua-xin-dns-huan-cun/"/>
      <url>/2023/08/16/gong-ju-kong/mac/mac-shua-xin-dns-huan-cun/</url>
      
        <content type="html"><![CDATA[<p>设置 DNS 命令</p><pre class="line-numbers language-none"><code class="language-none">networksetup -setdnsservers Wi-Fi xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 DNS</p><pre class="line-numbers language-none"><code class="language-none">networksetup -getdnsservers Wi-Fi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新 DNS 缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dscacheutil <span class="token parameter variable">-flushcache</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个用于刷新 DNS 缓存的命令。在计算机上访问网站时，DNS（域名系统）被用于将网站域名转换为相应的 IP 地址。为了加快访问速度，计算机会将最近访问的 DNS 查询结果缓存在本地。然而，有时 DNS 缓存可能过期或者出现问题，导致无法正确解析域名。这个命令可以强制刷新计算机的 DNS 缓存。通过执行该命令，计算机将清除存储在缓存中的 DNS 查询结果，并尝试重新解析所有域名。这样一来，它会从新的源（如 DNS 服务器）获取最新的 IP 地址，从而解决一些与 DNS 相关的访问问题。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-压缩加密文件</title>
      <link href="/2023/08/16/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-ya-suo-jia-mi-wen-jian/"/>
      <url>/2023/08/16/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-ya-suo-jia-mi-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>压缩文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> <span class="token operator">&lt;</span>压缩文件名<span class="token operator">&gt;</span>.zip <span class="token operator">&lt;</span>要压缩的文件<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>压缩文件夹 用 <code>-r</code> 参数，代表递归文件夹里面的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>压缩文件名<span class="token operator">&gt;</span>.zip <span class="token operator">&lt;</span>要压缩的文件夹<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加密压缩 用 <code>-e</code> 参数，如果要加密压缩文件夹 则连用 <code>-re</code> 就行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> <span class="token parameter variable">-re</span> <span class="token operator">&lt;</span>压缩文件名<span class="token operator">&gt;</span>.zip <span class="token operator">&lt;</span>要压缩的文件夹<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压使用 unzip 到当前目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token operator">&lt;</span>压缩文件名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压使用 unzip 到指定目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> archive.zip <span class="token parameter variable">-d</span> mydir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div width="100%" style="overflow:hidden">    <div style="float:left; width:49%;"><h1>zip 常用的参数以及含义</h1>-r: 递归地压缩目录和其子目录中的文件。 <br>-q: 静默模式，不显示压缩进度。 <br>-m: 压缩后将源文件移动到垃圾桶（删除源文件）。 <br>-j: 仅压缩文件，不包含目录信息。这样可以在解压缩时将所有文件提取到当前目录，而不是具有原始目录的结构。 <br>-9: 最高压缩级别。这会导致更小的压缩文件，但会花费更长的时间。 <br>-o: 将压缩文件写入指定的输出文件而不是默认的zip文件。 <br>-d: 从压缩文件中删除指定的文件。 <br>-u: 只压缩新添加或修改的文件。 <br>-x: 排除指定的文件或目录，不进行压缩。 <br>    </div>    <div style="float:right; width:50%;"><h1>unzip 常用的参数以及含义</h1>-l or --list：用于列出压缩文件中的内容列表。这个选项不会解压缩文件，只是显示文件列表和其他相关信息。<br>-d &lt;目标目录&gt; or --directory &lt;目标目录&gt;：指定解压缩后的文件将要被放置的目标目录。可以使用绝对路径或相对路径。<br>-o or --overwrite：如果目标目录下已存在同名文件，则覆盖已存在的文件。<br>-x or --exclude &lt;文件 目录&gt;：用于排除指定的文件或目录，不进行解压缩。可以使用通配符来匹配多个文件或目录。<br>-j or --junk-paths：在解压缩时丢弃目录路径，将所有文件提取到当前目录下。这意味着解压缩后的文件将不包含原始的目录结构。<br>-q or --quiet：静默模式，不显示解压缩过程中的任何信息。<br>-f or --freshen：只解压缩那些压缩包中包含的新文件，或者其内容已更新的文件。<br>-v or --verbose：详细模式，显示解压缩过程中的详细信息。<br>   <!--文件--><!--目标目录--><!--目标目录--></div></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Vite项目中配置ip:port访问</title>
      <link href="/2023/08/16/qian-duan/vue/ru-he-zai-vite-xiang-mu-zhong-pei-zhi-ip-port-deng-lu/"/>
      <url>/2023/08/16/qian-duan/vue/ru-he-zai-vite-xiang-mu-zhong-pei-zhi-ip-port-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>要在Vite项目中配置IP:PORT访问，你可以按照以下步骤进行操作：</p><ol><li>打开你的Vite项目，并确保你的项目已经正确安装和运行。</li><li>寻找项目中的配置文件，通常是一个名为vite.config.js的文件，位于项目的根目录下。如果你找不到这个文件，你可以创建一个新的。</li><li>在vite.config.js文件中，你需要找到一个名为server的选项，该选项用于配置服务器相关的设置。</li><li>在server选项中，你可以添加一个名为host的配置项，用来指定你的服务器的IP。例如，如果你想使用127.0.0.1作为IP，你可以将host配置为’127.0.0.1’。</li><li>接下来，你需要添加一个名为port的配置项，用来指定服务器的端口号。例如，如果你想使用3000作为端口号，你可以将port配置为3000。</li><li>最后，保存并关闭vite.config.js文件。</li><li>重新启动你的Vite项目，确保你的更改已经生效。</li></ol><p>如果要同时支持 localhost:port 形式登录</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">server<span class="token operator">:</span> <span class="token punctuation">{</span>  port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 修改为所需的端口号</span>  host<span class="token operator">:</span> '<span class="token number">0.0</span>.<span class="token number">0.0</span>'<span class="token punctuation">,</span> <span class="token comment">// 允许所有 IP 访问</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 vite.config.js 文件中，host: ‘0.0.0.0’ 用于配置服务器的主机地址。这个特殊的主机地址代表所有可用的网络接口，也就是允许任何 IP 地址访问你的应用程序。</p><p>通常情况下，当你使用 host: ‘0.0.0.0’，你的应用程序将监听计算机上所有可用的网络接口，无论是通过本地网络还是公共网络。这样做的好处是，你的应用程序可以在任何设备上访问，而不仅仅是在本地计算机上。</p><p>换句话说，使用 host: ‘0.0.0.0’ 可以使你的应用程序在本地网络和公共网络上都可见，这在某些情况下非常有用，例如当你想在局域网内的其他设备上测试应用程序时。当然，为了安全起见，在生产环境中，你可能需要更严格地限制哪些 IP 地址能够访问你的应用程序。应谨慎使用此设置，以防止安全问题。可以将host设置为’localhost’来限制只有本地访问服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gpt-3.5-turbo-16k-0613 跟 gpt-3.5-turbo-0613 有什么区别</title>
      <link href="/2023/08/10/gong-ju-kong/ai/gpt-3-5-turbo-16k-0613-gen-gpt-3-5-turbo-0613-you-shi-me-qu-bie/"/>
      <url>/2023/08/10/gong-ju-kong/ai/gpt-3-5-turbo-16k-0613-gen-gpt-3-5-turbo-0613-you-shi-me-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>“gpt-3.5-turbo-16k-0613” 和 “gpt-3.5-turbo-0613” 是 OpenAI 的两个不同的语言模型版本。</p><p>区别在于模型的大小。 “gpt-3.5-turbo-16k-0613” 使用了更大的模型，具有大约16,000个标记，而 “gpt-3.5-turbo-0613” 使用了较小的模型，具有大约3550个标记。这意味着 “gpt-3.5-turbo-16k-0613” 拥有更多的参数和更高的容量，可以生成更长、更具上下文的回答。</p><p>因此，如果您需要处理更复杂的任务或需要更详细的回答，您可能会选择使用"gpt-3.5-turbo-16k-0613"。但请注意，使用更大的模型可能需要更多的时间和计算资源。如果您只需要对简单问题进行回答，那么"gpt-3.5-turbo-0613" 可能已经足够满足您的需求了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具控 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-网络小工具</title>
      <link href="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/"/>
      <url>/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>今天公司在部署服务器的时候，一直在倒腾 DNS 服务器。公司自己部署 DNS 服务器而不是 使用外网的 DNS 服务器，是因为我们没有暴露公网的打算，而且我们的服务是金融服务，就更不能轻易暴露到外网了。所以通过自己的DNS服务器把域名给隐藏掉。但是不暴露也意味着外网访问受限，不过后面会用VPN的方式接入。这里用到了 nslookup 小工具，以前自己没有用过，特此学习一下，继而引出了其他几个工具的使用，在这里也一并记录一下原理和常用的手段</p><h1 id="ping-查看网络通不通"><a class="markdownIt-Anchor" href="#ping-查看网络通不通"></a> ping 查看网络通不通</h1><p>ping 用的最多的就是看网络通不通。例如我们可以通过 ping <a href="http://www.baidu.com">www.baidu.com</a> 然后根据终端输出的结果来判断网络是不是通的。</p><center>  <img src="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/iShot_2023-08-09_01.23.04.jpg"></center><p>Ping是一种网络工具，用于测试主机之间的网络连接。它发送一个小的网络数据包（ICMP Echo Request）到目标主机，并等待接收到相应的回复（ICMP Echo Reply）。通过测量往返时间（Round-Trip Time，RTT）和丢包率，可以评估网络的可达性和性能。<br>以下是一张简单的图示，展示了Ping请求和响应的过程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+-----------------+                   +-----------------+<span class="token operator">|</span>   Your Computer <span class="token operator">|</span>                   <span class="token operator">|</span> Target Computer <span class="token operator">|</span>+-----------------+                   +-----------------+         <span class="token operator">|</span>                                    <span class="token operator">|</span>  ICMP Echo请求                           ICMP Echo响应         <span class="token operator">|</span>                                    <span class="token operator">|</span>         +------------<span class="token operator">&gt;</span> Network --------------<span class="token operator">&gt;</span>+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要注意一点，ping 访问目标服务器的时候，是不用指定端口的，也没有默认端口一说。因为ping命令是一种工具，用于测试和检查网络连接。它使用的是ICMP协议（互联网控制报文协议），而不是传输层协议（如TCP或UDP）。ICMP（Internet Control Message Protocol）是一个用于在IP网络中传输控制消息的协议。ICMP消息不使用端口号的原因是因为它们不是用于在不同主机之间直接进行通信，而是用于发送网络控制信息、错误报告和诊断信息。端口号通常用于标识目标主机上的特定应用程序或服务。但是，ICMP消息不是直接发送给特定的应用程序或服务，而是发送给目标主机的网络协议栈（通常是操作系统内核），然后由它们处理。</p><h1 id="a-telnet-nc-查看开放端口号"><a class="markdownIt-Anchor" href="#a-telnet-nc-查看开放端口号"></a>  telnet、nc 查看开放端口号</h1><p><a href="https://chen-shang.github.io/2023/09/01/ru-he-cha-kan-duan-kou-shi-fou-kai-fang/">telnet、nc 查看开放端口号</a></p><h1 id="dig-a-namesection1"><a class="markdownIt-Anchor" href="#dig-a-namesection1"></a> dig <a name="section1"></a></h1><p>dig命令是一种常用的网络工具，用于查询DNS（Domain Name System）服务器，获取域名的IP地址、主机名、MX（Mail Exchange）记录等信息。我们最常用的就是看</p><center>  <img src="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/image.png"></center><p>我们可以看到，百度的两台服务器分别分别是 110.242.68.3 和 110.242.68.4。我们通过网站 <a href="http://ip.bczs.net/110.242.68.3">http://ip.bczs.net/110.242.68.3</a> 查看</p><center>  <img src="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/iShot_2023-08-09_01.35.59.jpg" style="width:50%"></center><hr><p>再通过自己公司的配置来理解这个工具的使用<br><img src="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/iShot_2023-09-02_00.30.00.jpg" alt="链接vpn走了公司自己设置的DNS服务器"></p><p><img src="/2023/08/09/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-wang-luo-xiao-gong-ju/iShot_2023-09-02_00.36.17.jpg" alt="如果断开VPN后的情形"></p><h1 id="dns-是什么"><a class="markdownIt-Anchor" href="#dns-是什么"></a> DNS 是什么</h1><p>DNS 的记录类型<br>1.主机[A]记录<br>描述: 主机地址记录。在 DNS 域名与 IP 地址之间建立映射关系语法: <code>owner class ttl A IP_v4_address</code></p><blockquote><p>例子: <code>host1.example.microsoft.com. IN A 127.0.0.1</code></p></blockquote><p>2.别名[CNAME]<br>描述: 用来表示用在该区域中的其它资源记录类型中已指定名称的替补或别名 DNS 域名。语法: <code>owner ttl class AFSDB subtype server_host_name</code></p><blockquote><p>例子: <code>aliasname.example.microsoft.com. AFSDB 1 truename.example.microsoft.com.</code></p></blockquote><p>3.主机信息[HINFO]<br>描述: 用来说明映射到特定 DNS 主机名的 CPU 类型和操作系统类型的 RFC-1700 保留字符串类型，这个信息可以被应用程序通信协议使用。语法: owner ttl class HINFO cpu_type os_type</p><blockquote><p>例子: <code>my-computer-name.example.microsoft.com. HINFO INTEL-386 WIN32</code></p></blockquote><p>4.邮箱[MB]<br>描述: 用来将指定的域邮箱名映射到这个邮箱的主机的当前区域中的主机地址记录语法: <code>owner ttl class MB mailbox_hostname</code></p><blockquote><p>例子: <code>mailbox.example.microsoft.com. MB mailhost1.example.microsoft.com</code></p></blockquote><p>5.邮箱或通信信息 MINFO<br>描述: 用来指定负责维护该记录中特定通信名单或邮箱的联系域邮箱名称。同时，还被用来指定接收与该记录中特定通信名单或邮箱有关的错误信息的邮箱语法: owner ttl class MINFO responsible_mailbox error_mailbox</p><blockquote><p>例子: <code>administrator.example.microsoft.com. MINFO resp-mbox.example.microsoft.com err-mbox.example.microsoft.com</code></p></blockquote><p>6.邮件交换器 [MX]<br>描述: 用来向特定邮件交换器提供消息路由，该主机作为指定 DNS 域名的邮件交换器。MX 记录需要一个16-位整数来表示消息路由中的主机优先级，多个邮件交换在消息一中被指定。对于这个记录类型中的每个邮件交换主机，需要一个相应的主机地址类型记录。语法: <code>owner ttl class MX preference mail_exchanger_host</code></p><blockquote><p>例子: <code>example.microsoft.com. MX 10 mailserver1.example.microsoft.com</code></p></blockquote><p>7.指针记录 [PTR]<br>描述: 用来指向域名空间中的某个位置。PTR记录通常在特殊域中来执行地址到名称镜像的反向搜索。每个记录提供要指向域名称空间的某个其它位置的简单数据。 Syntax: owner ttl class PTR targeted_domain_name</p><blockquote><p>例子: <code>1.0.0.10.in-addr.arpa. PTR host.example.microsoft.com.</code></p></blockquote><p>8.服务记录 [SRV]<br>描述: SRV 资源记录允许管理员使用单一 DNS 域的多个服务器，容易的用管理功能将 TCP/IP 服务从一个主机移到另一个主机，并且将服务提供的程序主机分派为服务的主服务器，将其它的分派为辅助的语法: <code>service.protocol.name ttl class SRV preference weight port target</code></p><blockquote><p>例子: <code>ldap.tcp.ms-dcs SRV 0 0 389 dc1.example.microsoft.com SRV 10 0 389 dc2.example.microsoft.com</code></p></blockquote><p>9.已知服务记录 [WKS]<br>描述: 用来描述一个特定 IP 地址上特定通讯协议支持的 TCP/IP 服务，它提供 TCP 和 UDP 可使用性信息。如果服务器同时支持 TCP 和 UDP 的已知服务，或者有多个支持服务的 IP 地址，多个 WKS 记录会被使用语法: owner ttl class WKS address protocol service_list</p><blockquote><p>例子: <code>example.microsoft.com. WKS 10.0.0.1 TCP ( telnet smtp ftp )</code><br>在"起始颁发机构" SOA 中，记录了这个 Zone 中 DNS 服务器是那一台主机，也记录着负责本 zone 的管理员的邮件地址，如果以后在安装邮件服务器需要修改该信息时，注意将邮件地址中的 “@” 符改为句点 “.” ，因为 “@” 是保留字，代表 zone；另外，要使用域完整名称 FQDN，不要漏掉最后的句点。可以通过 "zone→属性→起始颁发机构"对管理员邮件地址进行修改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-curl</title>
      <link href="/2023/08/07/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-curl/"/>
      <url>/2023/08/07/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-curl/</url>
      
        <content type="html"><![CDATA[<h3 id="curl-编码问题"><a class="markdownIt-Anchor" href="#curl-编码问题"></a> curl 编码问题</h3><p>最近在写一款终端的词典翻译工具，原来的有道api不能用了，转而使用百度翻译的api ,先凑合用吧，谁让它现在免费呢。但是在使用curl 发起请求的时候，针对带有空格的单词查询总是报错.<br>最开始的错误写法如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">dic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token variable">$*</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">salt</span><span class="token operator">=</span><span class="token number">123</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sign</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>sign <span class="token string">"<span class="token variable">${q}</span>"</span> <span class="token string">"<span class="token variable">${salt}</span>"</span><span class="token variable">)</span></span>  <span class="token function">curl</span>  <span class="token string">"https://api.fanyi.baidu.com/api/trans/vip/translate?&amp;from=auto&amp;to=auto&amp;q=<span class="token variable">${q}</span>&amp;appid=<span class="token variable">${_baidu_fanyi_app_id}</span>&amp;salt=<span class="token variable">${salt}</span>&amp;sign=<span class="token variable">${sign}</span>"</span> <span class="token operator">|</span> jq .trans_result<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样 <code>dic "hello"</code> 和 <code>dic "world"</code> 的时候都没有问题。但是在 <code>dic 'hello world'</code> 的时候就报错了。就是因为<code>q=hello world</code> 的时候，中间的空格问题，这时候要考虑使用 <code>curl</code> 传参对 url 编码的问题。<br>正确的用法如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">dic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token variable">$*</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">salt</span><span class="token operator">=</span><span class="token number">123</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sign</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>sign <span class="token string">"<span class="token variable">${q}</span>"</span> <span class="token string">"<span class="token variable">${salt}</span>"</span><span class="token variable">)</span></span>  <span class="token function">curl</span> <span class="token parameter variable">-sG</span> --data-urlencode <span class="token string">"q=<span class="token variable">${q}</span>"</span> <span class="token punctuation">\</span>          --data-urlencode <span class="token string">"appid=<span class="token variable">${_baidu_fanyi_app_id}</span>"</span> <span class="token punctuation">\</span>          --data-urlencode <span class="token string">"salt=<span class="token variable">${salt}</span>"</span> <span class="token punctuation">\</span>          --data-urlencode <span class="token string">"sign=<span class="token variable">${sign}</span>"</span> <span class="token punctuation">\</span>          <span class="token string">"https://api.fanyi.baidu.com/api/trans/vip/translate?&amp;from=auto&amp;to=auto"</span> <span class="token operator">|</span> jq .trans_result<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–data-urlencode: 将数据作为 URL 编码的字符串传递给服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sG</span> --data-urlencode <span class="token string">"name=John Doe"</span> --data-urlencode <span class="token string">"age=30"</span> https://example.com/api<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，–data-urlencode 参数将 name 和 age 作为键值对传递给服务器，并将它们 URL 编码为 name=John%20Doe 和 age=30。服务器可以使用这些值来处理请求并返回响应。</p><h3 id="打印出返回的-http-请求头部和正文"><a class="markdownIt-Anchor" href="#打印出返回的-http-请求头部和正文"></a> 打印出返回的 HTTP 请求头部和正文</h3><p>curl 命令的 -i 选项</p><h3 id="打印出返回的-http-响应头部和正文"><a class="markdownIt-Anchor" href="#打印出返回的-http-响应头部和正文"></a> 打印出返回的 HTTP 响应头部和正文</h3><p>curl 命令的 -v 选项</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-md5</title>
      <link href="/2023/08/07/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-md5/"/>
      <url>/2023/08/07/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-md5/</url>
      
        <content type="html"><![CDATA[<p><code>echo -n "字符串"|md5</code> 千万别忘记了 <code>-n</code> 参数。在Linux中， <code>echo</code> 命令用于在终端输出文本。 <code>-n</code> 选项用于禁止 echo 在输出末尾添加换行符。 因此，当您使用 <code>echo -n</code> 时，它将在终端上输出指定的文本，但不会在末尾添加换行符。这对于在输出中不希望有额外的换行符时很有用。<br>例如，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Hello, World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它将在终端上输出 Hello, World! ，但不会在末尾添加换行符。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 中 src vs href</title>
      <link href="/2023/08/03/qian-duan/html/html-zhong-src-vs-href/"/>
      <url>/2023/08/03/qian-duan/html/html-zhong-src-vs-href/</url>
      
        <content type="html"><![CDATA[<p>在html页面中，同样是引入外部文件，为什么引入<code>javascript</code>就用<code>src</code>, 为什么引入 <code>css</code> 就用 <code>href</code> 呢? 为什么就没人统一一下呢?</p><p><code>src</code>  属性通常用于指定要加载的资源的路径，如脚本文件、图像文件等。而  <code>href</code>  属性通常用于指定链接的目标资源的 URL，如超链接的目标页面、外部样式表等。 如  <code>&lt;script&gt;</code>  和  <code>&lt;img&gt;</code>  标签中使用的是  <code>src</code>  属性，而  <code>&lt;link&gt;</code>  和  <code>&lt;a&gt;</code>  标签中使用的是  <code>href</code>  属性，但这只是由于历史原因和标签的设计规范。</p><p>在 HTML 中，有多个标签可以使用  <code>href</code>  属性来指定链接的目标资源的 URL。以下是一些常见的具有  <code>href</code>  属性的标签：</p><ul><li><code>&lt;a&gt;</code>  标签：用于创建超链接，指定链接的目标页面或资源的 URL。</li><li><code>&lt;link&gt;</code> 标签：用于引入外部资源，如样式表、图标等， href  属性指定资源的路径。</li><li><code>&lt;area&gt;</code>  标签：用于定义图像映射区域， href  属性指定与区域关联的链接。</li><li><code>&lt;base&gt;</code>  标签：用于指定页面中所有相对链接的基本 URL， href  属性指定基本 URL。</li></ul><p>在 HTML 中，有多个标签可以使用  <code>src</code>  属性来指定要加载的外部资源的 URL。以下是一些常见的具有  <code>src</code>  属性的标签：</p><ul><li><code>&lt;script&gt;</code>  标签：用于引入外部 JavaScript 文件， src  属性指定 JavaScript 文件的路径。</li><li><code>&lt;img&gt;</code>  标签：用于嵌入图像， <code>src</code>  属性指定图像文件的路径。</li><li><code>&lt;iframe&gt;</code>  标签：用于嵌入另一个 HTML 文档， <code>src</code>  属性指定嵌入文档的路径。</li><li><code>&lt;audio&gt;</code>  标签：用于嵌入音频文件，<code>src</code>  属性指定音频文件的路径。</li><li><code>&lt;video&gt;</code>  标签：用于嵌入视频文件， <code>src</code>  属性指定视频文件的路径。</li><li><code>&lt;source&gt;</code>  标签：用于为  <code>&lt;audio&gt;</code>  和  <code>&lt;video&gt;</code>  标签指定多个媒体源，每个源都使用  <code>src</code> 属性指定路径。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 多数据源配置</title>
      <link href="/2023/07/26/shu-ju-ku/springboot-duo-shu-ju-yuan-pei-zhi/"/>
      <url>/2023/07/26/shu-ju-ku/springboot-duo-shu-ju-yuan-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>首先 mybatis generator 是支持多数据源生成 dao 层的代码的(也就是那些 mapper.xml文件、实体类文件等等)，我们需要针对我们不同数据源里面的表，分别进行配置，才能生成对应库表的 dao 层代码。要知道 mybatis generator 的配置文件里面是可以配置多个context的，一个context就是一个数据源。<br><img src="/2023/07/26/shu-ju-ku/springboot-duo-shu-ju-yuan-pei-zhi/iShot_2023-07-30_00.13.07.jpg"><br>我们先知道怎么配置单一数据源，下面是最简单的方式了，我们单一数据源的时候可以直接按照下面的写法在 配置 文件里面配置</p><pre class="line-numbers language-none"><code class="language-none">#spring mysqlspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;allowMultiQueries=truespring.datasource.username=rootspring.datasource.password=#mybatismybatis.type-aliases-package=com.server.entitymybatis.mapper-locations=classpath:/mapper/**.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面基本就够了。</p><p>知道了单一数据源怎么配置,接下来就是开始配置多数据源了。一般我们不推荐在一个项目中访问多个数据源，因为一般一个项目独占一个数据库，除非有一个数据源是只读的可能我们为了取数据方便回允许使用多数据源。</p><pre class="line-numbers language-none"><code class="language-none">spring.datasource.demo.driver-class-name=com.mysql.jdbc.Driverspring.datasource.demo.jdbcUrl=jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;allowMultiQueries=truespring.datasource.demo.password=rootspring.datasource.demo.username=spring.datasource.study.driver-class-name=com.mysql.jdbc.Driverspring.datasource.study.jdbcUrl=jdbc:mysql://localhost:3306/study?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;allowMultiQueries=truespring.datasource.study.password=rootspring.datasource.study.username=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面虽然看上去是一样的，注意一个是demo表一个是study表。我们需要取名称。另外注意相对于单一数据库. jdbcUrl 那一行的配置不一样了。如果按照但数据库的配置名字去配置，大概率会报下面的错误</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Caused by:</span> <span class="token exception javastacktrace language-javastacktrace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token punctuation">:</span> Error creating bean with name 'h2Console' defined in class path resource [org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration<span class="token punctuation">.</span>class]<span class="token punctuation">:</span> Bean instantiation via factory method failed; nested exception is org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanInstantiationException<span class="token punctuation">:</span> Failed to instantiate [org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean]<span class="token punctuation">:</span> Factory method 'h2Console' threw exception; nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">:</span> jdbcUrl is required with driverClassName<span class="token punctuation">.</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ConstructorResolver<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>ConstructorResolver<span class="token punctuation">.</span>java<span class="token punctuation">:</span>656<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ConstructorResolver<span class="token punctuation">.</span><span class="token function">instantiateUsingFactoryMethod</span><span class="token punctuation">(</span>ConstructorResolver<span class="token punctuation">.</span>java<span class="token punctuation">:</span>636<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">instantiateUsingFactoryMethod</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1338<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">createBeanInstance</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1177<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">doCreateBean</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>557<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">createBean</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>517<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">lambda$doGetBean$0</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>323<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>DefaultSingletonBeanRegistry<span class="token punctuation">.</span>java<span class="token punctuation">:</span>222<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>321<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>207<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializerBeans<span class="token punctuation">.</span><span class="token function">getOrderedBeansOfType</span><span class="token punctuation">(</span>ServletContextInitializerBeans<span class="token punctuation">.</span>java<span class="token punctuation">:</span>211<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializerBeans<span class="token punctuation">.</span><span class="token function">getOrderedBeansOfType</span><span class="token punctuation">(</span>ServletContextInitializerBeans<span class="token punctuation">.</span>java<span class="token punctuation">:</span>202<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializerBeans<span class="token punctuation">.</span><span class="token function">addServletContextInitializerBeans</span><span class="token punctuation">(</span>ServletContextInitializerBeans<span class="token punctuation">.</span>java<span class="token punctuation">:</span>96<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializerBeans<span class="token punctuation">.</span>&lt;init&gt;<span class="token punctuation">(</span>ServletContextInitializerBeans<span class="token punctuation">.</span>java<span class="token punctuation">:</span>85<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ServletWebServerApplicationContext<span class="token punctuation">.</span><span class="token function">getServletContextInitializerBeans</span><span class="token punctuation">(</span>ServletWebServerApplicationContext<span class="token punctuation">.</span>java<span class="token punctuation">:</span>253<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ServletWebServerApplicationContext<span class="token punctuation">.</span><span class="token function">selfInitialize</span><span class="token punctuation">(</span>ServletWebServerApplicationContext<span class="token punctuation">.</span>java<span class="token punctuation">:</span>227<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatStarter<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>TomcatStarter<span class="token punctuation">.</span>java<span class="token punctuation">:</span>53<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContext<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardContext<span class="token punctuation">.</span>java<span class="token punctuation">:</span>5135<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase$StartChild<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1384<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase$StartChild<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1374<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FutureTask<span class="token punctuation">.</span>java<span class="token punctuation">:</span>266<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>InlineExecutorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>InlineExecutorService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>75<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>AbstractExecutorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>AbstractExecutorService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>134<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>909<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardHost<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardHost<span class="token punctuation">.</span>java<span class="token punctuation">:</span>841<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase$StartChild<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1384<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase$StartChild<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1374<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FutureTask<span class="token punctuation">.</span>java<span class="token punctuation">:</span>266<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>InlineExecutorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>InlineExecutorService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>75<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>AbstractExecutorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>AbstractExecutorService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>134<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>909<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardEngine<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardEngine<span class="token punctuation">.</span>java<span class="token punctuation">:</span>262<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardService<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>421<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardServer<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardServer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>930<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>Tomcat<span class="token punctuation">.</span>java<span class="token punctuation">:</span>459<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatWebServer<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>TomcatWebServer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>107<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 18 common frames omittedCaused by<span class="token punctuation">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanInstantiationException<span class="token punctuation">:</span> Failed to instantiate [org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean]<span class="token punctuation">:</span> Factory method 'h2Console' threw exception; nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">:</span> jdbcUrl is required with driverClassName<span class="token punctuation">.</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>SimpleInstantiationStrategy<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>SimpleInstantiationStrategy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>185<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ConstructorResolver<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>ConstructorResolver<span class="token punctuation">.</span>java<span class="token punctuation">:</span>651<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 58 common frames omittedCaused by<span class="token punctuation">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">:</span> jdbcUrl is required with driverClassName<span class="token punctuation">.</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariConfig<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>HikariConfig<span class="token punctuation">.</span>java<span class="token punctuation">:</span>954<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">.</span>java<span class="token punctuation">:</span>109<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>H2ConsoleAutoConfiguration<span class="token punctuation">.</span><span class="token function">lambda$h2Console$0</span><span class="token punctuation">(</span>H2ConsoleAutoConfiguration<span class="token punctuation">.</span>java<span class="token punctuation">:</span>73<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>ObjectProvider<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>ObjectProvider<span class="token punctuation">.</span>java<span class="token punctuation">:</span>93<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>H2ConsoleAutoConfiguration<span class="token punctuation">.</span><span class="token function">h2Console</span><span class="token punctuation">(</span>H2ConsoleAutoConfiguration<span class="token punctuation">.</span>java<span class="token punctuation">:</span>72<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>62<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>43<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span>498<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>SimpleInstantiationStrategy<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>SimpleInstantiationStrategy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>154<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 59 common frames omitted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面那个报错，只需要填写 <code>jdbcUrl</code> 就行了，别写错了。</p><p>接下来我们还需要在代码里面指定用哪个mapper的时候该访问哪个数据源。比如 demoMapper 就读写 demo 库 里面的 某个 表。如果用 studyMapper 的时候就用 访问  study 库里面的某个表。</p><p>自动生成dao层代码以及配置类目录结构大致如下</p><pre class="line-numbers language-none"><code class="language-none">├── config│&nbsp;&nbsp; ├── datasource│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Datasource1Config.java│&nbsp;&nbsp; │&nbsp;&nbsp; └── Datasource2Config.java├── controller│&nbsp;&nbsp; ├── DemoController.java│&nbsp;&nbsp; └── LoginController.java├── dal│&nbsp;&nbsp; ├── mapper│&nbsp;&nbsp; │&nbsp;&nbsp; ├── demo│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── AccountMapper.java│&nbsp;&nbsp; │&nbsp;&nbsp; └── study│&nbsp;&nbsp; │&nbsp;&nbsp;     └── ChangeLogMapper.java│&nbsp;&nbsp; └── model│&nbsp;&nbsp;     ├── demo│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── Account.java│&nbsp;&nbsp;     │&nbsp;&nbsp; └── AccountExample.java│&nbsp;&nbsp;     └── study│&nbsp;&nbsp;         ├── ChangeLog.java│&nbsp;&nbsp;         └── ChangeLogExample.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 Datasource1Config 大致长下面这个样子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.server.dal.mapper.demo"</span><span class="token punctuation">,</span> sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"datasource1SqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Datasource1Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"datasource1DataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">datasource1DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">datasource1SqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"datasource1DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/demo/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Datasource2Config 其实也类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.server.dal.mapper.study"</span><span class="token punctuation">,</span> sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"datasource2SqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Datasource2Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"datasource2DataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.study"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">datasource2DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">datasource2SqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"datasource2DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/study/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是一个注解 <code>@Primary</code>. 如果没有这个注解，就会包下面这个错误</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Description:</span>Method h2Console in org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>H2ConsoleAutoConfiguration required a single bean<span class="token punctuation">,</span> but <span class="token number">2</span> were found<span class="token operator">:</span><span class="token operator">-</span> datasource1DataSource<span class="token operator">:</span> defined by method <span class="token string">'datasource1DataSource'</span> in class path resource <span class="token punctuation">[</span>com<span class="token operator">/</span>server<span class="token operator">/</span>config<span class="token operator">/</span>datasource<span class="token operator">/</span>Datasource1Config<span class="token punctuation">.</span>class<span class="token punctuation">]</span><span class="token operator">-</span> datasource2DataSource<span class="token operator">:</span> defined by method <span class="token string">'datasource2DataSource'</span> in class path resource <span class="token punctuation">[</span>com<span class="token operator">/</span>server<span class="token operator">/</span>config<span class="token operator">/</span>datasource<span class="token operator">/</span>Datasource2Config<span class="token punctuation">.</span>class<span class="token punctuation">]</span><span class="token property">Action:</span>Consider marking one of the beans as <span class="token operator">@</span>Primary<span class="token punctuation">,</span> updating the consumer to accept multiple beans<span class="token punctuation">,</span> or using <span class="token operator">@</span>Qualifier to identify the bean that should be consumed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还要注意，加上下面这一句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/study/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为如果不加，可能会报下面这个错误</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token exception javastacktrace language-javastacktrace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>BindingException<span class="token punctuation">:</span> Invalid bound statement <span class="token punctuation">(</span>not found<span class="token punctuation">)</span><span class="token punctuation">:</span> com<span class="token punctuation">.</span>server<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>AccountMapper<span class="token punctuation">.</span>insertSelective<span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>MapperMethod$SqlCommand<span class="token punctuation">.</span>&lt;init&gt;<span class="token punctuation">(</span>MapperMethod<span class="token punctuation">.</span>java<span class="token punctuation">:</span>235<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>MapperMethod<span class="token punctuation">.</span>&lt;init&gt;<span class="token punctuation">(</span>MapperMethod<span class="token punctuation">.</span>java<span class="token punctuation">:</span>53<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>MapperProxy<span class="token punctuation">.</span><span class="token function">lambda$cachedInvoker$0</span><span class="token punctuation">(</span>MapperProxy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>108<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>ConcurrentHashMap<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1660<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MapUtil<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span>java<span class="token punctuation">:</span>35<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>MapperProxy<span class="token punctuation">.</span><span class="token function">cachedInvoker</span><span class="token punctuation">(</span>MapperProxy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>95<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>MapperProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>MapperProxy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>86<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$Proxy113<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>62<span class="token punctuation">)</span><span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>43<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span>498<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span>java<span class="token punctuation">:</span>344<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span>198<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span>163<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>139<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span>186<span class="token punctuation">)</span><span class="token keyword">at</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>JdkDynamicAopProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JdkDynamicAopProxy<span class="token punctuation">.</span>java<span class="token punctuation">:</span>212<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$Proxy114<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是 mapper 不知道该绑定到哪个 xml 文件了.</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-图片显示</title>
      <link href="/2023/07/21/gong-ju-kong/hexo/hexo-tu-pian-xian-shi/"/>
      <url>/2023/07/21/gong-ju-kong/hexo/hexo-tu-pian-xian-shi/</url>
      
        <content type="html"><![CDATA[<p>!!! note 按照下面的指令安装可行,其他网上搜索的解决方案都不太靠谱。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-asset-image<span class="token function">npm</span> <span class="token function">install</span> https://github.com/7ym0n/hexo-asset-image <span class="token parameter variable">--save</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后像这样 , 就可以引入图片了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hexo-theme-matery主题优化/Jietu20191116-144050.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以用 center 标签让图片居中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vscode推荐插件/1.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-字符画</title>
      <link href="/2023/07/20/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-zi-fu-hua/"/>
      <url>/2023/07/20/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-zi-fu-hua/</url>
      
        <content type="html"><![CDATA[<p>生成字符画,我最常用的两个命令就是 <code>figlet</code> 和 <code>toilet</code>。具体使用可以通过ChatGPT进行学习。<br>下面是最最最基本的用法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> figlet Demo ____<span class="token operator">|</span>  _ <span class="token punctuation">\</span>  ___ _ __ ___   ___<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>/ _ <span class="token punctuation">\</span> '_ ` _ <span class="token punctuation">\</span> / _ <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>  __/ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>____/ <span class="token punctuation">\</span>___<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span><span class="token punctuation">\</span>___/<span class="token operator">&gt;</span> toilet Demo mmmm <span class="token comment">#   "m  mmm   mmmmm   mmm</span> <span class="token comment">#    # #"  #  # # #  #" "#</span> <span class="token comment">#    # #""""  # # #  #   #</span> <span class="token comment">#mmm"  "#mm"  # # #  "#m#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有针对图片生成字符画的工具,我常用的也是俩 <code>jp2a</code> 和 <code>img2txt</code></p><center>  <img src="/2023/07/20/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-zi-fu-hua/logo.png"></center>转换后<pre class="line-numbers language-none"><code class="language-none">&gt; jp2a --width=40 logo.png    .                            .   l0kc                        :OdK   d0  ko                    lK  lN   d0    :x.               od    lN   d0 .x.  ;k;;:clooll:;;do  .dc lN   d0 .WWO                  dNWc lN   d0                            lN   d0         c.       c.        lN   d0                            lN   .Wc::::::.             :::::::Xc     oN;    X;           0'   .X0       od.   Oo        .N    lk         ,x'  :O      lO  .oc           '0; .Xkkkk0o .kc              0c.NWWW.lO.                XNWWWX.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt; img2txt -H 20 -W 35 logo.png   tXX                     %Xt   t  X%                 .@  t   t    X.              S    t   t  8  XS% @;.:.:@ @X.  X  t   t  ttS                tt  t   t  :                   t  t   t                         t   t        t       :        t   t%                        t    %X    S           S;   Xt     :X    S         S    8%       XX   S       t   :8         XS  S    S%  ;X           Xt @ttt%  S            t%:%ttSX              :ttt@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有终端显示图片的工具 imgcat<br>安装 <code>wget https://iterm2.com/utilities/imgcat |bash</code><br>然后 把 imgcat 移动到 目录 <code>/usr/local/bin</code> 这样就可以全局访问了。</p><center>  <img src="/2023/07/20/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-zi-fu-hua/image.png"></center>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java针对会抛出异常的方法的单元测试</title>
      <link href="/2023/07/19/java/java-dan-yuan-ce-shi/java-zhen-dui-hui-pao-chu-yi-chang-de-fang-fa-de-dan-yuan-ce-shi/"/>
      <url>/2023/07/19/java/java-dan-yuan-ce-shi/java-zhen-dui-hui-pao-chu-yi-chang-de-fang-fa-de-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>我们写了一个方法,这个方法可能会抛出异常。针对这类方法,我们该怎么写单元测试呢？我们先思考一个问题，我们的测试用例是啥样的？</p><ol><li>用例一: 当满足某条件的时候应该抛出异常,如果没有异常,那么大概率是我们的目标测试方法内部的实现有问题。</li><li>用例二: 当满足某条件的时候应该正常执行拿到结果,不应该抛出异常,如果抛出了异常,那么大概率是我们的目标测试方法内部没有 <code>try catch</code> 住异常<br>所以，我们得从正反两方面来考虑写单元测试。一面是应该抛异常，一面是不应该抛异常。</li></ol><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的单元测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetCodeTest</span> <span class="token punctuation">{</span>    <span class="token comment">//我们要测试一个会抛出异常的。如果没有抛出异常这个单元测试是通过不了的</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDivideByZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">TargetCode</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//还要测试一个正常场景下不会抛出异常的。如果抛出异常，这个单元测试是通过不了</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDivide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">TargetCode</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们该try catch么？有人说我直接<code>try catch</code>不行么。不行，try catch 住了之后，只能校验抛出了异常的情况，但是针对可能因为代码出错而导致没有抛异常这样的场景无法测试到。如果只是想测试这个方法在特定场景下会抛出异常，直接用 <code>@Test(expected=XXXExcepting.class)</code>就好了。但是有的时候我们需要测试抛出的异常的报文是什么，这时候有两种手段，第一种是使用 <code>@Rule</code> 第二种是使用 <code>Assert.assertThrows</code>。不过 <code>@Rule</code>已经在新版本的junit中标记为废弃了，进而推荐使用 <code>Assert.assertThrows</code> 这种形式。</p><h3 id="方式一-rule-示例"><a class="markdownIt-Anchor" href="#方式一-rule-示例"></a> 方式一: <code>@Rule</code> 示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Rule</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExpectedException</span> exception <span class="token operator">=</span> <span class="token class-name">ExpectedException</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLoginWhenAccountPassIsBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    exception<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exception<span class="token punctuation">.</span><span class="token function">expectMessage</span><span class="token punctuation">(</span><span class="token string">"accountPass can not be blank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AccountLoginRequest</span> accountLoginRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountLoginRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accountLoginRequest<span class="token punctuation">.</span><span class="token function">setAccountName</span><span class="token punctuation">(</span><span class="token string">"mock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>accountLoginRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二-assertassertthrows-示例"><a class="markdownIt-Anchor" href="#方式二-assertassertthrows-示例"></a> 方式二: <code>Assert.assertThrows</code> 示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLoginWhenAccountNameIsBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IllegalArgumentException</span> illegalArgumentException <span class="token operator">=</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">AccountLoginRequest</span> accountLoginRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountLoginRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>accountLoginRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> illegalArgumentException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"accountName can not be blank"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Java单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 中 not null 和 default 的使用</title>
      <link href="/2023/07/18/shu-ju-ku/mysql-zhong-not-null-he-default-de-shi-yong/"/>
      <url>/2023/07/18/shu-ju-ku/mysql-zhong-not-null-he-default-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>我们在进行数据库表设计的时候，往往针对一个字段会有一些约束，其中在使用 <code>not null</code> 和  <code>default</code> 这两个约束的时候，我就会产生一种恍惚：感觉这俩连用有点重复定义的感觉。</p><p>例如 我们规定一个 字段 <code>not null default 5</code> 意思想要表达的是 这个字段不能为空，如果为空的话默认就赋值为5. 那么按照这个理解，对于<code>not null</code>已经规定了这个字段不为空，那自然也就没有必要再<code>default 5</code>因为<code>default 5</code>是在字段为空的时候在回起作用的,现在已经<code>not null</code>还定义<code>default 5</code>干嘛呢？反过来既然一个字段<code>default 5</code>默认在空的时候赋值为5，那么自然也就会不会出现空的场景，那干嘛还重复写一遍<code>not null</code>有什么意义呢？</p><p>原因是因为我对于空的理解是错误的。这也是计算机语言对于空值的界定问题，不同的语言对于空的理解是不同的。空代表的到底是null、还是 空串 、还是什么也没有呢？这里mysql属于面向对象系列的语言，它认为的空指的是什么也没有，而null并不是空，null也是一个值，这个值叫null而已。</p><p>所以 如果一个字段 只进行了 <code>default</code> 约束，那么他是可以指定为null的。如果你在insert 的时候不指定这个字段他才会赋值为默认值。如果你指定了null,那么存的就是null<br>如果一个字段 只进行了 <code>not null</code> 约束,那么他就永远不能为null,但是也不会有默认值。如果你inster 的时候制定这个字段为null 那么就会报<code>Column 'xxx' cannot be null</code>,如果你什么也不填，那么就会报<code>Field 'xxx' doesn't have a default value</code></p><p>如果连用 <code>not null default 5</code> 可以保证这个字段一定有值，且值不为 null。如果你inster 不填那就是默认值5，如果你填了null 那就会报错。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-编码转换</title>
      <link href="/2023/07/14/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-bian-ma-zhuan-huan/"/>
      <url>/2023/07/14/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-bian-ma-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="如何查看文件编码"><a class="markdownIt-Anchor" href="#如何查看文件编码"></a> 如何查看文件编码</h1><ol><li>通过vim查看</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:set fileencoding<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可显示文件编码格式。</p><ol start="2"><li>通过 file 命令查看</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token function">file</span> 文件名 --<span class="token operator">&gt;</span><span class="token function">file</span> application-common.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 文件名: Unicode text, UTF-8 text --<span class="token operator">&gt;</span>application-common.properties: Unicode text, UTF-8 text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="文本如何进行编解码"><a class="markdownIt-Anchor" href="#文本如何进行编解码"></a> 文本如何进行编解码</h1><h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token string">"17319271179"</span><span class="token operator">|</span>base64MTczMTkyNzExNzkK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解码"><a class="markdownIt-Anchor" href="#解码"></a> 解码</h2><p>多了个<code>-d</code>参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token string">"MTczMTkyNzExNzkK"</span><span class="token operator">|</span>base64 <span class="token parameter variable">-d</span><span class="token number">17319271179</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="文件如何进行编解码"><a class="markdownIt-Anchor" href="#文件如何进行编解码"></a> 文件如何进行编解码</h1><h2 id="编码-2"><a class="markdownIt-Anchor" href="#编码-2"></a> 编码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">base64 <span class="token parameter variable">-i</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token string">"17319271179"</span><span class="token operator">&gt;</span> a.txt<span class="token operator">&gt;</span> base64 <span class="token parameter variable">-i</span> a.txt MTczMTkyNzExNzkK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解码-2"><a class="markdownIt-Anchor" href="#解码-2"></a> 解码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">base64 <span class="token parameter variable">-d</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 支持 plantuml、Mermaid</title>
      <link href="/2023/07/09/gong-ju-kong/hexo/hexo-zhi-chi-plantuml/"/>
      <url>/2023/07/09/gong-ju-kong/hexo/hexo-zhi-chi-plantuml/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mermaid.js.org/intro/">Mermaid</a></p><h2 id="时序图"><a class="markdownIt-Anchor" href="#时序图"></a> 时序图</h2><div class="mermaid">  sequenceDiagramAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts!John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</div><h2 id="用户体验旅程图"><a class="markdownIt-Anchor" href="#用户体验旅程图"></a> 用户体验旅程图</h2><div class="mermaid">  journey  title My working day  section Go to work    Make tea: 5: Me    Go upstairs: 3: Me    Do work: 1: Me, Cat  section Go home    Go downstairs: 5: Me    Sit down: 3: Me</div>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea 插件 PlantUML Integration 无法显示 类图</title>
      <link href="/2023/07/08/gong-ju-kong/intellij-idea/idea-cha-jian-plantuml-integration-wu-fa-xian-shi-lei-tu/"/>
      <url>/2023/07/08/gong-ju-kong/intellij-idea/idea-cha-jian-plantuml-integration-wu-fa-xian-shi-lei-tu/</url>
      
        <content type="html"><![CDATA[<p>问题: 打开idea到设置中查找插件，搜索plantuml ，直接安装即可，安装后重启，随便打开一个项目，点击新建文件发现类型多了plantuml file的类型，打开该类型文件发现有问题，无法正常显示图形</p><p>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> graphviz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启idea，就可以正常打开plantuml文件了</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;暨&gt;字什么意思</title>
      <link href="/2023/07/06/si-kao/jing-ji-xue/ji-zi-shi-me-yi-si/"/>
      <url>/2023/07/06/si-kao/jing-ji-xue/ji-zi-shi-me-yi-si/</url>
      
        <content type="html"><![CDATA[<p>今天看到</p><center> <img src="/2023/07/06/si-kao/jing-ji-xue/ji-zi-shi-me-yi-si/image.png"> </center>不知道 '暨' 字什么意思<p>暨字用于会议标题的意思与“和”、“及”相近。通常用于比较庄重、严肃的场合。</p><p>在会议标题上，"暨"通常用来表示两个或多个组织、团体或主题的联合或同时举办。它传达了会议的合作性质或多方参与的意思。以下是一个例子：<br>例子：第一届国际研究生论坛暨学术交流会<br>意思：这是一个国际研究生论坛，同时也是一场学术交流会。"暨"表示这两个活动是联合举办的，可能由不同的组织或学术机构共同组织，旨在促进学术交流和合作。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 如何实现统计列数</title>
      <link href="/2023/07/04/linux/shell/shell-ru-he-shi-xian-tong-ji-lie-shu/"/>
      <url>/2023/07/04/linux/shell/shell-ru-he-shi-xian-tong-ji-lie-shu/</url>
      
        <content type="html"><![CDATA[<p>如果一个文件中的内容如下</p><pre class="line-numbers language-none"><code class="language-none">客户姓名|证件类型|证件号码|信息报告日期|性别|生日|户籍地址|电话号码|国籍|学位|学历|教育信息更新日期|单位名称|单位地址|单位号码|职业信息更新日期|客户地址|家庭电话|地址更新日期|通讯地址|通讯地址更新日期|创建时间|更新时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你如何知道一共有多少字段呢。<br>我问了一下我的同事，他们说吧这些内容放到一个文本编辑器里头打开，比如 vscode 或者 sublimText 或者 vim 然后搜索 <code>|</code> , 一般都会显示出来 <code>|</code> 的个数，然后+1就是字段的数量。这个方法也很好用,但感觉还是麻烦。</p><center>  <img src="/2023/07/04/linux/shell/shell-ru-he-shi-xian-tong-ji-lie-shu/image.png"></center><p>我们如何用程序干这事儿呢。目前还没有发现直接统计列的工具，但是我知道一个统计行数的工具叫 wc 还有一个工具可以显示文本行数的工具叫 nl .还有 vim 也可以实现展示行数。那么如果我们能快速把这一行转换成列，直接数列数就知道有多少字段了吧。</p><p>那么我们的问题就转变成了行专列的问题。但是现在的分隔符是 <code>|</code> ,我们只需要把他替换成回车就好了。如果用vim 我们输入替换指令 <code>%s/|/\r/g</code> 就可以吧指定的字符转换成回车换行。</p><center>  <img src="/2023/07/04/linux/shell/shell-ru-he-shi-xian-tong-ji-lie-shu/image2.png"></center><p>然后输入指令 <code>set no</code> 可以显示行号</p><p>另外我们也可以通过 <code>sed</code> 指令替换的新式 <code>cat xxx.txt|sed 's/|/\n/g'|wc -l</code> 或者 <code>cat xxx.txt|sed 's/|/\n/g'|nl</code></p><center>  <img src="/2023/07/04/linux/shell/shell-ru-he-shi-xian-tong-ji-lie-shu/image3.png"></center>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是标记语言</title>
      <link href="/2023/07/01/qian-duan/shi-me-shi-biao-ji-yu-yan/"/>
      <url>/2023/07/01/qian-duan/shi-me-shi-biao-ji-yu-yan/</url>
      
        <content type="html"><![CDATA[<p>标记语言是一种用于描述文本结构和格式的计算机语言。它通过在文本中插入特定的标记或标签来指示文本的结构和样式。标记语言可以用于创建和格式化各种类型的文档，如网页、电子书、电子邮件等。</p><p>最常见的标记语言是HTML（超文本标记语言），它用于创建网页。HTML使用一系列标签来定义文本的结构、样式和链接。例如，使用<code>&lt;h1&gt;</code>标签可以定义一个标题，使用<code>&lt;p&gt;</code>标签可以定义一个段落。</p><p>另一个常见的标记语言是XML（可扩展标记语言），它被广泛用于数据交换和存储。XML使用自定义的标签来描述数据的结构和内容。与HTML不同，XML的标签是自定义的，可以根据需要创建。</p><p>除了HTML和XML，还有许多其他标记语言，如Markdown、LaTeX等。这些标记语言都有自己的语法和用途，但它们的基本原理都是相似的：使用标记或标签来描述文本的结构和样式。</p><p>标记语言的优点是它们可以使文本结构化，并且可以轻松地应用样式和格式。它们还可以与其他计算机系统和工具进行集成，使文本处理更加灵活和自动化。</p><p>总之，标记语言是一种用于描述文本结构和格式的计算机语言，它通过插入特定的标记或标签来指示文本的结构和样式。它们被广泛用于创建网页、数据交换和文本处理等领域。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 和 ECMAScript 有什么关系</title>
      <link href="/2023/07/01/qian-duan/javascript/typescript-he-ecmascript-you-shi-me-guan-xi/"/>
      <url>/2023/07/01/qian-duan/javascript/typescript-he-ecmascript-you-shi-me-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>TypeScript 和 ECMAScript 是两种不同的编程语言。</p><p>ECMAScript 是一种标准化的脚本语言，它定义了一套用于编写脚本的规范。JavaScript 是 ECMAScript 的一种实现，也是最常见的一种实现。ECMAScript 定义了语法、数据类型、函数、控制流等基本特性，以及一些内置对象和方法，如数组、字符串、日期等。</p><p>TypeScript 是一种由微软开发的编程语言，它是 ECMAScript 的超集。这意味着 TypeScript 包含了 ECMAScript 的所有特性，并且在此基础上提供了额外的功能。TypeScript 添加了静态类型检查、类、接口、模块等特性，使得开发者可以更加高效地编写和维护大型应用程序。</p><p>TypeScript 的代码可以通过编译器转换为 ECMAScript 代码，然后在浏览器或其他 JavaScript 运行环境中执行。这意味着 TypeScript 可以与现有的 JavaScript 代码无缝集成，并且可以逐步地将 JavaScript 项目迁移到 TypeScript。</p><p>总结来说，TypeScript 是 ECMAScript 的超集，它在 ECMAScript 的基础上提供了更多的功能和工具，使得开发者可以更加高效地编写和维护代码。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器支持 ES 模块 中的 ES 模块是什么</title>
      <link href="/2023/07/01/qian-duan/html/liu-lan-qi-zhi-chi-es-mo-kuai-zhong-de-es-mo-kuai-shi-shi-me/"/>
      <url>/2023/07/01/qian-duan/html/liu-lan-qi-zhi-chi-es-mo-kuai-zhong-de-es-mo-kuai-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<p>ES 模块是指 ECMAScript 模块，它是 JavaScript 的一种模块化规范。在过去，JavaScript 并没有原生支持模块化，开发者通常使用第三方库或者自己实现模块化的方式来组织代码。但是，随着 ECMAScript 6（ES6）的发布，JavaScript 引入了原生的模块化系统，即 ES 模块。</p><p>ES 模块的主要特点包括：</p><p>导入和导出：ES 模块通过 import 和 export 关键字来实现模块之间的导入和导出。通过 import 关键字，可以从其他模块中导入需要的功能，而通过 export 关键字，可以将当前模块中的功能暴露给其他模块使用。</p><p>静态解析：ES 模块的导入和导出是在代码静态解析阶段完成的，这意味着模块的依赖关系在代码执行之前就已经确定了。这种静态解析的特性使得 ES 模块在性能上有一定的优势。</p><p>单例模式：ES 模块在导入过程中会进行单例模式的处理，即同一个模块只会被加载一次，后续的导入操作都会返回同一个实例。这种单例模式的特性可以避免模块重复加载和重复执行的问题。</p><p>默认导出：ES 模块支持默认导出，即一个模块可以通过 export default 关键字来指定默认导出的功能。默认导出可以简化模块的导入语法，使得代码更加简洁。</p><p>浏览器对于 ES 模块的支持程度在不同的浏览器中有所差异。目前，大多数现代浏览器都已经支持 ES 模块，包括 Chrome、Firefox、Safari 和 Edge 等。在使用 ES 模块时，可以通过 <code>&lt;script type="module"&gt;</code> 标签来指定当前脚本是一个 ES 模块，浏览器会按照 ES 模块的规范进行解析和执行。</p><p>需要注意的是，由于浏览器对于 ES 模块的支持程度不同，一些旧版本的浏览器可能不支持 ES 模块或者只支持部分功能。在开发过程中，可以使用工具如 Babel 来将 ES 模块转换为兼容性更好的代码，以确保在各种浏览器中都能正常运行。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不良资产包在分析的过程中关注的维度</title>
      <link href="/2023/06/29/si-kao/jing-ji-xue/bu-liang-zi-chan-bao-zai-fen-xi-de-guo-cheng-zhong-guan-zhu-de-wei-du/"/>
      <url>/2023/06/29/si-kao/jing-ji-xue/bu-liang-zi-chan-bao-zai-fen-xi-de-guo-cheng-zhong-guan-zhu-de-wei-du/</url>
      
        <content type="html"><![CDATA[<p>最近参加了一场公司组织的项目立项、投决会议。这个会议主要针对市场拓展部发掘的不良资产包的情况进行汇报。汇报的目的是决定是否要对这个资产包进行投资。从与会的人员来看均是各个部门的领导，我作为新入公司的一员有幸进行了旁听。对于我一个刚刚入行不良资产领域的人来讲，要学的东西真的还不少。在听讲的过程中，也学到了不少新的名词，新的理念，特此记录。</p><h3 id="关于这场投决会议的思考"><a class="markdownIt-Anchor" href="#关于这场投决会议的思考"></a> 关于这场投决会议的思考</h3><p>虽然汇报的目的是决定是否要对这个资产包进行投资，但是感觉汇报的人在极力说服高层，我这个资产包是值得投资的，而与会的各个部门的领导则在极力质疑这个资产包是否值得投资。他们天然形成了一种对抗，也不知道这种对抗是良性还是劣性的。还是说因为职责所在，汇报的人担心自己的业绩，而高层则担心自己的投资风险和投资回报，他们不得不扮演着各自的角色。</p><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>这次我主要总结了在分析一个不良资产包的时候，大家关注的一些维度，也就是在决定投资一个不良资产包的时候，他们应该怎么去筛选。从这次汇报的PPT来看，绝对是有一些套路的 – 一定是通过一些数值来定性或定量的分析这个资产包。</p><h3 id="合作机构关注点"><a class="markdownIt-Anchor" href="#合作机构关注点"></a> 合作机构关注点</h3><p>首先对于银登的资产包，只有有资质的AMC机构才能竞拍、处置。但是有的资产包太大，AMC机构是处置不过来的，因此势必会寻找一些合作伙伴一起进行处理。在整个生命周期中，可能会跟很多很多的机构进行合作，无论是找机构一起投资，还是找机构一起处置，总之是需要寻找合作伙伴的，或者被合作伙伴寻找的。你出钱我出力，你出钱我出人他出力都是常见的合作形式。不过有些合作机构会关心收购方的处置合规性，也就是有没有资质来处理这些资产，并且要求在处置的过程中一定不能出现违法行为，这类合作机构我猜测要么是国企，要么是有国企背景。</p><h3 id="不良资产包分析维度"><a class="markdownIt-Anchor" href="#不良资产包分析维度"></a> 不良资产包分析维度</h3><p>接下来是我总结的不良资产包分析的维度，仅代表个人观点。</p><ol><li><p>账龄：在不良资产中，账龄通常用于衡量债务的逾期时间，即借款人或客户未能按时偿还债务的时间长度。账龄越长，表示债务逾期的时间越久，风险越高。</p></li><li><p>剩余本金占比：不良资产中剩余本金占比是指不良资产中未偿还的本金金额占总本金金额的比例。这个指标可以用来衡量不良资产的风险程度和追偿的可能性，因为剩余本金占比越高，表示借款人未偿还的本金金额越多，追回这部分资金的可能性就越低。</p><blockquote><p>举个例子来说明，假设某银行有一笔不良贷款，总本金金额为100万元。在贷款期限内，借款人已经偿还了30万元的本金，剩余本金为70万元。那么剩余本金占比就是70%（70万元/100万元）。通过计算剩余本金占比，银行可以评估不良资产的风险程度。如果剩余本金占比较高，说明借款人还款能力较差，风险较大；如果剩余本金占比较低，说明借款人还款能力较好，风险较小。银行可以根据不良资产的剩余本金占比来制定相应的风险管理策略，例如加大催收力度、采取法律手段追讨欠款等，以降低不良资产对银行的影响。</p></blockquote></li><li><p>放款时间维度：不良资产中的放款时间维度是指贷款发放的时间点或时间段。在金融领域，放款时间维度通常用于衡量贷款的违约风险和资产质量。放款时间维度可以帮助银行或金融机构了解贷款的发放时间与贷款违约的关系，从而评估贷款的风险水平。</p><blockquote><p>举个例子来说，假设银行在2010年1月1日向一家企业发放了一笔贷款，该贷款的还款期限为5年。然而，在2012年底，由于企业经营不善，开始出现了偿债困难。到2013年底，企业无法按时偿还贷款，贷款变为不良资产。在这个例子中，放款时间维度是2010年1月1日，不良发生时间维度是2013年底。通过比较放款时间和不良发生时间，银行可以评估出这笔贷款的违约风险。如果放款时间与不良发生时间相距较短，那么这笔贷款的违约风险可能较高。而如果放款时间与不良发生时间相距较长，那么这笔贷款的违约风险可能较低。</p></blockquote><p>放款时间维度可以分为以下几个方面：</p><ol><li>贷款发放时间点：指贷款合同签订后，资金实际发放的具体时间点。这个时间点通常是贷款合同生效后的某个具体日期，也可以是根据合同约定的某个条件满足后的日期。贷款发放时间点可以影响贷款的违约风险，因为不同时间点发放的贷款可能受到不同的经济环境和市场波动的影响。</li><li>贷款发放时间段：指贷款发放的时间跨度。这个时间段可以是一段具体的时间，例如一年、三年或五年，也可以是根据贷款合同约定的某个条件满足后的时间段。贷款发放时间段可以反映贷款的期限和偿还方式，对贷款的违约风险和资产质量有一定的影响。</li></ol></li><li><p>逾期本金维度，客户数量占比：不良资产中的逾期本金维度是指在借款人未按时偿还贷款本金的情况下，逾期本金所占的比例。客户数量占比则是指在不良资产中，逾期本金所占的客户数量的比例。</p><blockquote><p>举一个例子来说明：假设某银行有100个不良资产客户，其中有50个客户逾期本金为100万元，另外50个客户逾期本金为200万元。那么逾期本金维度的客户数量占比就是50%（50个客户中逾期本金为100万元的客户数量占比），而逾期本金维度的逾期本金占比就是75%（逾期本金总额为300万元，其中逾期本金为100万元的占比为100/300=33.33%，逾期本金为200万元的占比为200/300=66.67%）。这样，通过逾期本金维度的客户数量占比和逾期本金占比，银行可以更好地了解不良资产中逾期本金的分布情况，从而采取相应的风险控制措施，例如加强对逾期本金较高的客户的催收工作，降低不良资产的风险。</p></blockquote></li><li><p>最近一次还款占比。</p><blockquote><p>2年内还款的占比多少，3年内还款的占比多少</p></blockquote></li><li><p>年龄维度</p><blockquote><p>例如：主要集中在23–35 ，客群比较年轻，占比多少</p></blockquote></li><li><p>客户分期维度</p><blockquote><p>例如：主要是12期为主，已还期数3-7期的，本金占比多少</p></blockquote></li><li><p>省份维度</p><blockquote><p>主要集中在 山东，占比多少，客户相对较为分散。</p></blockquote></li><li><p>资产包中的案件是否有过法诉。</p></li><li><p>关注是否有舆情</p><blockquote><p>资产包中的案件是否有投诉情况，比如因为高息费。</p></blockquote></li><li><p>是否公积金贷款</p><blockquote><p>如果是公积金贷款产生的逾期，处置团队往往跟想去接，因为大概率公积金卡里是有钱的，是可以收回来款的。</p></blockquote></li><li><p>转让方的组包策略</p><blockquote><p>转让方在组包的时候一定是好的跟坏的搭配着买，猜测他们是怎么组包的。</p></blockquote></li><li><p>政策因素</p><blockquote><p>为了跟某个机构合作，愿意赔钱做。比如我就想先认识某某公司的老板，然后我先通过合作的方式购买这个包，为了撬动以后的合作。</p></blockquote></li></ol><p>补充：<br>后来又有有幸参加了一次研讨会。会上又了解到一些他们关注的点。主要是在处置过程中，针对案件的特点进行的总结。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 不良资产 </tag>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel 单元格下拉列表实现</title>
      <link href="/2023/06/25/gong-ju-kong/excel/excel-dan-yuan-ge-xia-la-lie-biao-shi-xian/"/>
      <url>/2023/06/25/gong-ju-kong/excel/excel-dan-yuan-ge-xia-la-lie-biao-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="excel-单元格下拉列表实现"><a class="markdownIt-Anchor" href="#excel-单元格下拉列表实现"></a> excel 单元格下拉列表实现</h1><ol><li>先选中对应的列</li><li>点击数据验证 <center> <img src="/2023/06/25/gong-ju-kong/excel/excel-dan-yuan-ge-xia-la-lie-biao-shi-xian/1.png"> </center></li><li>在验证条件里面，允许选择序列，然后来源中使用逗号分割的形式将这个单元格下来列表中的可选值填上就好<center> <img src="/2023/06/25/gong-ju-kong/excel/excel-dan-yuan-ge-xia-la-lie-biao-shi-xian/2.png"> </center></li></ol><h1 id="那如何去掉表头那个单元格的下拉列表呢"><a class="markdownIt-Anchor" href="#那如何去掉表头那个单元格的下拉列表呢"></a> 那如何去掉表头那个单元格的下拉列表呢?</h1><p>其实只需要选中表头的单元格,然后把数据验证中的允许值从序列改成对应的类型或者把右侧的提供下拉箭头去掉即可</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离开北京了</title>
      <link href="/2023/05/25/si-kao/chi-kai-bei-jing-liao/"/>
      <url>/2023/05/25/si-kao/chi-kai-bei-jing-liao/</url>
      
        <content type="html"><![CDATA[<p>2023年5月25日于大红门苗圃东里6号楼4门202夜里有感</p><p>要离开北京了，既不是"终于要离开北京了"，也不是"还是要离开北京"，更不是"居然要离开北京了"，就纯纯的是 “要离开北京了”，没有任何情感。下次来北京不止何年何月了？可能是出差，也可能是陪陈卓或陈卓妈妈来旅游？(事实证明刚回天津第二周就又回来了，是出差，哭笑不得)。</p><p>在帝都呆了得有7年了，2015年毕业，2016年5月来到北京，就职于一家创业公司，叫分贝通，很不错的一家公司，奈何最后因为公司动荡，最终还是离职了。然后先后去了美团、阿里，美团五年多，阿里一年多，然后在2023年的6月1号就要彻彻底底的回天津去上班了。7年啊，可真快的，真的感觉是一瞬间。</p><p>当有人给我推荐天津的工作机会的时候，我并没有想要面试的冲动，尤其是在了解到薪资这块儿的时候，我大脑的第一反应是拒绝的。本来在阿里做的好好的，冷不丁的让你降薪去另一个城市工作，我是不愿意的，我认为这个阶段还是得先积累财富。</p><p>我有真正想明白过我为什么要离开帝都，离开梦想的大厂么？好像是没有！我说服自己的理由是：已经定居在天津了，早晚得回去，老婆孩子在天津，所以得回去。但其实，我自己也不知道这个理由是不是真的是我内心的想法，总之稀里糊涂的。我也不太善于思考，也不太想去思考， 走一步看一步吧。我在想我是不是其实只是想逃离北京呢？</p><p>我好像从来没有真正感受过一座城市，我对北京没有什么深刻的体会，没有什么特别的印象，没有什么难忘的事情，也没有什么需要记忆的人，都是很普通的一幕一幕。初来乍到，居住在我婷姐家。然后找工作，然后找房子，然后跟我浩姐合租，两次搬家，两次换工作，经历疫情。在北京，大部分时间都是两点一点，租的房子，地铁，公司。鸟巢、水立方 从来就没有去过！十号线做了这么久，也没记住几站的名字。</p><p>我好像从来不知道自己真正想要的是什么。来北京这么多年，居然有些地方也没有去过。我想要再去看看<br>鸟巢，水立方（因为从来没有去过）<br>清华、北大（读书人向往的地方）<br>来北京的第一站，我姐租的房子，六营门（北京的起点，永远记住有个好姐姐）<br>然后宋家庄公交车站<br>在坐一次十号线（坐了这么多次的10号线我居然都有些站都不知道在哪儿）<br>故宫去一次<br>我还没去过酒吧、胡同（之前去的都不是真正的）</p><p>最后 我这个人吧，很少有什么事情能使我特别开心，也很少有什么能使我特别难过，我亲情观念也是一个很淡薄的人，我若冷漠，敢叫天地失色。所以走了就走了呗，换工作就换工作呗，也就这样了吧。</p><p>上面都是想到哪儿写到哪，不考虑文笔，也不考虑措辞，临时起意，以后再读，不知是何滋味了。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财富积累的思考</title>
      <link href="/2023/05/08/si-kao/cai-fu-ji-lei-de-si-kao/"/>
      <url>/2023/05/08/si-kao/cai-fu-ji-lei-de-si-kao/</url>
      
        <content type="html"><![CDATA[<p>接下来说说财富积累的思考。<br>经济基础决定上层建筑，经济基础就是积累的财富+财富积累的速度，上层建筑就是你的生活。积累的财富最重要的就是你的积蓄，财富积累的速度就是你挣钱的速度。你要想要你的生活更好，所谓更好其实就是相对于别人你有优越感(你可以轻易的买一辆车，轻易的买一套房子)，你要么很有钱，要么很能挣钱，能够在短期内积累足够的财富，这样上层建筑就会更加稳固和豪华。<br>财富积累我总结一个公式：收入-支出=盈余。 你的收入减去你的支出就是你的剩余财富，你的家庭的收入减去你家庭的支出就是你家庭的剩余财富，这里的财富可以简单理解为钱。我们的所有经济活动目的都是想要使用盈余增加或者盈余增加的速率变快，这也就是财富积累的本质。<br>而要增加盈余，要么增加收入，要么减少支出，这里的减少支出指的是减少非必要的支出，比如你想买一个包、买一个表、吃一顿西餐，这些都定性为非必要支出，而减少非必要支出只需要降低自己的欲望就行了，也就是少花钱，这是最简单的增加盈余的手段，也是人们最先想到的，这也是我们父辈的想法，省吃俭用，因为收入不定，对于种地的农民来说，一年的收入全靠天，收成是个未知数，因此减少非必要支出成为他们能想到的做简单的方式了，所以他们那一代人能积累的财富是有限的，原因在于收入没有保障的，忽高忽低。</p><p>这个公式其实从我们出生就开始伴随着我们。一开始人们所有的财富积累都是负数，然后过渡到0，然后再到正数。从自己角度来看，我们一出生，收入一定是0，支出一定大于0，由于都是我们的父母一直在替我们支出，所以我们的财富积累是负数。从父母的角度来看，他们的收入是大于0的，用在我们身上的财富就算做他们支出的一项，这对于父母来说属于必要支出，是无论如何都不会减少的。随这我们的长大，这份支出会越来越多，但是由于有父母收入的存在，整个家庭的财富积累还是正数。等我们开始挣钱了，也就要开始自负盈亏了，还从自身的角度来看，我们的收入开始逐渐从零变成正数了，如果我们收入和支出持平，比如 挣500 花 500那么我们的财富积累还是0，只能说达到了平衡，父母不用再替我们支出了，所以他们的财富积累的速度会提升一些，压力自然也就小一些，他们的生活也就好一些。随这我们挣钱越来越多，我们的财富剩余开始增加，我们的财富积累过程才算真正开始了。但是我们比我们父辈好一点的是，我们的收入是有一些保障的，从我们的一生来看，我们是有工作的，至少能找到工作的，所以我们收入是相对来说比较稳定的，但是我们收入也是有天花板的，也就是我们这一代人，大部分人的薪资是有上限的，某个行业的薪资水平就在那。</p><p>而增加财富积累的另一个手段就是提高收入，但这就比减少欲望来的难多了。要知道上面说过，某个行业的薪资水平是有天花板的，所以我们才要努力提高自己，而且不能局限于挣死工资，我们需要挑战。也就是说当一个人的收入已经或者近乎已经达到天花板，我们又不想控制欲望，还想增加盈余的手段就是得提高财富积累的速度的，注意是速度不是数量，也就是说要快了，一个月挣1万和一个月挣两万的财富积累的速率是不一样的，这些有挑战的诸如炒股、诸如创业了。但是是有风险的。</p><p>就先想到这里吧。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速融入新公司新团队</title>
      <link href="/2023/05/07/si-kao/ru-he-kuai-su-rong-ru-xin-gong-si-xin-tuan-dui/"/>
      <url>/2023/05/07/si-kao/ru-he-kuai-su-rong-ru-xin-gong-si-xin-tuan-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="准备好一个自我介绍"><a class="markdownIt-Anchor" href="#准备好一个自我介绍"></a> 准备好一个自我介绍</h1><p>大家好，我叫xxx，希望大家以后多多关照。这样的自我介绍个人觉得太过中规中矩。新人入职的自我介绍的目的其实就是让大家记住你，知道你是干啥的，所以我更愿意在名字和做的事情上来强调，以期加深同事对自己的印象，表达好了就能有一个好印象。</p><h1 id="记住同事的名字"><a class="markdownIt-Anchor" href="#记住同事的名字"></a> 记住同事的名字</h1><p>进入一家新公司，第一件要做的事情就是要再短时间内记住公司同事的名字。记住一个人的名字是对一个人最起码的尊重和礼貌。一般我们入职新公司第一天肯定有人会带着你转一圈，然后把你介绍给公司的同事，到这里你的第一个挑战就来了，别人只需要记住你一个名字，但是你需要记住其他所有人的名字。<br>要么是在会议上介绍新同事，要么是带着你挨个去工位上介绍一番。<br>如果是在会议上介绍你，你就要提前准备好一份简短的自我介绍。然后你要挨个默默记下在做所有人的长相和名字。<br>如果是带着你挨个介绍一番</p><ol><li>在对方介绍好自己后，要重复对方的名字一下，只要你大胆的说出对方的名字就能加深对对方的印象。比如 xx你好，我叫陈尚，很高兴认识你(对同事)/以后多多关照(对同事leader)/希望以后合作愉快(对业务方)…</li><li>回到座位上后，尽量快速的回想一下每个座位上的人的名字，然后对着位子默写下来对方的名字，这样也能加深自己的印象</li><li>第一天尽量多叫几遍同事的名字。</li></ol><h1 id="找到一起吃饭的小伙伴"><a class="markdownIt-Anchor" href="#找到一起吃饭的小伙伴"></a> 找到一起吃饭的小伙伴</h1><p>孤木难成林，独木难成舟，我们需要有自己一起就伴的小伙伴，以后公司的小道消息都是先在小团体里面流传出来的。一个人只要不是性格特别怪异，都会找到自己的组织的，否则你以后可能会很难融入到团队里面。我反正不想到了饭点了，没人喊自己一起吃饭，感觉很孤单。</p><h1 id="摸清公司的组织架构"><a class="markdownIt-Anchor" href="#摸清公司的组织架构"></a> 摸清公司的组织架构</h1><p>我们要知道公司有哪些部门，每个部门都是干啥的，部门的领导都是谁，然后再把同事分门别类的对应到对应的部门。比如 A 同事是技术部的，B和C是人力资源部的。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-grep</title>
      <link href="/2023/01/30/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-grep/"/>
      <url>/2023/01/30/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-grep/</url>
      
        <content type="html"><![CDATA[<p>查看一个文件夹下包含某个字符串的文件都有哪些 <code>grep -r "xxxxx"</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java一些技术题目</title>
      <link href="/2022/07/22/java/java-yi-xie-ji-zhu-ti-mu/"/>
      <url>/2022/07/22/java/java-yi-xie-ji-zhu-ti-mu/</url>
      
        <content type="html"><![CDATA[<p>1.spring需要哪些配置完成类的初始化，对象初始化流程的是怎样的，稍微阐述下resource有什么用<br>2.json格式的http请求需要如何设置header，400是什么原因<br>3.是否使用过事务，哪些情况使编程式事务不生效<br>4.hashmap是否线程安全为什么<br>5.IO密集型和计算密集型的服务的区别是什么<br>6.对MySQL进行翻页查询的流程是怎样的<br>7.如果使用过springboot，稍微阐述下如果需要自己管理数据源需要怎么做<br>8.如果做过dubbo服务调用，稍微阐述如何实现多版本多实现的兼容<br>9.如果使用过redis，简单介绍下使用过哪些数据结构及场景<br>10.如果使用过缓存，稍微阐述下使用过哪些cache及如何实现线程安全<br>11.如果了解多线程，稍微讲一下threadpool的参数和用法<br>12.编程：判断一个字符串中有多少种AAB类型的子串，比如“好好学习，好好学习，天天向上”中有两种种AAB的句式，而不是三种。<br>此题解题逻辑说明，“好好学”是一种，“天天向”是一种，所以是两种，再比如“好好学学吧”可以看成“好好学”和“学学吧”，这种叠加情况要被排除，只认为是“好好学”这一种。</p><p>lru 缓存淘汰策略<br>编程范式,面向对象和函数编程的区别和联系<br>先删缓存还是先删除数据库呢，如果数据库删除成功，缓存删除失败呢<br>spring DI IOC 实现原理<br>面型对象的编程原则，6中，<br>java8 和 scala 的区别和相同点，<br>jvm 内存结构，堆栈，哪个可能oom<br>synchronized 怎么实现<br>锁升级流程<br>缓存一致性<br>负载均衡怎么做<br>ngix为什么能抗那么大的并发<br>服务发现怎么做，服务注册怎么实现</p><p>算法相关: 快速排序，反转链表<br>spring aop 实现原理<br>线程池怎么实现的<br>问了一下BaseShell 都提供了哪些功能。线程池怎么实现的<br>阻塞队列怎么设计实现。<br>threadLocal 原理<br>volatile 原理<br>设计一个秒杀系统<br>数据库事务，隔离级别<br>spring 的原理，mvc流程</p><p>git 用哪些命令<br>maven 和 gradle的区别<br>scala语言和java的区别<br>函数式是什么<br>数据库的锁，乐观锁和悲观锁<br>cas<br>juc中的包有哪些<br>aqs<br>锁升级过程，自旋</p><p>java8 中有哪些函数特性<br>hashmap 中java8之后有哪些变化<br>redies有哪些新的数据类型<br>缓存雪崩、缓存击穿、缓存穿透<br>数据库的分库分表</p><p>数据库索引的分类<br>服务治理框架的原理</p><p>如何排查oom<br>spring spring mvc springboot<br>git flow</p><h4 id="java-中的final关键字有哪些用法"><a class="markdownIt-Anchor" href="#java-中的final关键字有哪些用法"></a> Java 中的final关键字有哪些用法？</h4><p>(1)修饰类：表示该类不能被继承；<br>(2)修饰方法：表示方法不能被重写；<br>(3)修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</p><h4 id="阐述final-finally-finalize的区别"><a class="markdownIt-Anchor" href="#阐述final-finally-finalize的区别"></a> 阐述final、finally、finalize的区别。</h4><p>答：</p><ul><li>final：修饰符（关键字）有三种用法：如果一个类被声明为final，意味着它不能再派生出新的子类，即不能被继承，因此它和abstract是反义词。将变量声明为final，可以保证它们在使用中不被改变，被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为final的方法也同样只能使用，不能在子类中被重写。</li><li>finally：通常放在try…catch…的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要JVM不关闭都能执行，可以将释放外部资源的代码写在finally块中。</li><li>finalize：Object类中定义的方法，Java中允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写finalize()方法可以整理系统资源或者执行其他清理工作。</li></ul><h3 id="常识"><a class="markdownIt-Anchor" href="#常识"></a> 常识</h3><h4 id="int-和-integer-有什么区别"><a class="markdownIt-Anchor" href="#int-和-integer-有什么区别"></a> int 和 Integer 有什么区别?</h4><p>分析:这个题目问的其实是基本数据类型和对应包装类相关问题。不一定单单说区别,可以把自己联想到的都说出来。<br>首先先回答这个问题,<br>int 是 Java 中的基本数据类型,Integer 是引用数据类型。<br>Integer 是 int 类型的包装类,在编译器中实现了自动拆装箱操作,<br>int 类型的数据不能有方法,但 Integer 类型的数据可以有自己的方法, 也就是可以变量名.XX() 方法出来。<br>这也反映出 Java 并不是纯粹的面向对象的语言,一门纯粹的面向对象的语言是不会有基本数据类型之说的,所有的类型都应该是对象,Java 之所以这样设计是考虑到这些基本设计类型是比较常用的,单独出来有利于优化代码的性能,比如他的存储位置啊,基本数据类型就是直接存储在栈中或方法区中的,而引用数据类型的实例则是存储在堆中的。包装类是对 Java 基本类型面向对象特性的补充,是为了弥补基本数据类型不是对象这一缺陷来的。而由于有自动拆装箱的操作,Java 还在方法区的静态存储区中设计了缓存,如 int 类型的-127-&gt;+127的数,这使得在拆装箱的过程中会出现一些诡异的问题,不建议使用。</p><h4 id="什么是函数式编程"><a class="markdownIt-Anchor" href="#什么是函数式编程"></a> 什么是函数式编程？</h4><p>用函数式思想来编程就是函数式编程,用面向对象的思想来编程就是面向对象编程,要想理解什么是函数式编程,要先知道什么是函数.函数式数学中的概念,从一个状态与另一个状态的对应关系,或者从一个状态到另一个状态的映射就是函数,y=f(x) 这个 f 就是函数。就像谈什么是面向对象一样,继承、封装、多态、抽象一样,谈什么函数式编程就要说函数式编程的特点,函数编程的特点有很多:函数式第一公民、高阶函数、模式匹配、无副作用、不变性<br>。</p><h4 id="创建对象时构造器的调用顺序是"><a class="markdownIt-Anchor" href="#创建对象时构造器的调用顺序是"></a> 创建对象时构造器的调用顺序是</h4><p>先初始化静态成员，然后调用父类构造器，再初始化非静态成员，最后调用自身构造器。</p><h3 id="冷门"><a class="markdownIt-Anchor" href="#冷门"></a> 冷门</h3><h4 id="比较一下java和javasciprt"><a class="markdownIt-Anchor" href="#比较一下java和javasciprt"></a> 比较一下Java和JavaSciprt。</h4><p>JavaScript 与Java是两个公司开发的不同的两个产品。Java 是原Sun Microsystems公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JavaScript是Netscape公司的产品，为了扩展Netscape浏览器的功能而开发的一种可以嵌入Web页面中运行的基于对象和事件驱动的解释性语言。JavaScript的前身是LiveScript；而Java的前身是Oak语言。<br>下面对两种语言间的异同作如下比较：</p><ul><li>基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。</li><li>解释和编译：Java的源代码在执行之前，必须经过编译。JavaScript是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了JIT（即时编译）技术来提升JavaScript的运行效率）</li><li>强类型变量和类型弱变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript的解释器在运行时检查推断其数据类型。</li><li>代码格式不一样。</li></ul><p>补充：上面列出的四点是网上流传的所谓的标准答案。其实Java和JavaScript最重要的区别是一个是静态语言，一个是动态语言。目前的编程语言的发展趋势是函数式语言和动态语言。在Java中类（class）是一等公民，而JavaScript中函数（function）是一等公民，因此JavaScript支持函数式编程，可以使用Lambda函数和闭包（closure），当然Java 8也开始支持函数式编程，提供了对Lambda表达式以及函数式接口的支持。对于这类问题，在面试的时候最好还是用自己的语言回答会更加靠谱，不要背网上所谓的标准答案。</p><p>理解面向对象编程思想，理解代码复用和接口的可扩展，有良好熟悉Java Core和开源框架，如SpringMVC, MyBatis, JUnit等的编码风格和文档能力<br>熟悉Web Service，Restful， TCP/UDP, 多线程等知识<br>熟悉JVM的内存机制，了解Java性能优化<br>熟悉数据库基本原理，熟悉MySQL或Oracle数据库，了解SQL的性能优化<br>熟练使用Linux操作系统，能熟练编写Shell脚本<br>具有扎实的java基础，熟悉分布式、<br>熟悉使用Tomcat、Nginx等应用服务器软件；</p><p>良好的故障分析以及快速解决能力<br>了解网络基本技术，熟悉TCP/IP协议工作原理<br>熟练使用linux下各种常用命令，能独立编写Shell/Perl/Python等脚本更好<br>熟悉UML及建模工具；<br>了解redis，memcached，mongodb等NoSQL数据库的使用；<br>熟悉HTTP、TCP/IP、面向对象及MVC、 ORM和对象缓存技术等相关知识；<br>精通spring/mybatis等框架，能够脱离IDE手写代码<br>精通nio、多线程</p><p>熟悉Java Core和开源框架，如SpringMVC, MyBatis, JUnit等</p><ol><li>ArrayList和LinkedList区别？</li><li>Spring实现注解方式？</li><li>解释下Spring中AOP和IOC？</li><li>Struts和Ibatis的区别？</li><li>Springmvc的xml配置文件中有哪些常见标签？</li><li>Bean标签实例化的方式？</li><li>怎样实现外部接口？</li><li>解释一下递归。使用递归需要注意什么？</li><li>数据库中什么叫事物？索引有什么用？</li></ol><p>StringBuffer 与 StringBuilder 的区别? 与 String 互转?<br>StringBuffer 复写了 Object 的 toString 方法, 一个 StringBuffer 类型的对象直接调用 toString()方法即可转换为 String 类型的数据,记住 toString 是一个 Override 的一个方法,小括号<code>()</code>不能少。</p><p>ConcurrentHashMap为何不支持null键和null值</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种查找算法-二分查找</title>
      <link href="/2022/04/19/linux/shell/shu-ju-jie-gou-suan-fa/shell-er-fen-cha-zhao/"/>
      <url>/2022/04/19/linux/shell/shu-ju-jie-gou-suan-fa/shell-er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">low</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">high</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${<span class="token operator">#</span>nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><span class="token comment">#   local mid=$(((low+high)/2))</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$low</span> <span class="token parameter variable">-le</span> <span class="token variable">$high</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token builtin class-name">let</span> <span class="token assign-left variable">cha</span><span class="token operator">=</span><span class="token punctuation">(</span>high-low<span class="token punctuation">)</span>/2    <span class="token builtin class-name">let</span> <span class="token assign-left variable">mid</span><span class="token operator">=</span>low+cha    <span class="token builtin class-name">local</span> <span class="token assign-left variable">midNum</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${midNum}</span> <span class="token parameter variable">-eq</span> <span class="token variable">${target}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${mid}</span>"</span>      <span class="token builtin class-name">return</span><span class="token punctuation">;</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${midNum}</span> <span class="token parameter variable">-lt</span> <span class="token variable">${target}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token assign-left variable">low</span><span class="token operator">=</span>mid+1    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${midNum}</span> <span class="token parameter variable">-gt</span> <span class="token variable">${target}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token assign-left variable">high</span><span class="token operator">=</span>high-1    <span class="token keyword">fi</span>  <span class="token keyword">done</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种排序算法-归并排序</title>
      <link href="/2022/04/05/linux/shell/shu-ju-jie-gou-suan-fa/shell-gui-bing-pai-xu/"/>
      <url>/2022/04/05/linux/shell/shu-ju-jie-gou-suan-fa/shell-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>归并排序采用的是分治的思想。归就是归纳,并就是合并。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">0</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token function">sort</span> <span class="token string">"0"</span> <span class="token string">"<span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">low</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">high</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${low}</span> <span class="token parameter variable">-ge</span>  <span class="token variable">${high}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">mid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token variable">$((</span>low<span class="token operator">+</span>high<span class="token variable">))</span></span>/2<span class="token punctuation">))</span>    <span class="token function">sort</span> <span class="token variable">${low}</span> <span class="token variable">${mid}</span>    <span class="token function">sort</span> <span class="token variable"><span class="token variable">$((</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span> <span class="token variable">${high}</span>    merge <span class="token variable">${low}</span> <span class="token variable">${mid}</span> <span class="token variable">${high}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">low</span><span class="token operator">=</span><span class="token variable">$1</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">mid</span><span class="token operator">=</span><span class="token variable">$2</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">high</span><span class="token operator">=</span><span class="token variable">$3</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable">${low}</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${i}</span> <span class="token parameter variable">-le</span> <span class="token variable">${mid}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${j}</span> <span class="token parameter variable">-le</span> <span class="token variable">${high}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token parameter variable">-lt</span> <span class="token variable">${array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span>        <span class="token builtin class-name">let</span> k++<span class="token punctuation">;</span>        <span class="token builtin class-name">let</span> i++<span class="token punctuation">;</span>    <span class="token keyword">else</span>       tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span>       <span class="token builtin class-name">let</span> k++<span class="token punctuation">;</span>       <span class="token builtin class-name">let</span> j++<span class="token punctuation">;</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span>  <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${i}</span> <span class="token parameter variable">-le</span> <span class="token variable">${mid}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>        tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span>        <span class="token builtin class-name">let</span> k++<span class="token punctuation">;</span>        <span class="token builtin class-name">let</span> i++<span class="token punctuation">;</span>  <span class="token keyword">done</span>  <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${j}</span> <span class="token parameter variable">-le</span> <span class="token variable">${high}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>        tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span>        <span class="token builtin class-name">let</span> k++<span class="token punctuation">;</span>        <span class="token builtin class-name">let</span> j++<span class="token punctuation">;</span>  <span class="token keyword">done</span>  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>low <span class="token operator">+</span> l<span class="token variable">))</span></span>        array<span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp<span class="token punctuation">[</span>$l<span class="token punctuation">]</span>}</span>  <span class="token keyword">done</span>  <span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span><span class="token punctuation">}</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行最后结果如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1 3 5 7 9 2 4 6 8 0 7 9 2 41 3 5 7 9 2 4 6 8 0 7 9 2 41 3 5 7 9 2 4 6 8 0 7 9 2 41 3 5 7 2 9 4 6 8 0 7 9 2 41 3 5 7 2 9 4 6 8 0 7 9 2 41 3 5 7 2 4 6 9 8 0 7 9 2 41 2 3 4 5 6 7 9 8 0 7 9 2 41 2 3 4 5 6 7 9 0 8 7 9 2 41 2 3 4 5 6 7 9 0 8 7 9 2 41 2 3 4 5 6 7 9 0 7 8 9 2 41 2 3 4 5 6 7 9 0 7 8 9 2 41 2 3 4 5 6 7 9 0 7 8 9 2 41 2 3 4 5 6 7 9 0 2 4 7 8 90 1 2 2 3 4 4 5 6 7 7 8 9 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM类加载机制</title>
      <link href="/2022/04/02/java/jvm-lei-jia-zai-ji-zhi/"/>
      <url>/2022/04/02/java/jvm-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Java的类加载过程是什么样子的?Java类的生命周期是什么样子的。<br>分成357,3个阶段,5个步骤,7个小结<br>可以看成三个阶段: 加载-&gt;连接-&gt;初始化<br>5个步骤,其中因为 连接可以分成:验证-&gt;准备-&gt;解析。所以加上 前面的加载和后面的初始化，就是 加载-验证-准备-解析-初始化<br>7个小结,初始化之后还需要使用和卸载。因此就是  加载-验证-准备-解析-初始化-使用-卸载</p></li><li><p>每个阶段都是干啥的<br>加载: 首先第一件是事情就是把 .class文件放到内存里面<br>所为连接，连接的就是 .class 和 Class 的过程，连接完成了，Class也就放到内存里面了。所以 .class 加载到内存里面了，得先看看 这个class文件写的对不对，也就是验证，如果写的不对，那就直接报错就好了，如果写的没问题，接下来就是在方法区里面分配空间了,因为马上就要创建Class了,得先准备准备吧，准备好了就是解析了，解析的目的就是把能把符号引用转换成直接引用的地方都转换成直接引用。<br>初始化其实就是赋值的过程，按照顺序执行静态变量的赋值过程和静态代码块儿的代码。到此一个对象的DNA就好了。<br>使用就是new<br>卸载就是这个类不在使用的时候从方法区里面移除的过程，不过这个移除的过程比较苛刻。</p></li><li><p>什么是双亲委派</p></li><li><p>如何打破双亲委派<br>只要继承ClassLoader类,然后重写findClass 和 loadClass 就行。如果只重写findClass就是为了接入双亲委派。</p></li><li><p>为什么要打破双亲委派</p></li><li><p>Tomcat 要求应用之间隔离</p></li><li><p>热部署 要求一个类变了之后需要重新加载</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中按照in条件顺序输出</title>
      <link href="/2022/04/02/shu-ju-ku/mysql-zhong-an-zhao-in-tiao-jian-shun-xu-shu-chu/"/>
      <url>/2022/04/02/shu-ju-ku/mysql-zhong-an-zhao-in-tiao-jian-shun-xu-shu-chu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的输出并不会按照 in 条件的 1,3,5,7,9,2,4,6,8,0 的顺数输出，而是按照默认的 id 升序输出，有时候我们会有按照 in 条件 里面的顺序输出的要求。</p><p>这里应该用 order by field 来实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> field<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这绝对有性能问题，这时候我们可以拿到内存里面去做这个排序</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理 VS Cglib动态代理</title>
      <link href="/2022/03/28/java/jdk-dong-tai-dai-li-vs-cglib-dong-tai-dai-li/"/>
      <url>/2022/03/28/java/jdk-dong-tai-dai-li-vs-cglib-dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<p>Cglib不是更强么，为什么有了Cglib还要有JDK动态代理存在的必要?</p><ol><li>final Class 不支持, 因为CGLIB是生成子类来实现 AOP,所以final Class自然无法支持了.</li><li></li></ol><p>JDK动态代理<br>优点</p><ol><li>JAVA自带,JDK原生的,到哪儿都能用。Cglib则需要额外的包来支持。</li><li>支持final类的代理，因为是基于接口的，跟被代理对象是不是final的没有关系。Cglib 不能代理final类，因为Cglib是基于继承来实现的，final类无法被继承，不然String这个类就可以被改来改去了。<br>局限</li><li>一定要有接口,它是基于接口+反射实现的。Cglib不要接口,有个类就能代理。</li><li>速度慢，效率低，因为是基于反射的，所以效率不高。</li></ol><p>Cglib动态代理<br>优点</p><ol><li>不一定需要接口，只要不是final类，就能代理。</li><li>速度快，都这么说，因为没有用反射，而是用字节码增强技术，咱也不知道字节码增强技术为啥这么快。</li></ol><p>局限</p><ol><li>不是JAVA自带的，需要用户自己引入 Cglib的依赖</li><li>不能代理final类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分析I/O模型</title>
      <link href="/2022/03/25/linux/shen-ru-fen-xi-io-mo-xing/"/>
      <url>/2022/03/25/linux/shen-ru-fen-xi-io-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>这篇文章我为什么叫做深入分析I/O模型呢,并不是因为我分析的有多深入,而是因为为了研究清楚这个I/O模型,我确实花了很多时间,查了很多资料。我想大多数人对这一块儿也有疑问,而且网上那些文章看过一遍又一遍之后又会有新的问题,甚至有些文章讲的都是错的还被抄来抄去。我也不确定我写的能否给大家讲明白,姑且先记下来吧。以下都是基于我个人的理解，不代表权威观点，如有疑问可以讨论。</p><p>我们要讲I/O模型,我不像网上的一些文章,上来就讲 阻塞IO、非阻塞IO、信号驱动IO、多路复用IO、异步IO等的原理，也不讲 同步、异步、阻塞、非阻塞 的区别及联系, 更不想讲 多路复用IO中 select、poll、epoll 的三种实现,虽然后面都会讲到。这里我用我写文章惯用的手法，先从字面意思入手，逐渐逐渐引出一些新的概念来。</p><h1 id="啥叫io"><a class="markdownIt-Anchor" href="#啥叫io"></a> 啥叫I/O</h1><p>先上维基百科</p><blockquote><p>I/O（英语：Input/Output），即输入／输出，通常指数据在存储器（内部和外部）或其他周边设备之间的输入和输出，</p></blockquote><p>I/O 指的就是数据在设备上的读写。那这里的设备都有哪些呢？我们初步想一下，磁盘、内存、显卡、网卡、声卡、CPU 等等很多设备我们都可以进行数据的读写或者叫存取。这些设备都或多或少都有一块存储空间可以存取数据，也就是存取我们的0或者1组成的序列。</p><p>那研究如何在这些设备上进行读写，就是我们的I/O模型要讲的东西。I/O 模型就是研究I/O操作具体实现方案的理论。换句话说，I/O模型就是对设备读写的不同方式的实现，不同的实现就对应不同的IO模型。</p><h1 id="设备不是想调想调就能调"><a class="markdownIt-Anchor" href="#设备不是想调想调就能调"></a> 设备不是想调，想调就能调</h1><p>我们从什么设备进行读写就叫什么IO,例如 从磁盘读写数据我们就叫磁盘IO,磁盘上存的大部分都是以文件的形式,所以我们也叫文件IO.从内存读写数据我们就叫内存IO,从网卡设备读写数据我们就叫做网卡IO,说的更通俗一点也叫网络IO,也就是我们研究的那个Socket这个东东。</p><p>但是这些设备不是你想使用你就能使用的，对于计算机来说想 cpu啊、内存、磁盘、显卡啊这些计算机统统视其为资源，这些资源是计算机的宝贵财富，所以要好好保护起来才行，不是你想使用就能使用的。</p><p>要想使计算机运行起来，我们必须要安装一个超大型的软件，叫做操作系统才行，所以操作系统其实是一个软件，这个软件内部有一个核心模块，我们简称为内核(内部的核心代码嘛)。</p><p>一开始我想的很简单,无非就是直接往某个设备的地址里面写入0或1,或者把某个设备的存储空间里面的0或1搬移到另一个设备的存储空间,这不就实现了数据的读写么。但是我这个理解从宏观上看是没错的，但是深入到系统底层来看就行不通了。首先，前面说的 直接 往某个设备的地址里面写0或1 是实现不了的，因为操作系统不允许，或者说操作系统的内核不允许。像 磁盘、网卡、显卡、声卡、CPU 这些硬件设备，不是说你想调就能调用的，我们把这些都看做是操作系统的资源，这些资源之间通过总线连接，通过总线传输数据，数据从一个位置转移(拷贝)到另一个位置，总要有一定的通路才行，不然隔空是传输不了数据的，在计算机内部，通路就是导线，这些导线可能是铜的的也可能是金的，但这些线总起来我们就叫做总线。总线分为 数据总线(主管数据的),控制总线(主管命令的),地址总线(主管位置的)，不在本篇的讨论范畴。</p><p>上面说的这些硬件资源不是你想控制就能控制的，所以说是受保护的。那是受谁保护的呢？谁有这么大的权力呢？这个家伙叫内核，内核是操作系统内的核心(简称内核，哈哈)，而操作系统是一个软件，内核更是一个软件，操作系统可以理解为一个大大的进程，或者说第一个进程，0号进程或者1号进程，随便你怎么叫吧。内核怎么保护这些设备呢，如果你自己要控制某个硬件，比如使蜂鸣器响3下，比如关闭键盘背光灯，至少到目前按照我的理解，必须调用内核提供的接口才可以操作，就跟你调用一个http接口post数据一样，你得调用内核的接口，内核在调用具体的硬件的驱动去控制具体的硬件。那你调用内核的时候，cpu就开始执行内核的代码了，这其中我们就叫做陷落到了内核，或者叫内核切换，内核执行自己的接口的时候，肯定也是需要占用一定空间的，他调用cpu执行方法的时候也是需要保存一些中间数据的，所以内核也是需要一部分内存空间的。这部分内存空间，我们叫做内核空间，注意内核空间依然是受保护的，因为除了内核这部分内存地址谁也访问不了，这里的谁特指的是内核之外的用户，我们叫用户进程，用户进程用的空间我们叫用户空间。这里特意说一点我的理解，我认为，用户进程调用内核接口发起内核调用之后并没有发生进程的切换，还应该是在一个进程上下文当中，内核依然可以访问用户空间的数据，cpu并没有让出进程的控制权，也没有保存进程上下问，更没有进程上下文数据的切换。但发起系统调用有一点比较麻烦，就是内核会校验传入数据和操作的安全性，例如你发起一个系统调用，告诉内核给我把操作系统删除掉，汗，这其实是不允许的。然后每发起一次系统调用就进行一次数据校验等巴拉啦一大推校验工作（具体我也不知道是啥）。所以，用户进程其实都很讨厌发起系统调用，因为发起系统调用后，要么等，要么等，要么等，等他一坨没有必要的校验工作(当然这是用户进程的想法)，还不如我直接控制来的爽。就好像你写了个函数，里面会校验入参是不是为空，但我调用的时候明明知道自己不会给函数传空，但是每次调用时候又不得不浪费一点判断参数是否为空的时间，一次两次还好，如果我调用10000次这个函数呢?</p><h1 id="我们怎才能读设备里面的数据"><a class="markdownIt-Anchor" href="#我们怎才能读设备里面的数据"></a> 我们怎才能读设备里面的数据</h1><p>这里我们以读数据为例子，这个设备我假设为磁盘，而我要读取的数据静静的躺在磁盘上的某个文件中。我要把这个文件的内容赋值给我定义个一个字符串变量。如果要让我自己设计一套实现方案，我可能想到的就是直接把磁盘上的数据通过cpu一点一点地搬移到我的用户空间的内存中，然后继续执行后面的代码。 这样何其简单啊。</p><p>但是可是可但是，从磁盘读取数据到内存特别的慢，而且如果一个文件要读取多次，则慢上加慢。所以操作系统并不是这么干的，一般遇到这种存取速度不匹配的情况，例如 cpu比内存快，内存比磁盘快的情况，我们一般是搞一个中间层缓存，类比如 redis 和mysql . mysql 很慢(相对于redis来说)，我们就用redis来屏蔽这种差异。那操作系统怎么做的呢?</p><p>第一种方式叫 缓存IO,又叫Buffer IO. 可以理解为在内核空间中申请一部分空间，作为底层磁盘这种慢介质的缓存，有了缓存，我们先从缓存读取，如果有则很快返回，如果没有我们再去磁盘读取，注意这里和redis+mysql 不同，redis+mysql 是先读取到用户空间，在回写redis，因为是用户进程去读mysql而不是redis去读mysql的. 但是在操作系统层面，是内核发起磁盘读取而不是用户发起磁盘读取的，所以数据是先到内核空间，然后用户进程才来读取数据的。所以但凡是这这种形式，在用户进程和存储介质中内核明目张胆的加了一个缓存层的都可以叫做缓存IO，这个阶段你还拿内核没有办法，这是最开始操作系统读写文件方式，因而已经成为一种标准，故这种方式也叫标准IO. 所以说缓存IO,Buffer IO,标准IO 都是一个意思。我们要把数据从一个地方搬移到另一个地方，中间是需要经过cpu一点一点搬移的，你可以理解为，cpu一会执行一点指令，把数据拷贝到cpu的缓存，在把cpu缓存中的数据转移到指定的位置，就完成了一次文件的读写操作。</p><p>注意这里说的缓存IO或者Buffer IO 或者标准IO，并不是Linux 的IO模型。IO模型要从同步、异步、阻塞和非阻塞的角度去说，这中只能叫读取设备的方式，方式就是加了一个缓存层。那加了这个缓存层肯定有好有坏，好就好在它是一份缓存嘛，屏蔽了内存和磁盘操作的速度差异嘛。为什么加了一层缓存就屏蔽了这个速度差异呢?如果第一次查询没有命中缓存，你是不是还得去底层磁盘查询，底层磁盘还是很慢，所以第一次查询没有命中缓存这个速度差异是屏蔽不掉的，该慢还是慢。但是下一次查询呢，不就快了么。不过我既然已经读到我用户空间了，为什么还要费劲再去磁盘查询一下呢,这不是多此一举么。所以这个二次查询的优势其实也不算太优势，如果你在程序中把一个文件的内容读到了一个file中，你每次读取的时候拿难道都从磁盘在读取一遍么。那样太蠢了。那它肯定还有另外的显著的优势，就在于内核读取磁盘缓存的时候其实并不是只读你想要读取的那个空间的内容，而是把你想读的空间的内容附近的内容也都读出来，这样下次你读取该空间附近的空间的时候就可以直接命中缓存了，这样做是根据了一个叫做局部性原理的原理来设计的。所以才能显著提高访问速度，其底层就是把多次内核向磁盘读取数据的IO变成了一次磁盘IO。</p><p>但是我觉得这根本不成立，因为用户进程和内核的速度差异是屏蔽了，但是内核和磁盘读写还是有速度差异啊，还是很慢吧，所以我认为这个好处并不成立。我理解他的好处就和redis一样，你之后读取的时候会很快，但是这一点我也觉得不算是太大的有点，因为我既然都已经读取到用户空间了，我干嘛还要在单独读一遍内核空间中的缓存呢，我直接操作我用户空间内存不行么。</p><p>缓存 I/O 使用了操作系统内核缓冲区，在一定程度上分离了应用程序空间和实际的物理设备。 我也不觉得这种区分有什么好的。<br>缓存 I/O 可以减少读盘的次数，从而提高性能。这一点我还是同意的，下次在调用的时候确实不用再读取一遍磁盘了。</p><p>未完待续，明天再写…</p><p>鉴于buffer io ,还要搞一个内核缓冲区，数据需要从磁盘先拷贝到内核缓冲区，然后在拷贝到用户缓冲区，这其中就要经历两次拷贝，而且两次拷贝中存储的数据都是一样的。</p><h2 id="dma-直接存储器访问"><a class="markdownIt-Anchor" href="#dma-直接存储器访问"></a> DMA （直接存储器访问）</h2><p>百度百科</p><blockquote><p>DMA(Direct Memory Access，直接存储器访问) 是所有现代电脑的重要特色，它允许不同速度的硬件装置来沟通，而不需要依赖于 CPU 的大量中断负载。否则，CPU 需要从来源把每一片段的资料复制到暂存器，然后把它们再次写回到新的地方。在这个时间中，CPU 对于其他的工作来说就无法使用。</p></blockquote><p>可以想象MDA方式中有另一个cpu,专门负责数据的拷贝转移，这样cpu就可以空闲出来了嘛</p><h1 id="linux-io-与-java-io"><a class="markdownIt-Anchor" href="#linux-io-与-java-io"></a> Linux IO 与 Java IO</h1><p>Linux IO 其实指的是更为底层的IO, 而Java IO更多的是指应用层的IO,所以说Java 的IO 模型的实现其实是依赖底层的Linux IO的实现的。<br>Linux IO 有5种,分别叫 阻塞IO、非阻塞IO、多路复用IO、信号驱动IO、异步IO. 但java只支持其中的三种，Java IO的分类分别叫 BIO、NIO、AIO<br>其中 <code>BIO</code> 对应 Linux IO 中的<code>阻塞IO</code>实现; <code>NIO</code>对应的其实是 Linux IO中的<code>多路复用IO</code>;<code>AIO</code> 则对应LINUX IO中的<code>异步IO</code>,这一点一定要记清楚,否则后面的概念容易混淆。</p><h1 id="linux-io-模型"><a class="markdownIt-Anchor" href="#linux-io-模型"></a> Linux IO 模型</h1><p>上面说到 Linux IO 有5种,分别叫 阻塞IO、非阻塞IO、多路复用IO、信号驱动IO、异步IO。我们思考一下几个问题<br>服务器如何读取网络上传递过来的一条消息的-&gt;首先两台服务器之间进行3次握手建立连接,你可以想象,你的计算机上运行着一个叫tcp的软件,这个软件呢可以打开某个端口,所谓打开端口,就是说可以通过这个端口接收到网络上定向发送给该端口的0101的数据。当网络上的数据通过该端口发送过来消息的时候，其实就是当第一个高电平传输过来的时候,这个tcp软件就会被cpu叫醒,cpu为什么去叫醒tcp软件是因为高电平传过来的时候给了操作系统一个信号中断,然后这个tcp软件发现有数据到达,于是在计算机上申请一块儿内存用于记录通过该端口传过来的数据,这块儿内存其实就是一个socket,他像个插座一样连接你的应用程序和网络上的数据,同时为了表示一个socket我们像上面提到的文件系统申请了一个文件描述符,文件描述符表面上像一个数字，其实背地里它代表一种数据结构的。而我们的应用程序要读取到网路中传输过来的数据，其实就是从这个socket中读取数据。但是我们在向socket读取数据读不到的时候采取什么样的策略决定了我们属于什么模型。</p><h2 id="阻塞io"><a class="markdownIt-Anchor" href="#阻塞io"></a> 阻塞IO</h2><p>我们从头捋一遍我们应用程序从启动到接收数据的过程,首先我们应用程序先调用系统方法去监听某个接口，所谓监听其实就是告诉操作系统当有数据从我监听的端口经过的时候，你通知我这个应用程序而不是其他的应用程序，这就是为什么我们一个应用占用一个端口的时候其他应用是无法再继续监听该端口的，会报出端口冲突的异常。当有连接进来的时候，操作系统会响应中断，然后进而去通知我们的server，说有链接来了，你可以继续执行了。于是我们的应用server就会开始准备去读数据，这时候你会发现从流中读数据的时候，又发生了一次阻塞，我们的应用程序就阻塞在哪里等着数据的到来，其实也是跟操作系统说，我现在要读数据了，不过系统说好的那你等着吧，我准备好了告诉你，这时候客户端的数据一点一点到达服务器，等最后一个数据包到达后，我们的操作系统就把数据返回给我们的server,然后server就可以继续执行了。 这种模式就叫阻塞IO, 在阻塞IO中我们的server阻塞了两次，一次在listen的时候（accept 的时候方法内部最后会调用litsent）等着链接的到来，一次在 read数据的时候，从流中读数据的时候会发起系统调用也会阻塞一次。</p><p>阻塞IO最符合我们人类的思维习惯。这里的阻塞IO全称应该叫做同步阻塞IO。</p><h2 id="非阻塞io"><a class="markdownIt-Anchor" href="#非阻塞io"></a> 非阻塞IO</h2><p>非阻塞IO ,这里指的非阻塞是第二次我们从InputSteam里面读数据的时候，不阻塞。也就是我们发起系统调用用InputStream中读取数据的时候，操作系统说好的，我知道了，但是现在没办法给你数据，你在后面慢慢准备，你该干啥干啥去，至于什么时候准备好，你自己一会来看吧。于是我么应用程序每隔一会儿就得询问一下操作系统，数据准备好了没有，如果好了，那就直接取到了，如果没有准备好，我们就再做会儿其他的事情，过一会儿再来看看，但是这个间隔隔多久呢，就要你自己负责了，隔得久了取数据不及时，隔得短了，数据还没准备好，总之很纠结，要是为了这个场景在开发出一个动态获取数据的时间间隔的算法又有点得不偿失了。<br>这就是非阻塞IO,非阻塞IO,就是告诉操作系统你去给我准备数据吧，然后自己可以干一点其他的事情，利用率稍微有点提高，但是不够及时。全称应该叫同步非阻塞IO。</p><h2 id="信号驱动io"><a class="markdownIt-Anchor" href="#信号驱动io"></a> 信号驱动IO</h2><p>信号驱动IO,其实应该是非阻塞IO的变动版本，就是获取数据的时候，同样是非阻塞，但是但是不用时不时的取轮询获取是否准备好了，因为一旦数据准备好了，就会通过信号的方式通知应用线程，应用线程下次切换回来的时候就会发现自己信号列表有个信号，先响应这个信号，发现是数据准备好了，于是就去取数据，把轮询交给了操作系统的系统调度的时候做。这就是信号驱动的读取数据的过程。信号驱动也是同步的，全称应该叫同步信号驱动IO</p><h2 id="多路复用io"><a class="markdownIt-Anchor" href="#多路复用io"></a> 多路复用IO</h2><p>上面无论是阻塞IO还是非阻塞IO，都是一个线程既负责管理链接到来的事情，又要负责数据读取的事情，一条道走到黑，为了多连接，那就得多个线程。但是我们知道线程可不是越多越好。于是人们先要我们能不能让一个线程来处理多个链接呢？也就是能不能复用这线程，这里的多路复用指的就是多路数据读取线程复用一个链接管理线程。因为好多时候，我们的链接后并不一定就发送数据，用阻塞IO还是非阻塞IO，都得等。要是能在数据准备好的时候或者链接准备好的时候，在告诉我们好了，那就好了，这样处理问题就连起来了，你告诉操作系统，有链接的时候你叫我，我先去干别的事情，有数据的时候教我，我先去干别的事情，我很忙的。于是就变成了，这样一种方式，我们有一个线程，每来一个链接我们往我的一个数组里面放，然后我会在数据准备好的时候，扫描一下所有的数组，把所有的准备好的链接或者数据返给应用，应有就可以继续处理了，这样就用一个线程管理了多个线程，其实就是有链接的时候先链接，然后记录下来，在后面某个时刻触发一下一次性吧准备好的数据返回，规避了应用反复发起系统调用的情况。但是多路复用还是会有阻塞的，会阻塞在selector的select方法。只不过这个select可以返回多个还准备好的链接，对于没有准备好的，是不会返回的。</p><p>跟传统的阻塞IO不同，IO复用可以阻塞在多个socket文件描述符上。当其中任何一个socket有数据可读的时候（或者超时），IO复用的函数(select, poll，epoll)才会返回。然后进程可以逐一处理可读的socket文件描述符。</p><p>多路复用也是同步的，所以全称应该叫做 同步多路复用IO。多路复用</p><h2 id="异步io"><a class="markdownIt-Anchor" href="#异步io"></a> 异步IO</h2><p>异步IO才是真正的异步，因为发起系统调用后，告诉操作系统，你给我准备数据，准备好之后，你调用的某某方法处理数据。自己完全不管了。这就是真正的异步IO，全称应该叫异步非阻塞IO。 那异步阻塞IO呢？没有人会有异步阻塞IO这种方式的，那不是傻么。明明可以去干点其他时候，愣子在那儿等着。数据也不需要你自己处理，你等着干啥，还不如直接退出呢。</p><h1 id="多路复用的-select-poll-epoll-实现"><a class="markdownIt-Anchor" href="#多路复用的-select-poll-epoll-实现"></a> 多路复用的 select、poll、epoll 实现</h1><p>select 对文件描述符的大小有限制，poll打破了这种限制的上线，但是文件描述符需要来回在用户空间和内核空间拷贝，epoll更是没有上限，但是比poll多的功能就是把感兴趣的事情给你分好了类，而且减少了拷贝。</p><h1 id="java-io-模型-与linux-io-模型的对应关系"><a class="markdownIt-Anchor" href="#java-io-模型-与linux-io-模型的对应关系"></a> Java IO 模型 与Linux IO 模型的对应关系</h1><p>Java 的IO 模型肯定不是自己独创的，他一定依赖操作系统提供的能力！<br>JavaIO 模型只有三种<br>BIO 阻塞IO,对应linux的阻塞IO实现<br>NIO 对应Linux 的多路复用IO<br>AIO 对应Linux 的异步IO</p><h1 id="同步-异步-阻塞-非阻塞"><a class="markdownIt-Anchor" href="#同步-异步-阻塞-非阻塞"></a> 同步、异步、阻塞、非阻塞</h1><p>上面说了 linux IO 里面除了 异步IO 是真正的异步外，其他都是同步，因为请求完成后，数据是有应用线程自己取的，这就是同步的概念，只要数据不是操作系统自己送过来，那就是同步的，只要是操作系统自己主动的送过来，而自己不需要关心，只关心通知操作系统说我要数据，那就是真正的异步了。</p><p>阻塞和非阻塞就看自己跟操作系统要数据之后，是不是在哪儿等，无论是因为操作系统没准好无法返回导致的我们等，还是因为选择的在哪儿等，只要有等的动作那就是阻塞的，否则就是非阻塞，无论数据好没有，被调用这立马返回说我知道了，那即是非阻塞的。</p><p>都是定义不必死记。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么说32位操作系统的最大寻址空间是4G</title>
      <link href="/2022/03/22/ji-suan-ji/ji-suan-ji-ji-chu/wei-shi-me-shuo-32-wei-cao-zuo-xi-tong-de-zui-da-xun-zhi-kong-jian-shi-4g/"/>
      <url>/2022/03/22/ji-suan-ji/ji-suan-ji-ji-chu/wei-shi-me-shuo-32-wei-cao-zuo-xi-tong-de-zui-da-xun-zhi-kong-jian-shi-4g/</url>
      
        <content type="html"><![CDATA[<p>为什么说32位操作系统的最大寻址空间是4G？而64位操作系统的最大寻址空间是8G呢？</p><p>32/64为操作系统你可以理解为有32/64跟铜线，每根铜线可以通电或者不通电，通电代表1，不通电代表0，那么32/64根线可以组合出来的数，用数据里面的组合原理，就可以得出一共有2<sup>32/2</sup>64种情况，如果每一种情况代表一个内存的一个字节的话，那么可以有2<sup>32/2</sup>64次方个字节，也就是2<sup>32B/2</sup>64B，正好等于4G/8G。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal究竟为什么诞生</title>
      <link href="/2022/03/22/java/threadlocal-jiu-jing-wei-shi-me-dan-sheng/"/>
      <url>/2022/03/22/java/threadlocal-jiu-jing-wei-shi-me-dan-sheng/</url>
      
        <content type="html"><![CDATA[<p>我们都知道Java中有一个ThreadLocal类,但是你知道它为什么会被设计出来么,那它究竟解决了什么问题,在什么场景下使用呢?</p><p>首先我们先设想一个问题<br>我在a方法中有一个变量,我想在b方法中打印，我该怎么做</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> uuid<span class="token operator">=</span><span class="token string">"02ED1C90-F75B-4A06-89E7-EE0451F4BABC"</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] a 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> uuid<span class="token operator">=</span><span class="token punctuation">;</span> <span class="token comment">//这里我改怎么获取到a方法中的变量uuid呢</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] b 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是我们想到了第一种解决方案<br>a 方法调用b 方法，然后把这个变量传进去嘛<br>于是就大概就编程了这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> uuid<span class="token operator">=</span><span class="token string">"02ED1C90-F75B-4A06-89E7-EE0451F4BABC"</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] a 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token class-name">String</span> uuidFromA<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> uuid<span class="token operator">=</span>uuidFromA<span class="token punctuation">;</span> <span class="token comment">//这里我改怎么获取到a方法中的变量name呢</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] b 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题解决了么,当然。那如果 c ,d ,f 等函数也要做这样的操作呢,你怎么做，每个方法都加一个参数么，而且这个参数很可能是跟业务无关的。<br>然后你就会发现你的getUserNameById(String uuid,int id) 里面多了一个叫 uuid的业务无关的传参,是不是很别扭呢。而且调用的地方也不一定就能获取到这个参数,会让调用者很困惑，明明只需要一个id字段就好了，而且你的函数名也写的是ById,干嘛还要我传一个无关的 uuid 过去，设计一点都不专业啊。</p><p>那好，于是我们就产生了第二种解决方案<br>全局变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> uuid<span class="token operator">=</span><span class="token string">"02ED1C90-F75B-4A06-89E7-EE0451F4BABC"</span><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] a 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> statis <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] b 方法执行了"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是感觉清爽多了，问题解决了么,当然！但是，可是，可但是，只要用到全局的静态变量，就要很小心，你要看看这个静态变量是不是在其他的类中或者其他service中也会是使用，如果是就要设置为 public 如果不是就要设置为 private，另外还要关注这个变量是不是能被其他地方修改，还是只是被读取，而不会并发修改等等之类的问题。此外你还要注意，这个static 的全局的变量一旦初始化就会永久留在内存中，注意是永久，除非你手动的释放，否则gc也很难回收它，至少我到目前学到的jvm没有回收静态变量的，因为静态变量是跟随类实例化而产生，跟随类的消亡而消亡的，我还没见哪个类加载之后过一点时间还会销毁的。</p><p>好，现在问题升级，如果这个uuid 要随线程产生而产生，随线程消亡而释放(节约空间吗，只在线程中使用，不会永久驻留在内存中)。如何来解决上面提到的问题。</p><p>于是自然而然的我们想到只需要在线程初始化的时候,在线程对象里面(没错，线程也是一个对象，而且是一个占用空间不小的对象，Java中特意封装了一个类叫Thread用以映射操作系统的一个线程，其实说到底还是进程)保存一个变量，这个变量可用在线程的任何地方都访问到。<br>于是我又灵光一闪，想到了一个方案，我可以改写 Thread 类，然后让Thread类里面包含一个 HashMap 结构，用来存储我先搞在线程上线文中传递的变量，于是就变成了这样的设计。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> locals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putLocal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>locals<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> locals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Main2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> uuid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextThread</span> uuid0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextThread</span> uuid1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"12345222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> uuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我上面自定义的 ContextThread ,也能实现保存变量的目的, 然后 每个变量也只在 当前线程的上下文中有效。为什么JDK的作者们不在Thread里面放一个HashMap呢？你要说HashMap 不够线程安全，那可以用ConcurrentHashMap呀。重点就在于这样设计的话，如法做到变量的隔离，因为我们还可以写出这样的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Main2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> uuid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextThread</span> uuid0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextThread</span> uuid1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"12345222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意这里</span><span class="token class-name">ContextThread</span> uuid3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"12345222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid0<span class="token punctuation">.</span><span class="token function">putLocal</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uuid3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> uuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextThread</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 <code>ContextThread uuid3 = ... </code> 这个线程里面居然改动了 uuid0线程里面的uuid的值，变量不隔离了。而且我们不得不写putLocal(k,v)这样丑陋的代码。</p><p>那就只能在换个方式设计了，要求也就更明确了</p><ol><li>本地变量必须做到线程隔离，也就是另个线程看不到其他线程里面同名的变量值。</li><li>本地变量的写法必须的优雅，语义必须得明确</li><li>要能保证线程安全，因为已经线程隔离了，就不会共享，自然就线程安全了。</li></ol><p>所以Java的开发大牛们就提前在设计Thread类的时候设计出来了这个变量。所以，ThreadLocal就是解决这个问题。目的就是为了在各自的线程里面共享一个变量或几个变量，你要共享几个，你就创建几个ThreadLocal对象，这样的好处就是避免了创建一个线程外的对象所要考虑的并发问题了，因为threadLocal都只是某一个线程里面自己的变量了，随便你怎么取值，怎么修改都不会影响其他的线程里面的值。</p><p>我们看Thread 中 本地变量的实现代码的时候，我们先看这个地方，大概在181行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/* ThreadLocal values pertaining to this thread. This map is maintained     * by the ThreadLocal class. */</span><span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们发现他是一个叫做ThreadLocal.ThreadLocalMap的一个数据类型，我们先不着急进到 ThreadLocal.ThreadLocalMap 这个类里面，我们先看一下这个变量threadLocals我们就知道，原来在每一个线程里面还有一个隐藏的私有变量叫 threadLocal ，他的类型是 一个类似map的东西。我们要在脑海中构建出这样一个常见，一个线程，里面有一个map。</p><p>然后我们在进入到ThreadLocal类。重点去看他的api 中的 get方法和set方法，至于为什么先看这个（也是别人教我的，没有为什么）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Sets the current thread's copy of this thread-local variable     * to the specified value.  Most subclasses will have no need to     * override this method, relying solely on the {@link #initialValue}     * method to set the values of thread-locals.     *     * @param value the value to be stored in the current thread's copy of     *        this thread-local.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，先获取当前线程，Thread.currentThread(); 这里获取到的是当前应用上下文所在的线程的对象实例，就是原原本本的当前线程。<br>然后 getMap(t) ，把当前线程t当参数传递进去了，获取的是当前线程，也就是上面我们脑海中构建的那个map结构。这里是关键，因为获取的是当前线程的，那么每次set的时候，其实都是操作的自己线程的map，而不会影响其他线程里面的map. 因为线程是隔离的，那线程里面的变量自然也是隔离的。<br>如果map没有实例化就实例化一个，如果实例化了，就把 k=this 和 v=value 添加到那个数组里面。回头取的时候，也一定是取当前线程的当前map中按照k=this取。<br>这里的this指的第我们自己定义的那个ThreadLocal 变量,不是线程也不是其他，这一点要注意一下。</p><p>所以我们可以想象一下，实际上根本不是 threadLocal这个对象里面存储了某个value，其实你操作的还是线程的一个内部对象，这个对象是一个map.底层是KV结构。而threadLocal 仅仅是在充当一个key 罢了，所以我们完全可以自己设计实现一个对象也同样实现类似的功能，然后放到我们自定义的线程对象中去。</p><p>所以，get方法，闭着眼睛也能想到，肯定是先获取当前线程对象，然后获取当前线程对象map,然后把threalLocal对象的应用作为key去map中查找，找到就返回，没有找到要么异常，要么返回为空，肯定跑不了。</p><p>我们去看一下get方法的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然，无出其右。其他逻辑像 setInitialValue 就自己看吧，不在主流程里面。</p><p>这个是最基本的ThreadLocal. 如果细心一点我们可以看到 ThreadLocal 是有很多子类的，既然有继承了，那肯定不同的子类都实现不同的ThreadLocal的一些方法，他们之间是有差异的，例如 TerminatingThreadLocal 、InheritableThreadLocal 等等，说实话我只知道InheritableThreadLocal用在父子类继承上，没有实际用过，以后再研究吧。</p><h1 id="threadlocal-内部实现"><a class="markdownIt-Anchor" href="#threadlocal-内部实现"></a> ThreadLocal 内部实现</h1><p>ThreadLocalMap 和HashMap的功能类似，但是实现上却有很大的不同：</p><ol><li><code>HashMap 的数据结构是数组+链表</code> but <code>ThreadLocalMap的数据结构仅仅是数组</code></li><li><code>HashMap 是通过链地址法解决hash 冲突的问题</code> but <code>ThreadLocalMap 是通过开放地址法来解决hash 冲突的问题</code></li><li><code>HashMap 里面的Entry 内部类的引用都是强引用</code> but <code>ThreadLocalMap里面的Entry 内部类中的key 是弱引用，value 是强引用</code></li></ol><p>ThreadLocalMap的数据结构仅仅是数组的原因是因为其解决Hash冲突的方法决定的，采用的叫开发地址发的冲突解决方案。如果用拉链法，才会在遇到冲突的会后采用链表的结构，其他解决冲突的手段一般都是用数组。<br>解决冲突的手段包括 拉链法、开放地址发、再哈希 等。其实在hash也算是开放地址法的一种。就是我遇到冲突的时候我在hash一把，直到找到一个能够盛放值的位置位置。</p><p>为什么ThreadLocalMap 采用开放地址法来解决哈希冲突?<br>jdk 中大多数的类都是采用了链地址法来解决hash 冲突，为什么ThreadLocalMap 采用开放地址法来解决哈希冲突呢？首先我们来看看这两种不同的方式</p><p>链地址法</p><blockquote><p>这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。</p></blockquote><p>开放地址法</p><blockquote><p>这种方法的基本思想是一旦发生了冲突，就去寻找下一个空的散列地址(这非常重要，源码都是根据这个特性，必须理解这里才能往下走)，只要散列表足够大，空的散列地址总能找到，并将记录存入。</p></blockquote><h5 id="链地址法和开放地址法的优缺点"><a class="markdownIt-Anchor" href="#链地址法和开放地址法的优缺点"></a> 链地址法和开放地址法的优缺点</h5><h6 id="链式地址法hashmap"><a class="markdownIt-Anchor" href="#链式地址法hashmap"></a> 链式地址法（HashMap)</h6><p>优点：<br>  处理冲突简单，且无堆积现象，平均查找长度短；也就是说遇到冲突我就网链表的头上添加，因此简单，只要hash函数设计合理，那就不会出现堆积，因此查找速度也快。<br>  链表中的结点是动态申请的，适合构造表不能确定长度的情况；如果不停的向map里面存值，只是冲突越来越多，但是只要往链表里面加就行。</p><p>缺点：<br>  指针占用较大空间时，会造成空间浪费。</p><h6 id="开放地址法threadlocalmap"><a class="markdownIt-Anchor" href="#开放地址法threadlocalmap"></a> 开放地址法：(ThreadLocalMap)</h6><p>优点：<br>  当节点规模较少，或者装载因子较少的时候，使用开放地址法较为节省空间。</p><p>缺点：<br>  容易产生堆积问题；<br>  不适于大规模的数据存储；<br>  插入时可能会出现多次冲突的现象，删除的元素是多个冲突元素中的一个，需要对后面的元素作处理，实现较复杂；</p><p>总体来说拉链法比较简单因此Java中大都用此手段，但是在本地变量这种场景下，JDK的先辈们考虑的可能跟深远吧。</p><p>ThreadLocalMap 采用开放地址法原因</p><ol><li>ThreadLocal 中看到一个属性 HASH_INCREMENT = 0x61c88647 ，0x61c88647 是一个神奇的数字，让哈希码能均匀的分布在2的N次方的数组里, 即 Entry[] table，关于这个神奇的数字google 有很多解析，这里就不重复说了</li><li>ThreadLocal 往往存放的数据量不会特别大（而且key 是弱引用又会被垃圾回收，及时让数据量更小），这个时候开放地址法简单的结构会显得更省空间，同时数组的查询效率也是非常高，加上第一点的保障，冲突概率也低</li></ol><p>ThreadLocalMap的Entity为什么要集成WeekReference,使其key被弱引用对象指向。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StackOverFlow vs OutOfMemeroy</title>
      <link href="/2022/03/21/java/stackoverflow-vs-outofmemeroy/"/>
      <url>/2022/03/21/java/stackoverflow-vs-outofmemeroy/</url>
      
        <content type="html"><![CDATA[<p>StackOverFlow , 叫做 栈溢出， 从名字就可以看出来，明显跟 栈 这种数据结构有关。</p><p>我们知道 Java 是运行在 JVM 上的，JVM 又是基于栈 的虚拟机，这里为什么说JVM 是基于栈的呢，那就是因为，JVM 在运行的时候会给每一个Java线程分配独立的栈空间，或者说每个Java线程在创建的时候会向JVM申请自己的栈空间。所谓栈就是一个先进先出的数据结构，其实就是一块单独的空间，我们规定这个空间里的数据只能先进先出，后进后出而已。这个栈，是有一个个的栈帧组成的，你可以理解为，有一个空间，空间有一堆大小固定的格子，这格子你先不管盛的是啥，总之这些格子就组成了一个栈空间。每一个格子就代表这一个方法，格子的入栈和出栈就代表这一个方法的进入和返回。方法的执行就是对这个格子里面存储的空间进行读写的过程。栈帧里面存放着 局部变量表、操作数栈、动态链接、方法的返回地址。这里面的操作数栈就是方法运行过程中存放临时变量的地方，就是所谓 JVM 是基于栈 的虚拟机。那肯定有不是基于栈的JVM，比如 android 系统用到的 Dalvik 就是基于寄存器的，在这类JVM中也是一个线程单独分配一个栈空间，但是这个占空间里面没有操作数栈，而是几个寄存器，所有的操作结果都会写回对应的寄存器而不是栈。</p><p>StackOverFlow 栈溢出指的是JVM给线程分配的这个线程栈的溢出，注意操作数栈是不会溢出的，因为操作数栈的大小在你写完方法的时候就已经确定需要多少了。如果一个线程的线程栈，不停的被压栈，比如递归，你会发现最后一个栈帧进不去了，因为这个栈的大小是一定的，盛不开了，那就只能溢出了。</p><p>OutOfMemeroy，叫做内存不足，从名字就可以看出出来，明显是跟 内存 有关的。我们的程序总是要想操作系统申请空间的，如果申请空间的时候，操作系统告诉你空间不够了，那就叫 OutOfMemeroy。</p><p>所以对于内存不足的时候是抛出 栈溢出还是 内存不足，首先要看 内存不足的地方是不是栈，如果不是栈，那一定不会是栈溢出，一定是oom。如果是栈，那再看这个栈空间是不是支持动态扩展，如果不支持动态扩展，然后栈不够用了，那就是stackoverflow，如果支持动态扩展，但是在向操作系统申请的时候，操作系统说没有了，那也不叫栈溢出，而叫内存不足，如果支持动态扩展，但是已经扩展到分配的最大值了，但这时候栈还是不够用，那就叫栈溢出了。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发学习笔记</title>
      <link href="/2022/03/15/java/java-bing-fa-bian-cheng/bing-fa-xue-xi-bi-ji/"/>
      <url>/2022/03/15/java/java-bing-fa-bian-cheng/bing-fa-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是我在学习并发相关知识的时候做的笔记,现重新整理记录以备不时之需。</p><h1 id="计算机的发展"><a class="markdownIt-Anchor" href="#计算机的发展"></a> 计算机的发展</h1><p>软件技术的发展源于硬件性能的提升，从继电器到真空管到电子管到晶体管再到集成电路，我们的计算机也越来越小，我们的外设也越来越多越来越精巧。但终归逃脱不了冯诺依曼结构：计算机由 输入设备，控制器、运算器、存储器、输出设备 5部分组成，5大部分之间通过总线通信(交换信息)，彼此之间协调工作共同完成计算任务。我们把 运算器和控制器 合起来叫中央处理单元，也就是CPU。我们把寄存器、内存、硬盘等具备存储功能的设备统称为存储器。不要以为通用计算机模型只有 冯诺依曼结构，计算机发展的历程中还出现过一种被称之为 哈佛结构的通用计算机模型，它与 冯诺依曼结构的不同之处仅仅在于是不是把数据和指令存储在一起，如果存储器分成数据存储器和指令存储器，那就是哈佛结构，否则就是冯诺依曼结构。哈佛结构的好处就是可以实现指令和数据处理的并行，提高计算机的处理速度，但是也更消耗空间，同时计算机的设计复杂度也会有所提高，因此哈佛结构一般用在一些高精尖的计算机设计领域，而冯诺依曼计算机结构则以其设计简单而著称，一直沿用至今。</p><center>  <img src="/2022/03/15/java/java-bing-fa-bian-cheng/bing-fa-xue-xi-bi-ji/计算机结构.jpg"></center>硬件技术发展的同时，软件技术开始发展，出现了程序员，程序员为了方便的控制计算机的各个硬件，开发出了操作系统，至此才能谈及并发相关的概念。先说一下我的理解，并发的概念是在有了操作系统之后才有的概念，为了实现计算任务的并发，提高系统的资源利用率才有了进程的概念，由于进程分配资源实在太宽泛了，操作系统在进程维度分配资源还是不够精细，因此才衍生出了线程，由于多线程之间会有频繁的上下文切换，不停的保存一个线程的现场然后加载另一个线程的现场，才发明了协程也叫纤程。一切都是为了并发，而并发又是为了提高系统的资源利用率(每时每刻我的设备都没有闲着)进而提高任务的执行速度。<h2 id="进程-线程-协程"><a class="markdownIt-Anchor" href="#进程-线程-协程"></a> 进程、线程、协程</h2><p>操作系统出现后，才有了进程的概念，有了进程才能谈及并发，因为并发一开始就是用在进程上的。操作系统把 cpu、内存、磁盘、键盘、显示器、扬声器等设备统统视为资源，一个任务总是要占用这些资源的，那多个任务总是要争用这些资源的，为了让任务并发有序的运行直至完成，操作系统需要协调各个任务如何占用资源，因此操作系统把任务封装成一个一个的进程，并设计一个唯一标识，叫进程ID。这些进程共享计算机的硬件资源，例如上面提到的cpu、内存、键盘、扬声器等。由于进程分配资源实在太宽泛了，为了把任务拆分的更细，才衍生出了线程，任务拆的越细越容易并行。至少目前为止，cpu真正具体运行的是线程，占用cpu的一定是某个进程的某一个线程。</p><p>cpu很公平，晶振按照一定的频率发出脉冲，经过倍频器之后，cpu以某个固定的频率驱动内部的元器件。按照一定的时钟周期一会儿执行A进程的a1线程，一会又执行A进程的a2线程，一会儿又去执行B进程的b1线程了，周而复始，所以cpu总是忙碌的，其他资源也都是忙碌的，这样资源就能得到很好的利用，不会有闲置的资源。由于线程切换很快所以看起来任务好像是在并行执行，cpu被多个线程以抢占的方式占用着，线程来回切换，每次切换都需要把当前线程的状态保存下来，再加载下一任务线程的状态后，继续服务于下一任务线程，所谓状态其实就是一个线程运行过程中的中间数据，那数据保存在哪儿呢？保存在内核空间，这个我们后面再讲操作系统的时候再讲什么是内核空间什么是用户空间。这个线程切换的过程我们叫线程上下文切换，如果一个线程切换到了另一个进程的线程的时候就发生了所谓的进程上线文切换，在保存线程状态的时候还要额外保存一部分进程的状态，所以进程的上下文切换比单纯的线程上下文切换更加耗时和耗费空间。要知道上下文切换是需要时间的，当频繁切换带来的耗时大于线程执行任务的耗时的时候，就得不偿失了，为了解决这一问题就发明了协程，协程其实是在一个线程里面执行的程序，只不过可以响应中断而已，本质上还是顺序执行的，放心，java早晚也会支持这种方式的。这就是进程、线程、协程在计算机上的执行方式。</p><p>总结一下</p><ol><li>进程是计算机分配资源的最小单位</li><li>线程是cpu执行的最小单位</li><li>线程|进程切换我们成为上下文切换，切换的时候需要保存现场</li></ol><h2 id="并行-并发"><a class="markdownIt-Anchor" href="#并行-并发"></a> 并行、并发</h2><p>并发：就是任务同时发生，但发生后并不一定能同时执行，也可能交替执行。例如在单核cpu上，多个线程就是交替占用cpu的。<br>并行：就是任务同时执行，这个是真正意义上的同一时刻执行多个任务。</p><p>这里咬文嚼字没有意义，以后无论说并发还是并行，你都可以笼统的理解为同时执行。</p><h1 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h1><h2 id="线程的创建"><a class="markdownIt-Anchor" href="#线程的创建"></a> 线程的创建</h2><p>Java 中线程的创建有两种方式，记住只有这两种方式，但是有多种写法，不过都逃不出这两种形式。</p><ol><li>继承Thread类然后重写run方法，先后创建该线程子类对象。</li><li>实现Runnable接口然后实现run方法，然后创建该子类对象并作为参数传入Thread构造方法。</li></ol><p>第一种方式</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package main;public class Main {  public static void main(String[] args) {    Thread thread = new MyThread();  }}class MyThread extends Thread{  @Override  public void run() {   //任务逻辑  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">new Thread() {      @Override      public void run() {        //任务逻辑      }}.start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package main;public class Main {  public static void main(String[] args) {    Thread thread = new Thread(new MyRunnable());  }}class MyRunnable implements Runnable {  @Override  public void run() {    //任务逻辑  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我一般的写法习惯用Java的函数式写法,包括后面的示例代码,我都会大量使用Java的λ表达式。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package main;public class Main {  public static void main(String[] args) {    Thread thread = new Thread(()-&gt;{      //任务逻辑    });  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种方法无论是继承Thread类然后重写run方法，还是实现Runnable接口的run方法，两种方式都有一个共同点那就是run方法是没有返回值的。这就是说当年Java设计线程的时候就没有考虑过一个线程还有返回值的情况，当年的作者认为一个任务就应该完全在一个线程内执行结束，中间执行的结果不应该逃逸到线程之外，如果一个线程要等另一个线程的话，就用通知的方式或共享变量的方式通信就好了。但是后来发现需要有返回值的情况，但是没办法，Thread这时候已经设计出来了，就是没有返回值的，改也改不了了，那怎么办呢？搞了Future + Callable = FutureTask , Future 的意思就是未来，也就是说未来可能会有某个值，我现在不用，一会儿可能会获取。</p><p>以上是最基本的创建线程的写法，肯定会有人问用哪种方式好呢? 无论你回答哪种方式好我觉得都不合适，我们在决定使用哪种方式的时候一定不能脱离实际。我们在技术选型的时候也一样，不能脱离业务背景。<br>这里就涉及到继承和实现接口两种方式的优缺点对比了。</p><ol><li>因为JAVA是单根继承的语言，不支持多个父类，因此如果一个类已经继承了Thread就不太好扩展其他能力了，但是既然已经继承了Thread类,那这个类大概率跟线程有关,貌似与不需要在继承其他类了。</li><li>使用实现Runnable的方式看似还比较灵活一点，但是又能灵活到哪里去呢。</li><li>用λ的形式写的更优雅一点,不用到处定义类,但貌似只能在一个地方使用一次,可能跨类了就得在重新写一遍，要是给它定义到外边又感觉不够OOP了。</li></ol><h2 id="线程的启动"><a class="markdownIt-Anchor" href="#线程的启动"></a> 线程的启动</h2><p>start() vs run()<br>线程在Java中被视为一个对象，我们new 一个Thread对象的时候，该Thread对象实例会和操作系统的一个轻量级线程一一对应。Java在线程的实现方面完全依赖了操作系统的线程实现，每new 一个线程对象都会向操作系统申请创建一个系统级别的线程。我们可以看到，在Java Thread类的前几行有一个 static 的静态代码块，类加载的时候会先加载一下 registerNatives 方法。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">publicclass Thread implements Runnable {    /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */    private static native void registerNatives();    static {        registerNatives();    }    .....}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该native的registerNatives方法的目的就是将Java 线程对象中的方法同操作系统线程的方法进行一一绑定。其中run方法也就是线程执行的任务被绑定到了操作系统的run方法上，当操作系统线程开始执行的时候其实就是执行的Java线程的run方法。</p><p>我们创建好线程对象之后必须得通知操作系统该线程可以执行了，用的就是 start() 这个函数。所以 start()并不是执行 run() 函数里面的代码，而是通知操作系统你需要在合适的时间分配资源来执行run里面的代码，至于具体什么时候执行，就看操作系统心情了。运行线程是需要内存空间的，有一部分内存空间在创建线程的时候就开始分配了，后面会讲 程序计数器、栈、本地方法栈、堆、方法区的时候还会提及。</p><p>Java 语言是如何实现线程的呢？<br>Java 语言的线程实现是依托于JVM帮忙实现的，JVM是什么？JVM 是Java的虚拟机。我们说启动应用其实说白了启动了一个JAVA虚拟机进程而已。我们的应用都是跑在虚拟机里面的。<br>那Java为什么要搞一个JVM出来了，因为Java说我要跨平台，我要一次编写到处编译随处运行。那怎么做呢，针对不同的平台实现不同的虚拟机即可。那JVM是怎么实现一个Java线程的呢？首先主流操作系统都会有一套自己的进程、线程实现方案，然后提供出来。以hotspot虚拟机为例子，为了偷懒，直接使用了操作系统的线程实现，什么意思呢，那就是一个Java线程其实底层就是一个操作系统线程，他们两个是一一映射的。那你说的这不是废话么。这还真不是废话，没人说一个线程一个对应一个操作系统线程，还有自己实现的呢，还有n:1 和 n:m 的呢。要知道Jvm规定的是一个Java线程一一对应一个操作系统线程，我们称为1:1比例模型。但是不是所有语言都是这么设计的。例如go语言的线程和操作系统线程就是m:n的关系，也就是go的m个线程可以由n个操作系统线程共同完成，其目的是达到复用，它是一种多对多的关系。</p><h2 id="线程的状态流转"><a class="markdownIt-Anchor" href="#线程的状态流转"></a> 线程的状态流转</h2><p>前面说到，一个线程在start()后只是通知操作系统，我这个线程交给你了，你可以运行了。我们看看start方法</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public synchronized void start() {       /**        * This method is not invoked for the main method thread or "system"        * group threads created/set up by the VM. Any new functionality added        * to this method in the future may have to also be added to the VM.        *        * A zero status value corresponds to state "NEW".        */       if (threadStatus != 0)           throw new IllegalThreadStateException();       /* Notify the group that this thread is about to be started        * so that it can be added to the group's list of threads        * and the group's unstarted count can be decremented. */       group.add(this);       boolean started = false;       try {           start0();           started = true;       } finally {           try {               if (!started) {                   group.threadStartFailed(this);               }           } catch (Throwable ignore) {               /* do nothing. If start0 threw a Throwable then                 it will be passed up the call stack */           }       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们注意到这个方法是synchronized修饰的，目的就是防止并发情况下的start. 另外注意，里面有个判断 <code>if (threadStatus != 0) throw new IllegalThreadStateException();</code><br>如果连续两次start，第二次start肯定会报错，就是因为 threadStatus !=0 了。0代表初始状态，start后就变成其他状态了。</p><p>那一个线程都有哪些状态，以及状态机是怎么转换的呢？一切都在源码当中</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">/** * A thread state.  A thread can be in one of the following states: * &lt;ul&gt; * &lt;li&gt;{@link #NEW}&lt;br&gt; *     A thread that has not yet started is in this state. *     &lt;/li&gt; * &lt;li&gt;{@link #RUNNABLE}&lt;br&gt; *     A thread executing in the Java virtual machine is in this state. *     &lt;/li&gt; * &lt;li&gt;{@link #BLOCKED}&lt;br&gt; *     A thread that is blocked waiting for a monitor lock *     is in this state. *     &lt;/li&gt; * &lt;li&gt;{@link #WAITING}&lt;br&gt; *     A thread that is waiting indefinitely for another thread to *     perform a particular action is in this state. *     &lt;/li&gt; * &lt;li&gt;{@link #TIMED_WAITING}&lt;br&gt; *     A thread that is waiting for another thread to perform an action *     for up to a specified waiting time is in this state. *     &lt;/li&gt; * &lt;li&gt;{@link #TERMINATED}&lt;br&gt; *     A thread that has exited is in this state. *     &lt;/li&gt; * &lt;/ul&gt; * * &lt;p&gt; * A thread can be in only one state at a given point in time. * These states are virtual machine states which do not reflect * any operating system thread states. * * @since   1.5 * @see #getState */public enum State {    /**     * Thread state for a thread which has not yet started.     */    NEW,    /**     * Thread state for a runnable thread.  A thread in the runnable     * state is executing in the Java virtual machine but it may     * be waiting for other resources from the operating system     * such as processor.     */    RUNNABLE,    /**     * Thread state for a thread blocked waiting for a monitor lock.     * A thread in the blocked state is waiting for a monitor lock     * to enter a synchronized block/method or     * reenter a synchronized block/method after calling     * {@link Object#wait() Object.wait}.     */    BLOCKED,    /**     * Thread state for a waiting thread.     * A thread is in the waiting state due to calling one of the     * following methods:     * &lt;ul&gt;     *   &lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;     *   &lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;     *   &lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;     * &lt;/ul&gt;     *     * &lt;p&gt;A thread in the waiting state is waiting for another thread to     * perform a particular action.     *     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;     * on an object is waiting for another thread to call     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;     * is waiting for a specified thread to terminate.     */    WAITING,    /**     * Thread state for a waiting thread with a specified waiting time.     * A thread is in the timed waiting state due to calling one of     * the following methods with a specified positive waiting time:     * &lt;ul&gt;     *   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt;     *   &lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;     *   &lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;     *   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;     *   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;     * &lt;/ul&gt;     */    TIMED_WAITING,    /**     * Thread state for a terminated thread.     * The thread has completed execution.     */    TERMINATED;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到没只有6中 NEW(新建)、RUNNABLE(可运行)、BLOCK(阻塞)、WATING(等待)、TIME_WATING(限时等待)、TERMINATED(结束). 注意这六中只是JVM中一个线程所处的状态，可不代表操作系统线程的状态，例如对于操作系统来说 RUNABLE 对应两种一种叫 READY 一种叫 RUNNING。</p><p>一个线程的生命周期始于 NEW 终于 TERMINATED. NEW 之后经过start() 变成 RUNNABLE 可运行状态。注意可运行并不一定在运行，必须得等操作系统真正分配时间片段后才算真正的运行，所以看到RUNNABLE状态的线程可能在运行也可能在等待运行，区分不出来的，这个算是JAVA线程设计的一个败笔吧。</p><p>这几个状态中，最难理解的就是 BLOCK 和 WATING 、TIME_WATING 明明都是被阻塞住了，当前程序都不再往下执行了，为啥要区分呢？</p><h4 id="block"><a class="markdownIt-Anchor" href="#block"></a> BLOCK</h4><p>BLOCK 一定在获取锁的时候获取不到才会BLOCK<br>获取不到锁的线程一定被阻塞，直到另一个获取锁的线程执行完成同步代码后释放锁才得以解脱，释放锁的时候会唤醒阻塞在该锁上的其他线程，其实就是 notify 或notifyAll. 只不过是操作系统执行了这个动作而已。所谓的notify 或 notifyAll 和start一样只不过是把状态变成RUNNABLE而已.</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** * Thread state for a thread blocked waiting for a monitor lock. * A thread in the blocked state is waiting for a monitor lock * to enter a synchronized block/method or * reenter a synchronized block/method after calling * {@link Object#wait() Object.wait}. */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 <code>reenter a synchronized block/method after calling {@link Object#wait() Object.wait}.</code>该怎么理解呢。<br>翻译过来是 调用object.wait方法后重入同步代码块的时候会变成 Block状态。按理说调用Object.wait后应该变成WATING状态啊，怎么这这里又变成BLOCK状态了呢？按照我的理解，调用Object.wait方法后当前线程先变成了WATING状态.当他被唤醒后先变成RUNNABLE状态，轮到他执行的时候，发现需要先获取到锁资源才行，于是该线程重新征用锁，也就是重入的时候，如果获取到锁则向下继续执行如果获取不到所则进入BLOCK状态。</p><h4 id="wating"><a class="markdownIt-Anchor" href="#wating"></a> WATING</h4><p>WATING 一定在等另一个线程执行完某个操作，WATING状态一定得有人叫醒才行。这是线程之间的一种通信方式，称之为通知，还有一种方式叫共享内存，后面会继续讲解。<br>{@link Object#wait() Object.wait} with no timeout<br>当调用不加时间的wait方法的时候。注意这里要想调用wait方法一定得先获取到对象对应的锁。获取不到锁进入阻塞状态,获取到锁后再调用wait方法，这时候直接进入WAITING状态。<br>{@link #join() Thread.join} with no timeout<br>把一个线程加到当前线程的执行流程中，也就是在join那个时间点等待执行线程的完成，完成后才继续执行，所以这是时候当前线程是处于WATING状态的，这个地方等待的是另一个线程执行完成<br>Join 方法：本质上还是根据wait方法实现的。分析join源码发现join方法本身是使用了synchronized修饰符的，锁对象是等待的那个线程，获取到锁后立马执行了wait方法，这样当前线程就处于waiting状态了，待等待的线程执行完成操作系统会先唤醒所有等待在该线程上的其他线程。(所谓唤醒，其实就是把状态改为RUNNABLE)<br>{@link LockSupport#park() LockSupport.park}<br>可见等待状态其实与锁无关，它的唤醒一定是另一个线程完成某件事情后主动去唤醒</p><h4 id="time_wating"><a class="markdownIt-Anchor" href="#time_wating"></a> TIME_WATING</h4><p>一定在等另一个线程执行完某个操作，并且一定有时间限制，不会一直傻等。其实现原理是，操作系统有一个时钟，可以向该时钟注册事件，在这里就是注册一个唤醒该线程的事件，等时间到了，系统时钟向操作系统发起中断，然后唤醒被挂起的线程，这是硬件中断，操作系统一定会响应的，所以TIME_WATING状态的线程往往唤醒的比较及时。</p><h1 id="线程通信"><a class="markdownIt-Anchor" href="#线程通信"></a> 线程通信</h1><p>上面说的 wait\notify\notifyAll 以及 synchronized 还有 LockSupport的park\unpark 其实都是用在多线程之中的，其目的都是为了进行线程间的通信。所谓线程通信指的就是一个线程的运行状态或中间结果可以被其他线程感知。线程间通信的方式主要有 共享内存方式(包括共享磁盘、共享缓存等)、通知机制、还有管道的方式。线程间的通信方式主要参考的是进程间的通信方式实现的。进程间的通信方式比较多，包括 管道、有名管道、共享内存、共享存储、消息队列、信号、信号量。</p><h3 id="初识进程间通信"><a class="markdownIt-Anchor" href="#初识进程间通信"></a> 初识进程间通信</h3><h4 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h4><p>管道是进程间通信的一种方式,这种进程间通信方式只适用于父子或兄弟进程之间，他的特点是是一端进一端出，管道满的时候写不进去被阻塞，管道空的时候读不出来被阻塞。</p><p>我先举一个例子来直观的感受一下，我们常常使用下面的shell命令 <code>ps -ef|grep java </code>。这条命令指的是我们将ps进程的标准输出结果传给给grep进程。我们通过 <code>|</code> 这个符号就可以连接起左右两个进程。</p><h4 id="有名管道"><a class="markdownIt-Anchor" href="#有名管道"></a> 有名管道</h4><p>上面说的管道，也叫匿名管道，因为他没有名字，其本质是在内存开辟一个空间，然后一个进程的输出先写到这个内存空间，然后操作系统再把这个内存空间的值传递给另一个进程。但是有名管道不同，有名管道其实是文件系统的一部分，因为他有名字，对外看起来就是一个文件。</p><p>shell 中使用mkfifo 命令创建一个有名管道。</p><h4 id="消息队列"><a class="markdownIt-Anchor" href="#消息队列"></a> 消息队列</h4><p>消息队列，是消息的链表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。</p><h4 id="共享内存"><a class="markdownIt-Anchor" href="#共享内存"></a> 共享内存</h4><p>共享内存（Shared Memory），指两个或多个进程共享一个给定的内存存储区。</p><h4 id="共享存储"><a class="markdownIt-Anchor" href="#共享存储"></a> 共享存储</h4><p>区别于内存的一种共享形式，例如一个进程写文件一个进程读文件，文件当然是存储在磁盘上的，所以是共享磁盘了。如果一个进程网u盘里写一个从U盘里读那就是共享u盘了。</p><h4 id="socket通信http通信"><a class="markdownIt-Anchor" href="#socket通信http通信"></a> socket通信|http通信</h4><p>两个机器之间进程的通信</p><h4 id="信号"><a class="markdownIt-Anchor" href="#信号"></a> 信号</h4><p>信号机制是类UNIX系统中的一种重要的进程间通信手段之一。我们经常使用信号来向一个进程发送一个简短的消息。</p><h4 id="信号量"><a class="markdownIt-Anchor" href="#信号量"></a> 信号量</h4><p>信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据，可以理解为锁标志。</p><p>事实上，进程也不知道信号到底什么时候到达。信号是异步的，一个进程不可能等待信号的到来，也不知道信号会到来，那么，进程是如何发现和接受信号呢？信号的接收不是由用户进程来完成的，而是由内核代理。当一个进程P2向另一个进程P1发送信号后，内核接受到信号，并将其放在P1的信号队列当中。当P1再次陷入内核态时，会先检查信号队列，并根据相应的信号调取相应的信号处理函数。<br>信号检测和响应时机刚才我们说，当P1再次陷入内核时，会检查信号队列。那么，P1什么时候会再次陷入内核呢？陷入内核后在什么时机会检测信号队列呢？</p><ol><li>当前进程由于系统调用、中断或异常而进入系统空间以后，从系统空间返回到用户空间的前夕。</li><li>当前进程在内核中进入睡眠以后刚被唤醒的时候（必定是在系统调用中）</li></ol><p>主要应用是kill. kill的时候给进程发送一个信号，下一次cpu再次调度到进程的时候都是先查询信号列表，如果有，则优先响应信号中断。这是软中断的一种，因此是有延迟的。只有等到下一个cpu调度到的时候才会执行。</p><h1 id="线程通信-2"><a class="markdownIt-Anchor" href="#线程通信-2"></a> 线程通信</h1><h2 id="通知机制"><a class="markdownIt-Anchor" href="#通知机制"></a> 通知机制</h2><p>Object.wait 你可以理解为在哪个线程中调用某个对象的wait方法，其实就是把这个线程挂到该对象的等待区中。一旦其他线程里面调用了该对象的notify或notifyAll方法就会到该对象的等待区里面唤醒一个或全部的线程。那这个对象肯定得是共享对象，由于要调用某个对象的wait一定要先锁定该对象，因此可以理解为先获取该对象的锁，然后才能wait和notify。如果没有获取到锁就调用wait或notify就会抛出 <code>java.lang.IllegalMonitorStateException: current thread is not owner</code>异常。</p><center>  <img src="/2022/03/15/java/java-bing-fa-bian-cheng/bing-fa-xue-xi-bi-ji/wait.jpg"></center>线程join的原理线程join的原理底层也是用的wait\notify机制。当在A线程里面调用B线程join方法的时候,调用了B线程对象的wait方法，按照刚才的理论，就会吧A线程挂到B线程对象的等待区中，当B线程执行完成的时候，操作系统会先看在线程对象的等待区里面有没有等待的线程，如果有那就先唤醒在退出。<h2 id="共享内存-2"><a class="markdownIt-Anchor" href="#共享内存-2"></a> 共享内存</h2><p>如果多个线程持有同一个变量，或者说对同一块内存是可见的，那么一个线程对这块内存的变化天然的就能被另一个线程所感知，这样就能实现线程间的通信了。看似简单，但是由于JVM规范的存在，每个线程都是工作在自己的工作空间上的，也就是说对于共享变量，每个线程都会持有该变量的一份拷贝。那这样就会有可见性的问题，一个线程对共享变量的修改，不能及时的反馈到另一个线程里面。</p><p>为了解决这个问题 voliatle 应运而生。</p><h1 id="volatile-关键字"><a class="markdownIt-Anchor" href="#volatile-关键字"></a> volatile 关键字</h1><h2 id="可见性"><a class="markdownIt-Anchor" href="#可见性"></a> 可见性</h2><p>上面说到了变量的可见性问题。变量的可见性指的是一个线程修改了一个变量成功之后，另一个线程能不能立马看到这个修改后变量的值。如果不能看到，那就叫做存在可见性的问题。就会导致运行结果与预期不同。</p><p>这类问题一定出现在多线程共享内存的时候，单线程内代码是从上到下依次解释执行的不存在可见性问题。网上很多人都在讲什么cpu架构、什么缓存一致性协议OMEI 其实跟 volatile 没有半毛钱关系。那个是cpu在有多级缓存的时候如何保证共享内存在多个缓存中的一致性的。跟voliatle 解决的根本不是一个问题。</p><p>共享变量的可见性问题产生的原因是由于JVM规定，线程运行有自己的内存空间，先把变量都缓存一份到自己的运行空间，之后所有的操作都是在自己运行空间里面玩，至于修改后的变量什么时候同步到实际的内存则视情况而定，这种方式我们称之为写回，也就是写完自己的运行空间的变量就认为操作成功了。这就造成了内存可见性问题。volitale 就是为了解决这样的问题，其原理也很简单，就是把共享变量变成看起来只有一份，其本质是把共享变量的写回变成写穿，然后通知其他缓存了该共享变量的线程缓存失效。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"translation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"挥发性"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"basic"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"us-phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɑːlətl"</span><span class="token punctuation">,</span>    <span class="token property">"phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɒlətaɪl"</span><span class="token punctuation">,</span>    <span class="token property">"uk-phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɒlətaɪl"</span><span class="token punctuation">,</span>    <span class="token property">"explains"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"n. 挥发物；有翅的动物"</span><span class="token punctuation">,</span>      <span class="token string">"adj. [化学] 挥发性的；不稳定的；爆炸性的；反复无常的"</span><span class="token punctuation">,</span>      <span class="token string">"n. (Volatile)人名；(意)沃拉蒂莱"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volitale 的意思是挥发性引申为不稳定的易失的，所以被他修饰的变量很不稳定，那就得每次读之前去主内存里面读，每次写之后都要同步到主内存。</p><p>这个可见性问题说是好验证，无非就是一个线程修改一个共享变量的值之后，另一个线程看不到就行，但由于线程运行的非常快且不可控，真要你写一个示例出来，你还真不见的能写对。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package main;import java.util.concurrent.TimeUnit;public class Main {  public static boolean keepRunning = true;  public static void main(String[] args) {    Thread thread1 = new Thread(() -&gt; {      //这个地方等1秒钟的目的是为了线程2先把共享变量缓存进自己的内存空间      //如果这个地方太快,很可能线程2来不及缓存      try {        TimeUnit.SECONDS.sleep(1);      } catch (InterruptedException e) {        e.printStackTrace();      }      keepRunning = false;      System.out.println("keep running false");    });    Thread thread2 = new Thread(() -&gt; {      while (keepRunning) {        //System.out.println("running"); 这个地方千万不要加这个输出,否则你会发现程序的表现与预期不符        //程序的预期是 线程1 修改keepRunning 的值为false后，理论上线程2应该停止，但是运行结果却不是        //说明线程1对共享变量的修改对线程2其实是不可见的      }      System.out.println("exit");    });    thread1.start();    thread2.start();  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里共享变量加上volatile修饰就可以解决，证明volatile可以解决共享变的可见性问题。那他是怎么解决可见性的问题的呢？</p><h3 id="volatile究竟如何让变量的修改在多线程之间可见的呢"><a class="markdownIt-Anchor" href="#volatile究竟如何让变量的修改在多线程之间可见的呢"></a> volatile究竟如何让变量的修改在多线程之间可见的呢</h3><p>所有对volatile变量的操作翻译成会变之后，都会加一个lock指令，这个lock指令是一个cpu原语，可以保证变量在变化后立马写入主存，也能保证在读取数据的时候每次都去主内存中读取，就好像过线程之间从来没有缓存过变量的拷贝一样。</p><p>注意也仅仅是解决可见性问题，并不能保证变量操作的原子性，操作的原子性只能用cas或锁来解决。</p><p>volatile还有一个附带的功能，就是防止指令重排序。在单线程里面，指令爱怎么排序怎么排序，反正也不影响最后的执行结果。指令重排序并不会引起变量的可见性的问题，但是在多线程里面如果对共享变量的操作被重排序了，就有可能导致结果的不确定性。例如 按照道理说，变量的初始化和赋值是先初始化，初始化完了之后才把引用指向该对象，但是有可能cpu先让指针指向了一个未初始化好的内存区域，这时候如果其他线程使用了该共享变量那就有可能发生问题。典型问题就是单例中的DCL，想要写好还真不容易。</p><h2 id="指令重排序"><a class="markdownIt-Anchor" href="#指令重排序"></a> 指令重排序</h2><p>要说volatile可以解决内存可见性问题，是因为把写回机制变成了写穿机制并且是其他缓存失效，没有问题。那指令重排序是啥。指令重排序和可见性一样很难复现。<br>指令重排序有两种，一种是编译级别的指令重排序，一种是cpu级别的指令重排序。</p><h3 id="编译级别的指令重排序"><a class="markdownIt-Anchor" href="#编译级别的指令重排序"></a> 编译级别的指令重排序</h3><p>在我们无感知的情况下，我们编程的字节码就会对我们写的java指令进行一波指令重排序，这是编译优化器干的好事，因为我们写的代码总是按照人的思维去写的，但是JVM编译的时候是按照计算机的思维去编译的，这样有些情况下，JVM认为我可以优化你的指令，例如可以合并执行，可以乱序执行等等。</p><h3 id="cpu级别的指令重排序"><a class="markdownIt-Anchor" href="#cpu级别的指令重排序"></a> cpu级别的指令重排序</h3><p>字节码也依然是人写的代码，cpu在执行的时候也不傻，也会优化字节码指令，也可以合并执行，可以乱序执行等等。<br>举个例子</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">bit a=0;bit b=0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面这条语句在编译成JAVA字节码的时候，可能就变成了 b=0 在前，a=0 在后了。<br>cpu执行的时候，可能 a和b 是一起赋值的，因为一条总线可以传输64位数据，可能a\b所在的内存会同时充电赋值。当然也可能先给b赋值然后再给a赋值</p><h3 id="复现指令重排序"><a class="markdownIt-Anchor" href="#复现指令重排序"></a> 复现指令重排序</h3><p>指令重排序和可见性一样很难复现。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package main;public class Main {  private static int x = 0, y = 0, a = 0, b = 0;  public static void main(String[] args) throws InterruptedException {    int i = 0;    while (true) {      i++;      x = 0;y = 0;a = 0;b = 0;      Thread thread = new Thread(() -&gt; { a = 1;x = b; });      Thread thread1 = new Thread(() -&gt; { b = 1;y = a; });      thread.start();thread1.start();thread.join();thread1.join();      if (x == 0 &amp;&amp; y == 0) {        System.out.println("第" + i + "次发生了指令重排序");        break;      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码可以验证指令重排序的存在</p><center>  <img src="/2022/03/15/java/java-bing-fa-bian-cheng/bing-fa-xue-xi-bi-ji/重排序.jpg"></center>上面只是说有这样情况，但实际是不是这么执行的都是不确定的，那这样做不是会对程序执行有影响么，你想多了。无论编译器和cpu怎么优化，都必须保证一个语义和一个原则<p>这个语义叫 as-if-serial 这个原则叫 happens-before原则</p><h4 id="as-if-serial-语义"><a class="markdownIt-Anchor" href="#as-if-serial-语义"></a> as-if-serial 语义</h4><p>as-if-serial 语义的意思是，如论你编译器和cpu怎么优化我的代码，我代码执行的时候必须看起来像是串行的。有了这个保证，我们就可以放心大胆的写我们的代码，优化不是我们关心的事情。但是我们还是要了解一下as-if-seria 语义是咋实现的呢？万一面试问到呢？这个东西只是为了让你在写代码的时候不用考虑重排序的问题，你想想，你写代码的时候有特地想过某个共享变量会从排序么。很少吧。</p><p>As-if-serial语义的意思是，所有的动作(Action)都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身的应有结果是一致的。Java编译器、运行时和处理器都会保证单线程下的as-if-serial语义。 比如，为了保证这一语义，重排序不会发生在有数据依赖的操作之中。</p><p>为了保证as-if-serial 语义有了下面8条原则。如果面试问道这些，纯粹是为了秀技或者刁难你，问这些完全没有意义。都是定义不必死记。</p><h4 id="happens-before原则"><a class="markdownIt-Anchor" href="#happens-before原则"></a> happens-before原则</h4><p>根据Java内存模型中的规定，可以总结出以下几条happens-before规则。Happens-before的前后两个操作不会被重排序且后者对前者的内存可见。</p><ol><li>程序次序法则：线程中的每个动作A都happens-before于该线程中的每一个动作B，其中，在程序中，所有的动作B都能出现在A之后。</li><li>监视器锁法则：对一个监视器锁的解锁 happens-before于每一个后续对同一监视器锁的加锁。</li><li>volatile变量法则：对volatile域的写入操作happens-before于每一个后续对同一个域的读写操作。</li><li>线程启动法则：在一个线程里，对Thread.start的调用会happens-before于每个启动线程的动作。</li><li>线程终结法则：线程中的任何动作都happens-before于其他线程检测到这个线程已经终结、或者从Thread.join调用中成功返回，或Thread.isAlive返回false。</li><li>中断法则：一个线程调用另一个线程的interrupt happens-before于被中断的线程发现中断。</li><li>终结法则：一个对象的构造函数的结束happens-before于这个对象finalizer的开始。</li><li>传递性：如果A happens-before于B，且B happens-before于C，则A happens-before于C</li></ol><p>这个只是一个法则，可以说是一个协议，一个口头约定，每一条法则都是要有对应的实现的，至于具体怎么实现，不同的虚拟机会有不同的方式方法。就拿volatile这关键字来说，底层使用了lock指令实现的，至于lock指令是怎么实现的，如果面试问到了，你就说不知道就行了。真没必要在深挖了，再挖就挖到电路怎么设计了。</p><h4 id="防止指令重排序的方法"><a class="markdownIt-Anchor" href="#防止指令重排序的方法"></a> 防止指令重排序的方法</h4><p>既然操作系统提供了指令重排序的手段，为了解决命令执行的效率，那就必须提供关闭这个功能的方式，因为总有一些场景我们是不需要也不能让其发生重排序的。这就是内存屏障，内存屏障就可以告诉编译器或者cpu地方你不能给我重排序，否则我就挂了。</p><p>防止指令重排序的方法是加入一道内存屏障，就好像一堵墙，这个墙就规定了墙两边的指令无论如何都不能发生指令重排序，但是同一边的指令再怎么排就怎么排。如果墙的一边是写，一遍是读，那意思就是必须写完才能读，这样读到了一定是写完后的值，而不是写之前的值。</p><p>volatile 只能解决可见性问题，但是解决不了原子性问题？那原子性问题怎么解决呢，只能用更强大的工具了那就是锁。注意锁是一个很大的概念。Java中就是 synchronized 关键字以及Lock接口和其各种子类的实现的锁。</p><h1 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h1><p>在同一程序中运行多个线程本身不会导致问题，问题在于多个线程访问了相同的资源。如，同一内存区（变量，数组，或对象）、系统（数据库，web services等）或文件。实际上，这些问题只有在一或多个线程向这些资源做了写操作时才有可能发生，只要资源没有发生变化,多个线程读取相同的资源就是安全的。</p><h2 id="为什么需要锁"><a class="markdownIt-Anchor" href="#为什么需要锁"></a> 为什么需要锁</h2><p>我们把多个线程竞争处理的资源称为临界资源（代码块、方法体等），当一个线程获得了临界资源的使用权以后，为了保证临界资源在同一时间只能由一个线程获得，其它线程必须等这个线程处理完以后才能通过竞争再次尝试获得临界资源的使用权。我们抽象出来了锁这种东西。</p><p>追问：为什么要保证临界资源在同一时间只能由一个线程使用?<br>首先肯定是有这样的场景存在，多个线程同时操作临界资源会导致数据的不一致。</p><p>追问：什么叫数据的不一致?<br>就是你本来期望是一个结果，但是偏偏变成了另一个结果，本来不应该出现的情况，但是偏偏出现了，就叫数据不一致了。</p><p>追问：所以归根结底是为了解决临界资源在并发使用过程中可能出现的数据不一致性问题才必须保证临界资源在同一时间只能由一个线程获得?<br>是的。因为并发会导致数据不一致，那干脆在使用临界资源的时候不要并发了，多么简单粗暴啊。</p><p>追问：说了半天还是没有说到锁啊?<br>那我们如何实现上面说的 必须保证临界资源在同一时间只能由一个线程获得呢？答案就是大家对向某个人提出申请，这个人必须足够公正，能保证在同一时间只能有一个人获得申请，而且要保证获得申请的人不撤销申请其他人即使再申请也不会获得申请，这个人就是操作系统，这个申请就是锁，申请被统一就叫获得了锁，申请被拒绝，就是没有获得锁。而这个锁，也是一种临界资源，也要保证获取锁的这个动作的线程安全，难道为了保证获取锁的动是线程安全的就要在为获取锁的动作加一把锁么，貌似死循环了。但这个保证是操作系统保证的，请确切的说是操作系统的内核保证的，操作系统毕竟也是一个软件，他要能保证，还得依赖底层硬件能够提供这样的能力，也就是物理层面的互斥锁。</p><h2 id="锁的分类"><a class="markdownIt-Anchor" href="#锁的分类"></a> 锁的分类</h2><p>锁并不是某个语言特有的，c语言也有锁，c++也是，包括一些后现代的编程语言例如scala、groovy等都有锁，操作系统更需要锁，redis有锁，数据库有锁，分布式系统有分布式锁。锁你可以理解为一个工具类，使用这个工具类可以保证临界资源在同一时间只能由一个线程获得。锁的种类有很多，真的很多，有悲观锁、乐观锁，有互斥锁、共享锁，有可重入锁、不可重入锁，数据库有行锁、表锁、页锁，分布式有分布式锁，可以用redis实现可以用zookeeper实现。按照我的理解和记忆方案，不见得是对的，但在这里提出来，大家一起讨论一下。</p><p>本质上锁就分成两类，一类叫乐观锁，一类叫悲观锁，至于有些人任务乐观锁不教锁，这个观点我们就不争论了，都是定义不必死记。乐观锁的底层原理逃不出我们上面说的CAS理论，它属于无锁编程领域的一项手段。<br>而悲观锁才是实时在在的锁，而悲观锁有四个特性 是否公平、是否可重入、是否能响应中断、共享还是互斥。每一类锁都有这四个特性，例如 synchronized 实现的锁，的全称应该叫 ：公平的可重入的不可响应中断的互斥锁。 而 ReentrentLock 实现的锁（有个参数可以控制new出来的是不是公平锁）的全称应该叫 公平的的可重入的能响应中断的互斥锁  或者 叫不公平的可重入的能响应中断的互斥锁。ReadWriteLock 的全称应该叫公平的可重入的能够响应中断的共享锁。</p><p>说明一下，共享锁一定不是单独出现，一定得分成读锁和写锁，单独的共享锁或者叫读锁，跟没加锁是一样的效果。上面说了 synchroinzed 和 Lock 。我们引出Java中的锁。</p><h2 id="java中的锁"><a class="markdownIt-Anchor" href="#java中的锁"></a> Java中的锁</h2><h3 id="java中的乐观锁"><a class="markdownIt-Anchor" href="#java中的乐观锁"></a> Java中的乐观锁</h3><p>Java 中的乐观锁 就是 Unsafe 类中各种CAS操作，使用场景就是各种 原子类们。AtomicInteger\AtomicBoolean 等等，以及 LongAdder 这类新式的自家操作，他们内部没有使用所谓的synchronzied包裹临界区，也没有使用各种Lock的子类来实现。</p><p>乐观锁只需要掌握CAS 以及 如何解决CAS的ABA问题就好。</p><h4 id="cas"><a class="markdownIt-Anchor" href="#cas"></a> CAS</h4><p>CAS 就是 compareAndSwap 比较并交换，这个对应到汇编指令 叫 cmpXchg , 在改变值的时候，先取出当前内存里面的值，然后执行操作改变内存的值，只是在改变的时候比较一下内存中的值和我们先前取出来的值是不是一样，如果一样就说明中间没有人改过，如果不一样就说明中被人改过，这时候要么返回false 要么抛出异常，等外接捕获到异常或者失败后，是重试也好，是重新计算也好。要知道只要是先出去来然后比较最后根据比较的结果在做某项处理的时候一定会发生并发问题，有可能你出去来的值立马被其他线程改掉了，你拿到的就是过期的值了。因此必须要保证比较并交换是一条指令。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">/** * Atomically adds the given value to the current value of a field * or array element within the given object {@code o} * at the given {@code offset}. * * @param o object/array to update the field/element in * @param offset field/element offset * @param delta the value to add * @return the previous value * @since 1.8 */@IntrinsicCandidatepublic final int getAndAddInt(Object o, long offset, int delta) {    int v;    do {        v = getIntVolatile(o, offset);    } while (!weakCompareAndSetInt(o, offset, v, v + delta));    return v;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>底层有一个native的方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** * Atomically updates Java variable to {@code x} if it is currently * holding {@code expected}. * * &lt;p&gt;This operation has memory semantics of a {@code volatile} read * and write.  Corresponds to C11 atomic_compare_exchange_strong. * * @return {@code true} if successful */@IntrinsicCandidatepublic final native boolean compareAndSetInt(Object o, long offset,int expected,int x);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CAS 的原理 跟 volatile 的原理是一样的，所有的CAS操作 和 被volatile修饰的变量 翻译成底层汇编指令后都会被加上一个lock指令，这个lock指令是一个cpu原语，这个指令可以理解为cpu级别的锁，要不怎叫 lock指令呢。lock 指令可以保证后面的操作变成原子的操作中途不会被打断，也能保证后面的操作用到的内存被立即写回主存，读取都从主存中读取。</p><h3 id="java-中的悲观锁"><a class="markdownIt-Anchor" href="#java-中的悲观锁"></a> Java 中的悲观锁</h3><p>Java 中的锁分两大类，一类是依靠关键字实现的自动锁，一类是实现Lock接口而生的手动锁。</p><h3 id="synchronized"><a class="markdownIt-Anchor" href="#synchronized"></a> synchronized</h3><p>用法<br>实现原理<br>锁升级</p><h3 id="lock"><a class="markdownIt-Anchor" href="#lock"></a> Lock</h3><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Java并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用github搭建自己的maven私服</title>
      <link href="/2021/08/21/gong-ju-kong/git/ru-he-shi-yong-github-da-jian-zi-ji-de-maven-si-fu/"/>
      <url>/2021/08/21/gong-ju-kong/git/ru-he-shi-yong-github-da-jian-zi-ji-de-maven-si-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="maven如何拉取jar包"><a class="markdownIt-Anchor" href="#maven如何拉取jar包"></a> maven如何拉取jar包</h1><p>当我们再 pom 文件中依赖了某个包后，如果在没有做特殊配置（也就是使用 maven 的默认配置）的情况下，Maven 会首先到本地仓库去搜索，如果本地仓库没有此依赖包，会到中央仓库获取，默认的中央仓库地址是 <a href="http://repo1.maven.org/maven2%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E5%9B%BD%E5%A4%96%EF%BC%8C%E5%8F%AF%E6%83%B3%E8%80%8C%E7%9F%A5%EF%BC%8C%E9%80%9F%E5%BA%A6%E6%98%AF%E6%B2%A1%E5%8A%9E%E6%B3%95%E4%BF%9D%E8%AF%81%E7%9A%84%E3%80%82%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%90%E6%B0%94%E4%B8%8D%E5%A5%BD%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%8B%89%E4%B8%8B%E6%9D%A5%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%89%A7%E8%A1%8C">http://repo1.maven.org/maven2，服务器在国外，可想而知，速度是没办法保证的。有时候运气不好，晚上拉下来一个开源项目，执行</a> Maven 包安装，早上睡醒了一看，还没下载完，你说来气不。</p><p>当然国内也有相应的仓库，比如阿里的，速度还是很好的，就相当于阿里帮你把常用的jar包下载下来缓存到了中国,方便我们国内的程序员使用。阿里的仓库就好比一个代理,你想要下载某个jar的时候只需要向阿里的仓库发起请求,如果阿里的仓库里面没有,他会负责去中央仓库 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> 下载并缓存在阿里的仓库里面。使用教程在这里 <a href="https://developer.aliyun.com/mvn/guide%EF%BC%8C%E5%A4%A7%E6%A6%82%E9%95%BF%E8%BF%99%E4%B8%AA%E6%A0%B7%E5%AD%90%E3%80%82">https://developer.aliyun.com/mvn/guide，大概长这个样子。</a></p><center>  <img src="/2021/08/21/gong-ju-kong/git/ru-he-shi-yong-github-da-jian-zi-ji-de-maven-si-fu/aliyun1.jpg"></center># 我们如何上传自己的jar包给其他人使用## 方式一我们如果要上传自己的jar,只需要把jar上传到国外的maven中央仓库就行了,使用的人只需要把对应的坐标写到pom文件中,然后从中央仓库去下载就好了嘛。但是如何把自己的jar上传到maven的中央仓库呢? 使用教程在这里 https://issues.sonatype.org/secure/Dashboard.jspa 还是比较麻烦的。考虑到后续的下载速度，我不是很想用这样的方式。## 方式二自己搭建maven私服,这个只有大公司可以搞搞,如果是散户个人或者创业初期的小团队还是算了吧。因为花钱买服务器不说，你自己还得搭建nexus等，搭建好后还有权限、账号、密码等一大坨需要配置的。## 方式三天下没有没费的午餐,只是你还没有发现罢了。这里我自己使用过 阿里的私服 以及 使用github的管理包的功能。阿里的私服使用教程。需要先申请阿里云的账号。<p>github也可以充当maven服务器,用来存储自己的jar包</p><h3 id="access-token"><a class="markdownIt-Anchor" href="#access-token"></a> Access Token</h3><p><a href="https://docs.github.com/cn/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">官方文档</a></p><h3 id="settingxml-配置"><a class="markdownIt-Anchor" href="#settingxml-配置"></a> setting.xml 配置</h3><p><a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插件</title>
      <link href="/2021/08/15/gong-ju-kong/hexo/hexo-cha-jian/"/>
      <url>/2021/08/15/gong-ju-kong/hexo/hexo-cha-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="展示提示信息"><a class="markdownIt-Anchor" href="#展示提示信息"></a> 展示提示信息</h1><p><a href="https://github.com/lxl80/hexo-admonition">https://github.com/lxl80/hexo-admonition</a></p><p>!!! note Hexo-admonition 插件使用示例<br>这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 note，并设置了自定义标题。<br>提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊我写博客的原因</title>
      <link href="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/"/>
      <url>/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/</url>
      
        <content type="html"><![CDATA[<p>大学的时候经常上网搜索一些问题的答案,看到别人写的博客,于是也萌生出自己写博客的想法,觉得写出来的文章给人看很有成就感。于是开始在像博客园啊、CSDN上啊创建自己的博客,但是它们的页面都太丑了,而且页面样式不能自己设计只能在上面发表文章,没有所有权只有使用权的感觉,用着不是很爽,于是想搭建自己的博客网站。</p><h3 id="免费建站阶段"><a class="markdownIt-Anchor" href="#免费建站阶段"></a> 免费建站阶段</h3><p>那个时候还不知道 github , 即使知道也不见得能知道github可以做静态博客网站。于是开始全网搜索，寻找能够免费建站的网站，搜寻了一大堆，但是很多都只是试用，试用一段时间后就不能再用了，现在也记不得名字了，反正当年做这个还是挺多的，但往往打着免费的旗号来吸引人，一段时间后就开始收费了。当时考虑到自己做这个博客是要长久的，而且自己不可能有太多资金投入到这个上面，如果对这类平台产生了依赖，后果不堪设想，就等着被收钱吧。因此换了一种思路，开始全网搜索免费的服务器。</p><h3 id="免费服务器建站阶段"><a class="markdownIt-Anchor" href="#免费服务器建站阶段"></a> 免费服务器建站阶段</h3><p>但也面临着同样的问题，那就是不可能永久免费。但是可是可但是，功夫不负有心人，对于我这样的穷小伙，还是在犄角旮旯里面找到了一些号称免费的服务器，以及零星的建站教程，开始了自建之旅。</p><p>好在那个年代有一批免费的服务器可以在网上申请得到，当时用的免费服务器是 <a href="https://ramses.freewha.com/">https://ramses.freewha.com/</a> 这个. 这个居然还活着</p><center> <img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/iShot_2023-07-29_23.07.35.jpg"> </center>于是开始在上面部署wordpress. wordpress 的好处就是你可以开始安装自己的插件了，可以在一定程度上美化自己的页面了。wordpress的后台大概长这个样子。<center> <img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/iShot_2023-07-29_23.14.55.jpg"> </center>但是域名很难搞到，只能自己找免费的二级域名使用，好景不长域名和免费服务器总有试用完的时候，于是不得不每隔一段时间就换一批，麻烦过后开始追求极简主意。<h3 id="简书阶段"><a class="markdownIt-Anchor" href="#简书阶段"></a> 简书阶段</h3><p>追求极简主义，学会了markdown，遇到了简书，开始在简书上写文章，而且有些文章被推到了首页，关注的人也很多，成就感再次爆棚。</p><center> <img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/image.png"> </center>用了大概一年吧，再后来简书也开始穿插广告了，于是也不喜欢了。总觉得有一种不纯粹的感觉，就停止更新了。<h3 id="本地维护阶段"><a class="markdownIt-Anchor" href="#本地维护阶段"></a> 本地维护阶段</h3><p>不再网上发布了，不代表自己就不记录笔记了。只是转到了线下，于是全网搜索，试用了很多本地编辑器，当时在ubunt上开发，发现一款笔记神器叫cherrytree。 网站是 <a href="https://www.giuspen.com/cherrytree/">https://www.giuspen.com/cherrytree/</a> ，图标是一个红色的小樱桃.页面大概长下面这个样子。</p><center> <img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/image2.png"> </center>后来用了mac电脑，用苹果系统进行办公，无奈的是mac上没有cherrytree,人家没有mac版. 于是不得不找替代品，最终找了一款同样是树型结构组织文档的本地工具叫scrivener 大概长线面这个样子。以为他也是树型结构组织的。<center> <img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/iShot_2023-07-29_23.29.41.jpg"> </center>这里在推荐一下语雀，不过因为语雀普通版一个月只能写100片文章，大部分情况是够了，不过就是语雀是云端存储，数据不在本地，敏感信息就不能写了。<h3 id="hexo阶段"><a class="markdownIt-Anchor" href="#hexo阶段"></a> hexo阶段</h3><p>工作之后，工作之余会把自己遇到的问题和解决方案记录到本地的笔记上，久而久之积累了一些经验和技巧，又开始想要分享出去了。于是最初的愿望有被勾起：我想要一个自己的博客网站，因此开始在网上到处搜索别人建站的手段，遇到了一写页面很相似的博客，敏锐的觉察到一定有某个模板或工具在做这件事情，直到查到hexo这个工具，于是有了现在的网站，git免费，服务器免费、域名免费、而且永不到期才有了现在的博客。</p><h3 id="微信公众号"><a class="markdownIt-Anchor" href="#微信公众号"></a> 微信公众号</h3><p>想想自己已经写了快5年了，汇聚成这么些年的技术总结这个网站，后来微信公众号比较流行，又搞过一段时间的微信公众号也叫这么些年的技术总结，旨在记录自己在工作中遇到的技术问题和答案以及自己的反思。 微信公众号大概长这个样子。 后台大概长后面那个样子。</p><img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/WechatIMG21.jpg" style="height: 300px;  float:left"><img src="/2021/08/14/si-kao/liao-liao-wo-xie-bo-ke-de-yuan-yin/image3.png" style="height: 300px; ">]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git功能已上线后回滚代码</title>
      <link href="/2021/08/05/gong-ju-kong/git/git-gong-neng-yi-shang-xian-hou-hui-gun-dai-ma/"/>
      <url>/2021/08/05/gong-ju-kong/git/git-gong-neng-yi-shang-xian-hou-hui-gun-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>我们往往拿master分支作为稳定版分支，然后基于master分支checkout出feature分支进行各自的需求开发。一旦开发完成就会往master分支上进行merge,然后才上线,这也是常见的一种git流程。</p><p>最近同事遇到一个场景需要进行回滚,怎么回滚都很别扭,特此记录一下。</p><p>master分支某个tag上线之后,又经理了几次迭代,这期间又有个同学A往master分支merge过代码并发布,好巧不巧某个功能一开始没有发现问题,大家都以为没有问题，中间又有AB两个同学各自提交了一些代码并发布，有一天同学B往master分支merge了自己的功能需求代码并进行了发布，好巧不巧这时候发现A同学的功能有bug。这时候走hotfix分支紧急修复是来不及了，按理说找到之前有Bug的那一次merge然后直接revert就行。但是偏偏A同学也不确认究竟是哪一次merge引入的这个问题，中间又引入了好几个同学的merge，而且直接revert还是得解冲突，因为后续的一个merger依赖之前的merge，要revert必须全部相关的merge统统revert</p><p>master 分支某个稳定版之后有很多同学把自己的代码合并到了master分支并进行了上线，后来发现某个同学的功能有bug，这时候如果回滚到该同学之前的某个版本的话，那其他同学在他之后的所有 commit 和 merge 都会丢失，也就是别人写的功能也跟着回滚了。这个时候最好的方式是只revert有bug的哪些commit 或者 merge。这里如果忘稳定版master分支合并用的是rebase策略就不容易处理了，因为你必须摘出哪些是需要回滚的commit，如果用的是merge策略就好多了，直接revert某个commit就行。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看CPU型号以及核心数量</title>
      <link href="/2021/08/05/linux/cha-kan-cpu-xing-hao-yi-ji-he-xin-shu-liang/"/>
      <url>/2021/08/05/linux/cha-kan-cpu-xing-hao-yi-ji-he-xin-shu-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="mac"><a class="markdownIt-Anchor" href="#mac"></a> MAC</h1><p><code>sysctl machdep.cpu.brand_string</code> 处理器型号。<br><code>sysctl hw.physicalcpu</code> 物理核心数量。<br><code>sysctl hw.logicalcpu</code> 逻辑核心数量。</p><p>物理核心数量就是服务器上实际有几颗CPU，按理论上来说一个CPU有一个核，这个核指的是 逻辑运算单元 LAU。但是一个CPU内部可有多组寄存器单元,有一个寄存器组就能并发执行多个任务也就是进程或者线程，也就是超了一个原来本来只能运行一个线程的限制，这叫超线程，有几组寄存器就叫有几个逻辑核心。</p><h1 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> LINUX</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-jq</title>
      <link href="/2021/08/04/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-jq/"/>
      <url>/2021/08/04/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-jq/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>JSON 是一种轻量级的数据交换格式。其采用完全独立于语言的文本格式，具有方便人阅读和编写，同时也易于机器的解析和生成。这些特性决定了 JSON 格式越来越广泛的应用于现代的各种系统中。作为系统管理员，在日常的工作中无论是编辑配置文件或者通过 http 请求查询信息，我们都不可避免的要处理 JSON 格式的数据。</p><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><h2 id="mac"><a class="markdownIt-Anchor" href="#mac"></a> Mac</h2><p><code>brew install jq</code></p><h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt; jq -hjq - commandline JSON processor [version 1.6]Usage:jq [options] &lt;jq filter&gt; [file...]jq [options] --args &lt;jq filter&gt; [strings...]jq [options] --jsonargs &lt;jq filter&gt; [JSON_TEXTS...]jq is a tool for processing JSON inputs, applying the given filter toits JSON text inputs and producing the filter's results as JSON onstandard output.The simplest filter is ., which copies jq's input to its outputunmodified (except for formatting, but note that IEEE754 is usedfor number representation internally, with all that that implies).For more advanced filters see the jq(1) manpage ("man jq")and/or https://stedolan.github.io/jqExample:$ echo '{"foo": 0}' | jq .{"foo": 0}Some of the options include:  -c               compact instead of pretty-printed output;  -n               use `null` as the single input value;  -e               set the exit status code based on the output;  -s               read (slurp) all inputs into an array; apply filter to it;  -r               output raw strings, not JSON texts;  -R               read raw strings, not JSON texts;  -C               colorize JSON;  -M               monochrome (don't colorize JSON);  -S               sort keys of objects on output;  --tab            use tabs for indentation;  --arg a v        set variable $a to value &lt;v&gt;;  --argjson a v    set variable $a to JSON value &lt;v&gt;;  --slurpfile a f  set variable $a to an array of JSON texts read from &lt;f&gt;;  --rawfile a f    set variable $a to a string consisting of the contents of &lt;f&gt;;  --args           remaining arguments are string arguments, not files;  --jsonargs       remaining arguments are JSON arguments, not files;  --               terminates argument processing;Named arguments are also available as $ARGS.named[], whilepositional arguments are available as $ARGS.positional[].See the manpage for more options.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要说明的是 jq 只能接受 well form 的 JSON 字符串作为输入内容。也就是说输入内容必须严格遵循 JSON 格式的标准。所有的属性名必须是以双引号包括的字符串。对象的最后一个属性的末尾或者数组的最后一个元素的末尾不能有逗号。否则 jq 会抛出无法解析 JSON 的错误。</p><h2 id="官方使用手册"><a class="markdownIt-Anchor" href="#官方使用手册"></a> 官方使用手册</h2><p><a href="https://stedolan.github.io/jq/manual/">https://stedolan.github.io/jq/manual/</a></p><h1 id="qa"><a class="markdownIt-Anchor" href="#qa"></a> QA</h1><ol><li>如何去掉返回结果中value的双引号</li></ol><blockquote><p>使用 <code>-r</code> 参数</p></blockquote><pre class="line-numbers language-commandline" data-language="commandline"><code class="language-commandline">echo '{"foo": 42, "bar": "less interesting data"}'|jq -r .bar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>  <img src="/2021/08/04/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-jq/jq1.jpg"></center>2. request_timestamp/0 is not defined at <top-level><pre class="line-numbers language-text" data-language="text"><code class="language-text">jq: error: request_timestamp/0 is not defined at &lt;top-level&gt;, line 1:request_timestampjq: 1 compile error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>&gt; 解决方法:  local subJson=$(echo "${json}"|jq ".\"${key}\"") 用引号包裹</top-level>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这次主R跨团队项目中犯得错误</title>
      <link href="/2021/07/12/si-kao/zhe-ci-zhu-r-kua-tuan-dui-xiang-mu-zhong-fan-de-cuo-wu/"/>
      <url>/2021/07/12/si-kao/zhe-ci-zhu-r-kua-tuan-dui-xiang-mu-zhong-fan-de-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>第一次当跨团队项目的主R，涉及3个团队，十三个系统,没什么经验，故而在这里总结一下自己在整个主R过程中所犯的错误。一则锻炼自己的思考能力，二则审视自身的不足，三则希望看到这边文章的人能够当成一个避坑手册。我写的这些并不是复盘，因为复盘需要重新审视目标然后在看整个事情中做的好的点与不好的点。我并不认为我在这次主R的过程中有什么亮点，功过自有他人来评价。但对于过错，我还是要自己梳理一下的。</p><ol><li>我组织会议没有提前同与会人员沟通时间，没有提前发出会邀，临时拉人。导致想要就某个问题进行讨论的时候大家没有预留出时间，然后又重新同相关人员确认此问题的沟通时间，浪费了时间。<br>反思：</li></ol><ul><li><p>要就某个问题要进行讨论的时候，一定要提前与相关同学进行沟通，确认相关人员都什么时候有时间，把时间先确定好。因为人都是有惰性的，只要没人催我就不主动，只要没定下时间来就都默认不紧急，事情就这样浪荡着。所以确定这样一个时间，也其实就是给大家一个约束，只要定了时间，他就会惦记着这件事情，他在安排其他事情的时候就会想着某天某天我还有一个问题需要讨论。而提前发出会邀则是强化这个约束，也是给大家一个提醒，让大家留出时间来安排开会这件事情，不至于忘了。</p></li><li><p>同大家讨论的时候，一定得在大家都在场的情况或者大部分相关人员都在场的情况下进行讨论。否则有些细节问题可能讨论不清，因为术业有专攻，每个人都只负责自己的一块事情，最了解的也是自己的领域。我们在讨论问题的时候，每个人都会选择自保，会潜意识的减少自己的工作内容，这时候那个没来的同学就会成为众矢之的，所有的问题都可能集中推给不在场的人，这样轻则会使会议进程阻塞，重则导致责任分工不明。因为大家都说这块不是自己的任务，是不在场的谁谁的，需要他来确定，这样针对这个问题我们就很难继续推进下去，因为要推进下去就要没来的那个人确定某事，可他又没来，然后你就会陷入囧境，这个问题只能先放一放，等那个不在场的人来了再继续讨论，于是你不得不在组织一次会议，或者在单独找那个没来的同学去确认这件事情，等你确认这件事情的时候可能又会有很多变数，例如有人会说开会的时候为什么不叫我、不等我！现在才来跟我说。于是你就必须又在几方游说，搞得自己很累，人们也会对你这个主R有意见。</p></li><li><p>而我们想要约定这个时间，你要一个一个人的问去沟通显然效率不高，这时候我们可以把与会人员拉到一个群里。然后表明会议主题和期望的与会时间，询问大家是否可以参加。</p><blockquote><p>例如 明天下午5点在岳阳厅就换开需求进行讨论，主题在于明确系统边界确定设计方案出炉时间。大家都有时间么？</p></blockquote><p>如果可以估算一个大概的时间最好，当然这个并不能很好的估计，估计少了可能开不完，估计多了可能大家都推脱说没有时间了。</p><blockquote><p>例如 明天下午5点在岳阳厅就换开需求进行讨论，主题在于明确系统边界确定设计方案出炉时间，大概占用大家1个小时的时间，大家都有时间么？</p></blockquote><p>其实上面这个时间也不光是说给与会同学听的，也是对主R的一个考验。身为主R你能不能清晰的定位你事情的分工，能不能把控会场的节奏。你说了要占用大家1个小时，那你能不能把时间控制在一个小时左右。这也是个约束，身为主R的你就会主动去把控会场的节奏，否则大家都会再那儿漫无目的的讨论，反正也不知道讨论到啥时候，就这样耗着呗。这其实也在潜移默化的锻炼你的抗风险能力和风险把控能力，你细想想是不是？</p><ul><li>临时拉人参会，甚至打电话说这儿有个关于什么什么的会议，你来一下需要你参加。<br>这个问题一来人家有没有时间还不一定，也就牵扯到第一个问题，没有提前沟通好时间。二来，我这么说话也显得不够尊重人，别人会想，怎么其他人开会你都通知了，到我了就召之即来么？（当然这是我自己yy的）。这也暴露出我对主R的这件事情的认识不足，我连这个开个会需要谁参加都考虑不清楚。</li></ul></li></ul><ol start="2"><li>我对于时间这块把控的也很不好，定这个开会时间总是拖得很晚。在组织整个部门技术review的时候，尤其在涉及到外部部门的时候，一回儿A说没时间一回儿B说没时间，会议时间一拖再拖。<br>反思：</li></ol><ul><li>我不应该等到全部人都ready了才进行review。因为某个系统的设计可能另一个系统根本就不关心，还要强拉人家来听，不说反感但也肯定不会听的。<ul><li><p>我只需要将相互关联的几个系统的主R拉到一起进行review就可以了，因为相互关联的几个系统其实是一个整体然后中间又有一些矛盾，涉及到一个系统跟一个系统交互的时候，另一个系统的主R一定会关心别人的设计里面是怎么跟我交互的，因为他一定担心别人的设计会使自己的设计变得是不是复杂。一个系统要先调用A在调用B，他一定会要求A把这个过程包装好，而A一定会说我只负责原子的操作，至于业务逻辑你上游自己决定。</p></li><li><p>如果自身强势，就要求与会人员在规定时间参加会议，这条规则轻易不要用，还是本着沟通协调的处事原则。如果自身弱势，则同与会人员沟通协调时间参加会议</p></li></ul></li></ul><ol start="3"><li>我在组织会议的时候节奏把控不好，往往中途就会有人离场。<br>反思：</li></ol><ul><li><p>我发现会议开始的半小时，大家都会听，因为你会发现大家都盯着大屏幕。会议超过1小时，你会发现有些人开始频繁的看自己的电脑了。会议超过1个半小时，你会听到有人在敲键盘了，会议超过两小时，你会发小敲键盘的声音没有了，开始有人打哈欠了。如果会议超过3小时，一定会有前面发言的人离场的事情发生，他会先离场，然后私下跟你说：我看接下来的讨论跟我没关系了，所以我先走了。所以每次会有最好控制在一小时左右。</p></li><li><p>我发现在会上总会有几个人是不发言的。这样他的参与感就会很低，可能他就不想参与或者本次会议就跟他没有关系。这是后你得考虑你是不是真的拉错了人，先怀疑一下人生吧，如果真拉错了那就只能抱歉等他自行离开吧。否则你就可以问问他的意见啊，让他发言一下，哪怕说句没意见也行。</p></li></ul><ol start="4"><li>关于群里消息的问题，我发现大家回复的都不是很积极。<br>反思：</li></ol><ul><li><p>这说明我自己没有权威，如果是王兴在群里问问题，你看有人敢不回复么，也可能是我没有给大家留下一个靠谱的印象，大家对于我担任主R这件事没太当回事儿。</p></li><li><p>还是那句话，人都是有惰性的，有些人可能根本就不关心这个群，看到消息可能也就一点而过，也不会主动回复，我有很多时候也是，群消息是在太多了，很多时候也都是囫囵的扫一眼，不过我看到消息还会回，即使不会立刻回复我也会把他置顶。</p></li><li><p>这时候可以单敲某个人，让他先回复你，这样别人看到群里有人回复了他也就会回复了。所以你发出去的消息如果想要别人都回复你，要么你是领导，要么就得有一个领头人，只要有人回复了，其他人也会跟着回复。因为好多时候大家都不想当第一个回复的人，尤其是你还不是他上级的时候。</p></li></ul><ol start="5"><li>我时间预估不足，没有预留出buffer。有时候期望能周五完成某件事情，但是有人非得拖到下周一。</li></ol><ul><li>说话前先说出自己的期望，然后咨询大家是否可以在这个时间点完成。</li><li>自己期望的这个时间点一定要留出余地。例如最晚周5，那我们就提周4，预留出1天的时间。这其实就暴露出自己没有风险意识，你排个需求还知道给自己留个buffer呢，在推动这件事情上我就没有做的很好。这个也不是说不诚实，玩儿心眼儿，只要是有风险的事情一定要留有余地，否则真出问题了连个补救都没有。</li></ul><ol start="6"><li>有时候某人就某事就是不给出你一个具体的时间点，本来你期望大家给出设计需要多少时间，但是系统设计者就是给不出来。</li></ol><ul><li>一则有时候某个系统牵扯的确实多，无法当场给出一个评估的时间。包括自己也一样，在过需求评审的时候也没办法知道自己究竟需要多久才能设计好。因为还有好多东西是未知的。</li><li>还有一方面，人都想自保，给自己留出一定的时间，不想把自己逼得太紧。这时候就算你想帮他，他也会告你你他需要时间熟悉代码啊，需要调研啊。</li><li>那我们退而求其次，既然你给不出具体的时间，那你给一个给出具体时间的时间。你要熟悉，你要调研，好，那你需要多久？这个时间一定得让他给出。</li><li>那这个时间他也说不好说，那也不能就这样了，因为如果没有时间约束，这个事情就没办法推进，然后对方也不着急做这件事情。这时候可以留出一天的时间，一天后再询问一下，看看能否给出时间</li><li>还给不了，那对不起，直接升级找他的领导反映一下吧。因为事情不能拖着，而你只是个主R，并不是他的领导，主R的职责是把控风险，不是写代码，这时候已经影响后续的发展了，风险有了，自己把控不了，就需要及时暴露出来。</li></ul><ol start="7"><li>我有时候在两个系统之间成为传声筒</li></ol><ul><li>作为主R，一上来大家不知道自己的上下游是谁，这时候有问题大家都回来问你，比如换开标识是应该存在交易侧还是结算侧啊，这时候该是哪个系统的职责就给对方找相应的系统对接人。而不是自己充当中间人，把A的问题传给B,再把B的回答传给A。</li></ul><ol start="8"><li>我面对人员变动无动于衷，没有风险意识</li></ol><ul><li>对于某个系统中途换了产品、换了开发，我没有采取任何措施，以为会按照以前一样一如既往的发展。但实际在后期问题就开始暴露出来了，各种没有确认和明确的问题接踵而至，导致工时估计不准。</li><li>其实中间换人是一个风险极高的事情，我以后需要重视，当然这种事情一般很难遇到，因为往往我们都是锁死在一个项目里面的，人员一般都很稳定。如果换人了，交接工作能不能做好，之前遇到的坑是不是得在重新踩一遍，不说全部踩一遍，至少50%吧，有些问题是不是得重复解释第二遍，但这也是我们必须要耽误的时间，否则后续的事情更难推进。</li><li>这个时候应该敦促他们之间做好交接，虽然我自己做不了什么，但是可以尽到我的周知义务，至于他们能不能交接好那是他们的事情，但是他们能不能很好的交接就是你的事情。</li></ul><ol start="9"><li>我在“推动”这件事情上其实投入还是不足的<br>反思</li></ol><ul><li>可能因为自己也忙吧，不过这只是个借口。我也不明白我为什么总是不愿意去推动某些事情。</li><li>这个事情还没有想好改怎么在推动事情的发展上有什么技巧。</li></ul><ol start="10"><li>我前期还是依赖bill太多</li></ol><ul><li>凡是开会必拉bill，凡是争议必请bill拍板。这两个凡是要不得。</li><li>一开始没有经验，比较胆怯，怕自己说不明白理解不了。这时候还是锻炼一下自己的脸皮吧。</li><li>对于争议，自己不敢轻易拍板，因为自己没有全局观，也是怕自己说错了。这时候还是锻炼一下自己的业务熟悉能力吧。</li><li>后期看柳鸿也是自己推进迁移的事情，就很少找bill出面，跟在后面偷偷看了一下人家是怎么组织会议以及推进的，学习了不少</li></ul><ol start="11"><li>我在会上期望大家提前暴露风险，但是不应轻易的因为风险给加工时。</li></ol><ul><li>我往往会在会上问一句，大家觉得有没有风险，有没有需要加工时的？这时候只要没有人提加工时还好，一旦开了一个先河，后续你就等着其他系统也要求加工时吧。</li><li>所以对于风险肯定是要提前暴露的，但是工时还是不要轻易地答应的好。所以就不要问那句话：有没有需要加工时。如果真的需要加工时了，会有人主动给你提的。</li><li>一延期，后续所有的计划都会打乱，联调时间需要重新协调，QA进入时间需要重新协调，产品验收时间需要重新协调，上线时间需要重新沟通等等都要重新搞。排期是一件很头疼的事情。</li></ul><ol start="12"><li>我前期在设计过程中，总希望每个系统都去了解他们的实现和设计</li></ol><ul><li>作为主R的职责是把控风险控制节奏，而不是实际的深入每个系统去设计和开发，各个系统有各自的主R，不要试图挑战他们的权威。</li><li>这样做你也不可能全部了解清楚，费时费事费力，好在bill及时阻止了我，把我及时拉回正轨，各自系统由各自系统的主R去设计，系统之间的交互有各自系统的主R去沟通，我要做的就是让他们找到对应的人。</li></ul><ol start="13"><li>我有时候做事不制定标准，导致无法验收</li></ol><ul><li>比如写上线文档，写成什么样子才算好呢。因为我一开始也没有指定标准，只是周知大家要写上线文档和回滚方案。但是大家都是简单的写一下，其实根本没有可执行性。有些人的文档里就三行，根本超不过100个字去，什么 打包、上线 就完了，也是无语了，也可能真的是人家的发布就很简单吧。</li><li>标准有不能太复杂，太复杂别人就会不停的询问你该怎么写。</li><li>不见得所有人都能按照你的标准执行，因为你根本没有决定处罚权，只有周知义务，所以大家不一定会听你的。<ul><li>这个时候可以说其要害，如果不怎么干，就有可能出什么问题，遇到问题追责的时候就要怎么样，人一旦遇到跟自己责任挂钩的时候，就算不愿意也得掂量一下后果。</li></ul></li></ul><ol start="14"><li>我做事不懂拒绝</li><li>单元测试不重视</li></ol><ul><li>现在我们的单元测试往往都是为了完成增量行覆盖率而写，很少考虑业务逻辑，我自己有时候也投机取巧，这是不可取的。</li><li>Mock框架固然好用，但我感觉我教会大家后大家都开始不管三七二十一开始一顿Mock，而且用的不亦乐乎，当总感觉写了很多没有营养的单元测试。</li></ul><ol start="16"><li>心中没谱，没有全局观</li></ol><ul><li>作为主R我没有全局意识，因为我同时还有开发三个系统：发票系统、调整项系统、还有CSG系统，还有后面的发票平台也得我来搞，就局限在这几个系统了，而对整体的系统交互没有一个全局观，不过后来逐渐有了。</li></ul><ol start="17"><li>后期跟进不足，没有用心</li></ol><ul><li>发票平台这块明知有问题但还是妥协了，放任问题就这样。</li><li>中途发票平台这块的代码由于原来的开发同学调岗，代码写的也不认真了，虽然代码不是我写的我只负责上线，但发现问题发现沟通无果后我也就佛系了，爱咋地咋地。我明知有问题，但还是建议残血上线，说明我责任心还是有欠缺，以后千万不能这样</li><li>后期对发票平台的代码跟进不及时，虽然代码不是我写的，但是交接到我这儿了，就应该搞懂并维护好后续的工作。</li><li>好在后来我还是良心发现，选择了修复</li></ul><ol start="18"><li>伪文档 我写了很多的文档，但有多少是有效和有意义的呢。</li></ol><ul><li>有些流水账营养不高就没必要浪费时间去写。</li><li>后来发现tingxing写文档和理解能力很强，用画图的方式记录文档，向他学习</li></ul><p>总结：</p><ul><li>在群里的消息，如果期望大家都及时的回复你，需要有人领头。可以和某个同学约定好，我在群里发的消息你帮忙带头先回复。</li><li>制定时间点约束，如果定不下来时间，就定一个给出时间点的时间。</li><li>工作中先小人后君子，不要着急答应，要懂得合理拒绝。这一点其实很难拿捏。</li><li>不能说什么内部消化、自己想办法之类的话，会让人反感，明摆着让人加班。</li><li>不要让自己成为传话筒，要让双方直接对接，2个人认知一件事、3个人认知一件事、100个人认知一件事其中的解释成本是不一样的。</li><li>不要事无巨细都亲自跟，解释成本太高。</li><li>对于人员变动，要有极高的风险意识，这是一件很危险的事情。</li><li>要求大家提前暴露风险，但不要轻易因为可控的风险而给加工时，有可能导致后面所有的计划都会打乱的。</li><li>主R的职责是把控风向控制节奏，不要试图深入所有的细节，忙不过来的。</li><li>做事情一定要有标准，结果要能展示。</li><li>有时候需要分摊风险。</li><li>单测要重视</li><li>心中要有谱，不说了解每个系统，但要有全局观，系统之间怎么交互的，怎么个职责划分是第一时间要了解的事情。</li><li>不要自己yy业务逻辑，一定要由产品或业务同学来定。不能说我代码应该这样就这样写。</li><li>不要有依赖心理，还是得自己扛起这些事情来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写设计模式-单例模式</title>
      <link href="/2021/07/07/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-dan-li-mo-shi/"/>
      <url>/2021/07/07/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>写单例模式,有五六种写法,但总结下来就三步</p><ol><li>构造方法私有化</li><li>持有自身的静态引用</li><li>提供获取自身引用的静态方法<br>对于构造方法私有化,目的就是为了防止在这个类的外部,被人显示的使用new关键字来进行对象的实例化,一个方法如果变成思私有的,那在这个类外部就没办法调用了。<br>持有自身的静态引用,那就是为了有朝一日我们能够创造一个唯一一个实例,然后把这个实例的唯一一个引用提供出来,这里非得用静态的原因,是因为我们提供获取这个引用的方法必须是静态的也就是第三点,而静态的方法里面用的东西必须是静态的所以我们持有的自身引用也必须是静态的。<br>而提供获取自身引用的静态方法,是因为我们没法显示的new一个实例出来了,那总得有获取这个唯一实例的方法嘛,不然怎么提供给第三方使用呢？</li></ol><p>第一种写法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Singleton01 {    //1. 构造方法私有化    private Singleton01() {    }    //2. 持有自身的静态引用，饿汉式初始化    // 这个地用静态的原因,是因为提供获取实例的方法是静态的，静态方法中用到的方法和变量必须是静态的    // 利用JVM的类加载机制,确保类中的静态变量只在类加载到内存中的时候执行一次的特性    private static final Singleton01 SINGLETON = new Singleton01();    //3. 提供获取的静态方法    public static Singleton01 getInstance() {        return SINGLETON;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种写法叫做饿汉式,因为不是懒加载的,而是在类加载的过程中就实例化了,而不是在用的时候也即是getInstance的时候才实例化的。有些人就觉得这样一点都不优雅,因为他们觉得对象如果我不使用,你就不应该初始化去占用空间,而是要等到我实际使用的时候才初始化才叫完美。于是有了下面的懒汉式加载写法</p><p>第二种写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton02</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. 构造方法私有化</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2. 持有自身的静态引用,懒加载</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton02</span> <span class="token constant">SINGLETON</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 提供获取实例的静态方法</span>    <span class="token comment">// 但是这种是按方式有瑕疵，在并发场景下可能会有问题</span>    <span class="token comment">// 并发的时候，两个线程同时判断SINGLETON为null,同时最后那个赋值线程赋给的值</span>    <span class="token comment">// 如何证明只要用多线程初始化实例打印获取到的单例对象的hashcode不一样就行</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton02</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SINGLETON</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token constant">SINGLETON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token constant">SINGLETON</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是这种写法其实是错的,因为在并发情况下根本没办法保证返回的单例对象是同一个。于是我们很自然而然的想到加锁的方式</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell高级编程技巧</title>
      <link href="/2021/06/03/linux/shell/shell-gao-ji-bian-cheng-ji-qiao/"/>
      <url>/2021/06/03/linux/shell/shell-gao-ji-bian-cheng-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="一-shell重定向"><a class="markdownIt-Anchor" href="#一-shell重定向"></a> 一、Shell重定向</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>就像我们平时写的程序一样，一段程序会处理外部的输入，然后将运算结果输出到指定的位置。在交互式的程序中，输入来自用户的键盘和鼠标，结果输出到用户的屏幕，甚至播放设备中。shell脚本也一样，但是我们一般在使用shell命令的时候，更多地还是通过键盘输入，然后在屏幕上查看命令的执行结果。如果某些情况下，我们需要将shell命令的执行结果存储到文件中，那么我们就需要使用输入输出的重定向功能。</p><h2 id="文件描述符"><a class="markdownIt-Anchor" href="#文件描述符"></a> 文件描述符</h2><p>当执行shell命令时，会默认打开3个文件，每个打开文件都有对应的文件描述符来方便我们使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangdeMacBook-Pro:~$ <span class="token function">lsof</span> <span class="token parameter variable">-p</span> <span class="token variable">$$</span>COMMAND   PID      <span class="token environment constant">USER</span>   FD   TYPE DEVICE SIZE/OFF                NODE NAME<span class="token function">bash</span>    <span class="token number">25660</span> chenshang  cwd    DIR    <span class="token number">1,4</span>     <span class="token number">1504</span>         <span class="token number">12884930381</span> /Users/chenshang<span class="token function">bash</span>    <span class="token number">25660</span> chenshang  txt    REG    <span class="token number">1,4</span>  <span class="token number">1296704</span> <span class="token number">1152921500312764811</span> /bin/bash<span class="token function">bash</span>    <span class="token number">25660</span> chenshang  txt    REG    <span class="token number">1,4</span>  <span class="token number">2547760</span> <span class="token number">1152921500312767057</span> /usr/lib/dyld<span class="token function">bash</span>    <span class="token number">25660</span> chenshang    0u   CHR   <span class="token number">16,4</span>    0t142                 <span class="token number">819</span> /dev/ttys004<span class="token function">bash</span>    <span class="token number">25660</span> chenshang    1u   CHR   <span class="token number">16,4</span>    0t142                 <span class="token number">819</span> /dev/ttys004<span class="token function">bash</span>    <span class="token number">25660</span> chenshang    2u   CHR   <span class="token number">16,4</span>    0t142                 <span class="token number">819</span> /dev/ttys004<span class="token function">bash</span>    <span class="token number">25660</span> chenshang  255u   CHR   <span class="token number">16,4</span>    0t142                 <span class="token number">819</span> /dev/ttys004<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上图,<code>lsof -p $$</code> 其中 <code>$$ </code>代表当前进程,这段指令的意思是输出当前进程的打开文件描述符都有哪些. 其中FD列代表文件表述负号。目前我们看到的只有上述几个，但是FD的类型非常多，不过我们并不是全部都需要关心和使用，我们只需要知道文件描述符其实是一个整数而已,这个整数如果在没有特殊配置的情况下默认最大是255，也就是说一个进程最多打开255个文件，一般是够用了，但是总有贪心的时候，我们可以用 <code>ulimit -n</code> 来设置进程打开的最大文件描述符的大小。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>cwd</td><td>表示 current  work dirctory,即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</td></tr><tr><td>txt</td><td>该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init  程序</td></tr><tr><td>lnn</td><td>library references （AIX）</td></tr><tr><td>er</td><td>FD  information  error （see  NAME  column）</td></tr><tr><td>jld</td><td>jail  directory（FreeBSD）</td></tr><tr><td>ltx</td><td>shared  library text（code and  data）</td></tr><tr><td>mxx</td><td>hex  memory-mapped  type number  xx.</td></tr><tr><td>m86</td><td>DOS  Merge  mapped  file</td></tr><tr><td>mem</td><td>memory-mapped  file</td></tr><tr><td>mmap</td><td>memory-mapped device</td></tr><tr><td>pd</td><td>parent  directory</td></tr><tr><td>rtd</td><td>root  directory</td></tr><tr><td>tr</td><td>kernel  trace file （OpenBSD）</td></tr><tr><td>v86</td><td>VP/ix  mapped  file</td></tr><tr><td>0</td><td>表示标准输出</td></tr><tr><td>1</td><td>表示标准输入</td></tr><tr><td>2</td><td>表示标准错误</td></tr></tbody></table><p>我们现在先关心 0、1、2 这三个文件描述符</p><table><thead><tr><th>类型</th><th>文件描述符</th><th>默认情况</th><th>对应文件句柄位置</th></tr></thead><tbody><tr><td>标准输入（standard input）</td><td>0</td><td>从键盘获得输入</td><td>/proc/self/fd/0</td></tr><tr><td>标准输出（standard output）</td><td>1</td><td>输出到屏幕(即控制台)</td><td>/proc/self/fd/1</td></tr><tr><td>错误输出（error output）</td><td>2</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/2</td></tr></tbody></table><h2 id="输出重定向"><a class="markdownIt-Anchor" href="#输出重定向"></a> 输出重定向</h2><p>我们使用&gt;或者&gt;&gt;对输出进行重定向。符号的左边表示文件描述符，如果没有的话表示1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。语法如下所示:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">command1 <span class="token operator">&gt;</span> file1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="输入重定向"><a class="markdownIt-Anchor" href="#输入重定向"></a> 输入重定向</h2><p>我们使用&lt;对输入做重定向，如果符号左边没有写值，那么默认就是0。和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">command1 &lt; file1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="here-document"><a class="markdownIt-Anchor" href="#here-document"></a> Here Document</h2><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。<br>它的基本的形式如下：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">command &lt;&lt; delimiter    documentdelimiter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><p>注意：<br>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。<br>开始的delimiter前后的空格会被忽略掉。</p><h2 id="重定向绑定"><a class="markdownIt-Anchor" href="#重定向绑定"></a> 重定向绑定</h2><p>好了，在有了以上知识的基础上，我们经常见到这样的写法 <code>&gt;/dev/null 2&gt;&amp;1</code>。这条命令其实分为两命令，一个是<code>&gt;/dev/null</code>，另一个是<code>2&gt;&amp;1</code>。</p><h4 id="devnull"><a class="markdownIt-Anchor" href="#devnull"></a> <code>&gt;/dev/null</code></h4><p>这条命令的作用是将标准输出1重定向到<code>/dev/null</code>中。<code>/dev/null</code>代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了<code>&gt;/dev/null</code>之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p><h4 id="21"><a class="markdownIt-Anchor" href="#21"></a> <code>2&gt;&amp;1</code></h4><p>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</p><p>linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以<code>&gt;/dev/null 2&gt;&amp;1</code>的作用就是让标准输出重定向到<code>/dev/null</code>中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了<code>/dev/null</code>中，错误输出同样也被丢弃了。执行了这条命令之后，该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><p>这样的用法主要使用在我们想执行某条指令，而且也知道这条指令不会产生错误或者我们就根本不关心这条这令的执行结果的时候使用，例如我们先清空一下内存，然后在执行某某操作，我们清理内存的目的只是让程序执行的空间多一点，执行的速度快一点，至于是否真的释放了多少空间，我们是不关心，这时候就可以用这个命令。</p><p>在BaseShell中的实战应用<br>在函数中既想打印日志,有不想影响函数的返回值,因为我么知道一个函数中的标准输出都将作为函数的返回值输出,即使是中间的日志结果。为此我们可以用到重定向来解决此问题.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">log_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${log_level}</span> <span class="token parameter variable">-ge</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\\">\\</span>033[37m[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%dT%H:%M:%S<span class="token variable">)</span></span>][<span class="token variable">$$</span> <span class="token variable">$BASHPID</span>] [INFO] [<span class="token variable">${FUNCNAME<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>]:    <span class="token variable">$*</span><span class="token entity" title="\\">\\</span>033[0m"</span><span class="token operator">|</span>trim <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token file-descriptor important">&amp;2</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%dT%H:%M:%S<span class="token variable">)</span></span>][<span class="token variable">$$</span> <span class="token variable">$BASHPID</span>] [INFO] [<span class="token variable">${FUNCNAME<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>]:    <span class="token variable">$*</span>"</span><span class="token operator">|</span>trim <span class="token operator">&gt;&gt;</span> <span class="token string">"<span class="token variable">${LOG_DIR}</span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>.info.log"</span>  <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%dT%H:%M:%S<span class="token variable">)</span></span>][<span class="token variable">$$</span> <span class="token variable">$BASHPID</span>] [INFO] [<span class="token variable">${FUNCNAME<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>]:    <span class="token variable">$*</span>"</span><span class="token operator">|</span>trim <span class="token operator">&gt;&gt;</span> <span class="token string">"<span class="token variable">${LOG_DIR}</span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>.log"</span>  <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  <span class="token keyword">fi</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 2&gt;&amp;1 会把所有的标准输出当成标准错误输出,标准错误是不会被认为函数的返回值的。</p><h1 id="二-进程间通信"><a class="markdownIt-Anchor" href="#二-进程间通信"></a> 二、进程间通信</h1><p>进程间通信，无外乎 管道、有名管道、共享存储、信号、信号量、消息队列、套接字 这几种，进程间通信从来都不能直接通信，必须找一个中间媒介。中间媒介就是上面说的几种，他们都要一个特点就是：一个进程的信息先存起来，然后另一个进程在读出来，这样就达到了进程间通信的目的。线程间通信也一样，我们学Java的多线程的时候简单很多，只有两种，想想线程间是怎么通信的：什么共享内存啊（就是搞个votail的共享变量，类似进程通信的共享存储）、什么wait、notify啊，Java叫通知机制（就是搞个信号，类似进程通信的信号）</p><h2 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h2><p>管道是进程间通信的主要手段之一。一个管道实际上就是个只存在于内存中的文件，对这个文件的操作要通过两个已经打开文件进行，它们分别代表管道的两端。管道是一种特殊的文件，它不属于某一种文件系统，而是一种独立的文件系统，有其自己的数据结构。根据管道的适用范围将其分为：无名管道和命名管道。</p><h3 id="无名管道"><a class="markdownIt-Anchor" href="#无名管道"></a> 无名管道</h3><p>主要用于父进程与子进程之间，或者两个兄弟进程之间。在linux系统中可以通过系统调用建立起一个单向的通信管道，且这种关系只能由父进程来建立。管道是将前一个命令的输出作为后一个命令的输入 <code>命令1 | 命令2 | 命令3 | ...</code></p><p>在BaseShell中的实战应用<br>如何写一个命令,让他支持使用管道的形式接受参数呢。例如 我想计算某个字符串的 hashCode. 我期望的形式是 <code>echo " 123 "|hashCode</code> 然后就能得到结果。 而在计算 hashCode 之前，我还期望先trim一下。所以我更希望的写法是 <code>echo " 123 "|trim|hashCode</code>。我的BaseShell是如下实现的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是一个辅助函数,意思是被其他函数调用的函数,以扩展原来函数的功能</span><span class="token comment"># 1. 有参数的时候直接走 _action 否则执行2</span><span class="token comment"># 2. 从标准输出中获取参数,并执行 _action</span><span class="token comment"># 该方法扩展原函数,使其具备从标准输出获取参数的能力,因此原函数可以类似管道似的调用.</span><span class="token comment"># @see BaseString.sh trim|string_length</span><span class="token comment"># @attention 从标准输入读取的参数是以空格分隔的 echo "1 2" "3 4"|trim 最终读取到的参数是 "1 2 3 4" 而不是 "1 2" 和 "3 4"</span><span class="token comment"># 适用于明确只有一个参数的情况</span><span class="token keyword">function</span> <span class="token function-name function">pip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable">$*</span>  <span class="token comment">#参数长度==0 尝试从标准输出获取参数</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${<span class="token operator">#</span>param}</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token comment"># timeout 设置1秒的超时</span>    <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">timeout</span> <span class="token number">1</span> <span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token file-descriptor important">&amp;0</span><span class="token variable">)</span></span>  <span class="token keyword">fi</span>  _action <span class="token string">"<span class="token variable">${param}</span>"</span><span class="token punctuation">}</span><span class="token comment"># 去掉字符串前后空格 [String]&lt;-(param:String)</span><span class="token keyword">function</span> <span class="token function-name function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable">$*</span>  <span class="token function-name function">_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable">$*</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">${param}</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-o</span> <span class="token string">"[^ ]\+\( \+[^ ]\+\)*"</span>  <span class="token punctuation">}</span>  pip <span class="token string">"<span class="token variable">${param}</span>"</span><span class="token punctuation">}</span><span class="token comment"># 哈希code  [String]&lt;-(str:String)</span><span class="token keyword">function</span> <span class="token function-name function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable">$1</span>  <span class="token function-name function">_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">hash</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token builtin class-name">local</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>${#param}<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>      <span class="token builtin class-name">printf</span> <span class="token parameter variable">-v</span> val <span class="token string">"%d"</span> <span class="token string">"'<span class="token variable">${param<span class="token operator">:</span>$i<span class="token operator">:</span>1}</span>"</span> <span class="token comment"># val is ASCII val</span>      <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span><span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> val <span class="token operator">&gt;</span> <span class="token number">2147483647</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token comment"># hash scheme</span>        <span class="token assign-left variable">hash</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">-</span> <span class="token number">2147483648</span> <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> val <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483648</span><span class="token variable">))</span></span>      <span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span><span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> val <span class="token operator">&lt;</span> <span class="token operator">-</span> <span class="token number">2147483648</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">hash</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">2147483648</span> <span class="token operator">-</span> <span class="token punctuation">(</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> val <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483648</span><span class="token variable">))</span></span>      <span class="token keyword">else</span>        <span class="token assign-left variable">hash</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> val<span class="token variable">))</span></span>      <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token builtin class-name">printf</span> <span class="token string">"%d"</span> <span class="token string">"<span class="token variable">${hash}</span>"</span> <span class="token comment"># final hashCode in decimal</span>  <span class="token punctuation">}</span>  pip <span class="token string">"<span class="token variable">${param}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我么可以看到 pip 函数，此外 BaseShell中还有实现 pip2 和 pip3 等既可以接收管道入参也可以接收直接入参</p><h3 id="有名管道"><a class="markdownIt-Anchor" href="#有名管道"></a> 有名管道</h3><p>命名管道是建立在实际的磁盘介质或文件系统（而不是只存在于内存中）上有自己名字的文件，任何进程可以在任何时间通过文件名或路径名与该文件建立联系。为了实现命名管道，引入了一种新的文件类型——FIFO文件（遵循先进先出的原则）。实现一个命名管道实际上就是实现一个FIFO文件。命名管道一旦建立，之后它的读、写以及关闭操作都与普通管道完全相同。虽然FIFO文件的inode节点在磁盘上，但是仅是一个节点而已，文件的数据还是存在于内存缓冲页面中，和普通管道相同。管道可以想象成一个一端进入一端读取的队列,可以理解成一个先进先出的数据结构，通过 mkfifo 可以创建一个有名管道</p><p>我们执行 <code>mkfifo queue</code> 就可以创建一个有名管道,这个有名管道和上面的匿名管道一样,只不过匿名管道,么有名字,有名管道有名字而已。匿名管道主要应用与父子进程之间,而有名管道除了用在父子进程上之外,还可以用在兄弟进程之间。有名管道的特点就是,一端写入,如果另一端么有人读取的话,那么写入端阻塞。同理，如果一段读取，另一端写入，如果没有写入，那么读取端就会阻塞。利用这个特性我们可以用于控制进程并行的数量，模拟多线程控制。</p><p>在BaseShell中的实战应用<br>并发工具包 Concurrent 中的实现</p><h3 id="管道实现机制"><a class="markdownIt-Anchor" href="#管道实现机制"></a> 管道实现机制</h3><p>管道是由内核管理的一个缓冲区，相当于我们放入内存中的一个纸条。管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。一个缓冲区不需要很大一般为4K大小，它被设计成为环形的数据结构，以便管道可以被循环利用。当管道中没有信息的话，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会等待，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。</p><h2 id="信号"><a class="markdownIt-Anchor" href="#信号"></a> 信号</h2><p>信号是另一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。</p><p>在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用 Ctrl+C 等方法进入到shell状态做我们不希望做的事情。这便用到了信号处理。</p><p>以下是一些你可能会遇到的常见信号：</p><table><thead><tr><th>信号名称</th><th>信号数</th><th>描述</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>本信号在用户终端连接（正常或非正常）结束时发出，通常是在终端的控制进程结束时，通知同一session内的各个作业，这时它们与控制终端不再关联。登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。</td></tr><tr><td>SIGINT</td><td>2</td><td>程序终止(interrupt)信号，在用户键入 Ctrl+C 时发出。</td></tr><tr><td>SIGQUIT</td><td>3</td><td>和SIGINT类似，但由QUIT字符(通常是Ctrl /)来控制。进程在因收到SIGQUIT退出时会产生core文件，在这个意义上类似于一个程序错误信号。</td></tr><tr><td>SIGFPE</td><td>8</td><td>在发生致命的算术运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等其它所有的算术错误。</td></tr><tr><td>SIGKILL</td><td>9</td><td>用来立即结束程序的运行。本信号不能被阻塞，处理和忽略。</td></tr><tr><td>SIGALRM</td><td>14</td><td>时钟定时信号，计算的是实际的时间或时钟时间。alarm 函数使用该信号。</td></tr><tr><td>SIGTERM</td><td>15</td><td>程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出；kill 命令缺省产生这个信号。</td></tr></tbody></table><p>那怎么用呢? 我们如何实现我们脚本在行过程当中，当我们主动按下 <code>Ctrl+C</code>的时候主动终止呢？</p><p>加入下面一行就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">trap</span> <span class="token string">"echo 'exit...';exit"</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思就是说 捕捉信号2 然后执行 <code>echo 'exit...';exit</code>。</p><p>我们可以学习一下trap这个指令。等我出教程。</p><h1 id="三-copy-on-write"><a class="markdownIt-Anchor" href="#三-copy-on-write"></a> 三、copy on write</h1><p>大家都知道 redis 的写时复制技术，我们看看Linux是怎么做的。在Linux程序中，fork（）会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，linux中引入了“写时复制“技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。当我在父进程中开启一个子进程的时候，同样会复制一份父进程的文件描述符，只有当子进程改变文件描述符的内容时候，这个文件描述符才会分裂，所以redis的写时复制技术其实就是依赖的Linux本身就自带的机制。这跟我们多线程中的理解是不同的，因此也会造成一些误会，Java中多线程对共享变量的修改是可见的，但是在Shell的多进程里面则是相反的,你在子进程对父进程变量所做的修改是无论如何也不可的。我们来证明一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment"># 先定义一个变量</span><span class="token function-name function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token string">"父进程:<span class="token variable">${a}</span>"</span>  <span class="token punctuation">(</span>    <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">100</span>    <span class="token keyword">while</span> <span class="token builtin class-name">:</span><span class="token punctuation">;</span> <span class="token keyword">do</span>       <span class="token builtin class-name">echo</span> <span class="token string">"子进程:<span class="token variable">${a}</span>"</span>       <span class="token function">sleep</span> <span class="token number">2</span>    <span class="token keyword">done</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>  <span class="token comment">#通过 () 便可开启一个子进程 ，在这个子进程里，我们改变变量a的值，然后不停的输出变量a的值</span>  <span class="token builtin class-name">echo</span> <span class="token string">"父进程:<span class="token variable">${a}</span>"</span> <span class="token comment">#我们在父进程中打印一下，发现根本没有变</span>  <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1000</span>  <span class="token builtin class-name">echo</span> <span class="token string">"父进程:<span class="token variable">${a}</span>"</span> <span class="token comment">#我们在父进程中改变一下变量的值,发现子进程输出也不会改变</span>  <span class="token function">wait</span><span class="token punctuation">}</span>f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四-并发控制"><a class="markdownIt-Anchor" href="#四-并发控制"></a> 四、并发控制</h1><h2 id="令牌控制"><a class="markdownIt-Anchor" href="#令牌控制"></a> 令牌控制</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意这个方法是阻塞方法</span><span class="token comment"># 提交一个任务 []&lt;-(task:Function)</span><span class="token keyword">function</span> <span class="token function-name function">threadPool_submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> _NotBlank <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"thread pool can not be null"</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">fd</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token punctuation">;</span><span class="token builtin class-name">shift</span> <span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">task</span><span class="token operator">=</span><span class="token variable">$*</span>  <span class="token comment">#获取执行令牌,获取不到令牌则阻塞,直到有任务结束执行归还令牌</span>  <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-u</span> <span class="token string">"<span class="token variable">${fd}</span>"</span> token  <span class="token punctuation">{</span>    <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${task}</span>"</span> <span class="token comment">#开始执行耗时操作</span>    <span class="token builtin class-name">eval</span> <span class="token string">"echo <span class="token variable">${token}</span> &gt;&amp; <span class="token variable">${fd}</span>"</span> <span class="token comment">#归还令牌</span>  <span class="token punctuation">}</span> <span class="token operator">&amp;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列控制"><a class="markdownIt-Anchor" href="#队列控制"></a> 队列控制</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># coreSize:核心线程数</span><span class="token comment"># keepAliveTime:线程的存活时间</span><span class="token comment"># 任务队列使用的是无限的任务队列</span><span class="token comment"># eg: new_ThreadPoolExecutor &amp;&amp; local pool=$?</span><span class="token comment"># 新建线程池 [int]&lt;-(coreSize:Integer,keepAliveTime:Long)</span><span class="token keyword">function</span> <span class="token function-name function">new_ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> _NotBlank <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"core size can not be null"</span> <span class="token operator">&amp;&amp;</span> _Natural <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> _Min <span class="token string">"0"</span> <span class="token string">"<span class="token variable">$1</span>"</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">coreSize</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#核心线程数</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">keepAliveTime</span><span class="token operator">=</span><span class="token variable">${2<span class="token operator">:-</span>1}</span> <span class="token comment">#线程的存活时间</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">lock</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>new_fd<span class="token variable">)</span></span>  new_lock <span class="token string">"<span class="token variable">${lock}</span>"</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">fd</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>new_fd<span class="token variable">)</span></span>  new_fifo <span class="token string">"<span class="token variable">${fd}</span>"</span>  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>coreSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token builtin class-name">:</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token builtin class-name">trap</span> <span class="token string">'echo you hit Ctrl-C/Ctrl-\, now exiting.....; exit'</span> SIGINT SIGQUIT        lock_tryLock <span class="token string">"<span class="token variable">${lock}</span>"</span> <span class="token comment">#这个地方必须加锁,防止read并发读导致task错乱</span>        <span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token string">"<span class="token variable">${keepAliveTime}</span>"</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-u</span> <span class="token string">"<span class="token variable">${fd}</span>"</span> task        lock_unLock <span class="token string">"<span class="token variable">${lock}</span>"</span>        isBlank <span class="token string">"<span class="token variable">${task}</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span>        <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${task}</span>"</span>      <span class="token keyword">done</span>    <span class="token punctuation">}</span> <span class="token operator">&amp;</span>  <span class="token keyword">done</span>  <span class="token builtin class-name">return</span> <span class="token string">"<span class="token variable">${fd}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五-调试技巧"><a class="markdownIt-Anchor" href="#五-调试技巧"></a> 五、调试技巧</h1><ol><li>使用 set -x 可以打印出脚本执行的中间结果</li><li>使用 bashdb 工具可以控制脚本一步一步执行</li><li>使用 Idea 的bashsuport插件【推荐】</li></ol><h1 id="六-锁"><a class="markdownIt-Anchor" href="#六-锁"></a> 六、锁</h1><p>在 Linux 中的两条进程同时编辑文件产生并发冲突时, 我们第一反应就会想到使用 锁 来解决这个问题, 这里就介绍 flock。</p><h2 id="flock"><a class="markdownIt-Anchor" href="#flock"></a> flock</h2><p>flock 有三种写法 :</p><ol><li>flock [options] | […]</li><li>flock [options] | -c</li><li>flock [options] &lt;file descriptor number(fd)&gt;</li></ol><h3 id="将锁加在文件上以防止冲突"><a class="markdownIt-Anchor" href="#将锁加在文件上以防止冲突"></a> 将锁加在文件上以防止冲突</h3><p>flock 可以将锁加在某个文件上 (以及文件夹), 来防止并发冲突, 其中一个用途就是用在定时任务中。例如每分钟执行一次检查任务，如果agent没有启动则启动agent.如果第一个任务还没有结束，然后又启动了一个检查任务，最后可能启动多个agent实例。所以我们需要再检查的时候如果agent没有启动才启动，如果检查任务还没有结束我们就不开启下一个检查任务。当然我们的实现方式有很多中。如下使用flock是一种，flock可以保证一个进程在启动的时候在某个文件上加上一把锁，可以是排它锁，其他进程如果先要获取这个锁必须等上一个进程结束才行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"* * * * * cd <span class="token variable">${coreDir}</span>; /usr/bin/flock -xn /tmp/checkAndFixAgent.lock -c '/bin/bash core.sh checkAndFixAgent &gt; /dev/null 2&gt;&amp;1'"</span><span class="token comment">#检查并修复agent</span><span class="token function-name function">checkAndFixAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">success</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>checkAgent<span class="token variable">)</span></span>  isFalse <span class="token string">"<span class="token variable">${success}</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>    <span class="token function">mount</span> <span class="token parameter variable">-o</span> rw,remount /    startAgent  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然flock也有他的弊端，这个我们很少遇到，我目前还没有理解，等我真实遇到在补充。</p><h3 id="将锁加在-文件描述符-fd-上"><a class="markdownIt-Anchor" href="#将锁加在-文件描述符-fd-上"></a> 将锁加在 文件描述符 (fd) 上</h3><p>flock 也可以对某个 fd 加锁, 这种通常用于一个进程的子进程中. 关于 fd, 由于 Linux 一切皆文件的哲学, 所以我们常用的 stdout 就是 fd 1, stderr 就是 fd 2, 我们也可以自定义 fd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取一个可用的文件描述符号</span><span class="token keyword">function</span> <span class="token function-name function">new_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    flock <span class="token number">3</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">find</span><span class="token operator">=</span><span class="token variable">${NULL}</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>fd<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>fd<span class="token operator">&lt;</span><span class="token number">1024</span><span class="token punctuation">;</span>fd<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>      <span class="token builtin class-name">local</span> <span class="token assign-left variable">rco</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token boolean">true</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">&gt;&amp;</span> $<span class="token punctuation">{</span>fd<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> $?<span class="token variable">)</span></span>"</span>      <span class="token builtin class-name">local</span> <span class="token assign-left variable">rci</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token boolean">true</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">&lt;&amp;</span> $<span class="token punctuation">{</span>fd<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> $?<span class="token variable">)</span></span>"</span>      <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${rco}</span><span class="token variable">${rci}</span>"</span> <span class="token operator">==</span> <span class="token string">"11"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">find</span><span class="token operator">=</span><span class="token variable">${fd}</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">break</span>    <span class="token keyword">done</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${find}</span>"</span>  <span class="token punctuation">}</span> <span class="token operator"><span class="token file-descriptor important">3</span>&lt;&gt;</span>/tmp/base_shell.lock<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以避免两个进程同时对一个文件的读写而产生错误了.</p><h3 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h3><table><thead><tr><th>Options</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>-s</td><td>–shared</td><td>共享锁</td></tr><tr><td>-x</td><td>–exclusive</td><td>独占锁，默认类型</td></tr><tr><td>-u</td><td>–unlock</td><td>解锁, (通常不需要手动解锁, 默认 -c 后的命令退出时, FD 会关闭, 会将文件解锁)</td></tr><tr><td>-n</td><td>–nonblock</td><td>非阻塞，若指定的文件正在被其他进程锁定，则立即以失败 (1) 返回</td></tr><tr><td>-w</td><td>–timeout</td><td>若指定的文件正在被其他进程锁定，则等待指定的秒数；指定为 0 将被视为非阻塞</td></tr><tr><td>-o</td><td>–close</td><td>锁定文件后与执行命令前，关闭用于引用加锁文件的文件描述符</td></tr><tr><td>-E</td><td>–conflict-exit-code</td><td>若指定 - n 时请求加锁的文件正在被其他进程锁定，或指定 - w 时等待超时，则以该选项的参数作为返回值</td></tr><tr><td>-F</td><td>–no-fork</td><td>不 fork 执行命令</td></tr><tr><td>-c</td><td>–command</td><td>运行的命令</td></tr></tbody></table><h2 id="自定义锁"><a class="markdownIt-Anchor" href="#自定义锁"></a> 自定义锁</h2><p>参考 BaseShell 框架 BaseLock 部分</p><h1 id="七-函数编程"><a class="markdownIt-Anchor" href="#七-函数编程"></a> 七、函数编程</h1><p>Shell 可以像 函数语言一样，将函数作为参数进行传递的。</p><p>我们现在想要在执行函数前打印一个时间,执行函数后打印一个时间,然后统计这个函数的执行时长。类似于切面，我们看看用Shell可以怎么实现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function-name function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token string">"你正在执行add操作 ing"</span>  <span class="token function">sleep</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token function-name function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token string">"你正在执行sub操作 ing"</span>  <span class="token function">sleep</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token function-name function">aop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">function</span><span class="token operator">=</span><span class="token variable">$1</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">start</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>  <span class="token builtin class-name">echo</span> <span class="token string">"开始执行<span class="token variable">${function}</span>前：<span class="token variable">$start</span>"</span>  <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${function}</span>"</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>  <span class="token builtin class-name">echo</span> <span class="token string">"执行<span class="token variable">${function}</span>后：<span class="token variable">$end</span>,耗时L:<span class="token variable"><span class="token variable">$((</span>end<span class="token operator">-</span>start<span class="token variable">))</span></span>s"</span><span class="token punctuation">}</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  aop <span class="token string">"add"</span> <span class="token operator">&amp;</span>  aop <span class="token string">"sub"</span> <span class="token operator">&amp;</span>  <span class="token function">wait</span><span class="token punctuation">}</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八-import-其他脚本"><a class="markdownIt-Anchor" href="#八-import-其他脚本"></a> 八、import 其他脚本</h1><p>使用 <code>source</code> 或 <code>.</code><br>例如: <code>source ./../../BaseShell/Starter/BaseHeader.sh</code> 就可以引入 <a href="http://BaseHeader.sh">BaseHeader.sh</a> 中定义的各种函数和变量<br>如何解决 A.sh-&gt;<a href="http://B.sh">B.sh</a> 然后 B.sh-&gt;<a href="http://A.sh">A.sh</a> 这样循环引用的尴尬境地的,因为这样就死循环了,会撑爆进程栈的。编译行语言Java是很好解决这个问题的,因为他是编译型,编译的过程是不执行程序的,用的方法叫双亲委派原则。单Shell不一样，我用的是下面这样的方法，基本解决思路是，在脚本执行实现先检查一下当前脚本是否已经加载过，加载过就直接return.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#===============================================================</span><span class="token assign-left variable">import</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${<span class="token environment constant">BASH_SOURCE</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>"</span> .sh<span class="token variable">)</span></span>_<span class="token variable">$$</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token string">'$'</span><span class="token string">"<span class="token variable">${import}</span>"</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${import}</span>=0"</span><span class="token comment">#===============================================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本的开头只要加上上面的代码，就可以解决循环引用的问题。这是目前我想到的比较简单的方式,不排除以后还有新的方式,敬请期待,例如可以多线程并行检查等优化手段,先卖个关子,目前还没有想好。</p><h1 id="九-单元测试"><a class="markdownIt-Anchor" href="#九-单元测试"></a> 九、单元测试</h1><p>有人认为单元测试什么的不重要，这你就大错特错了，如果只是自己写几个脚本用，那没关系，因为不会影响别人。但如果要是像我一样提供一些脚本给大家用，那就需要单元测试了。因为脚本的移植性本来就很差，稍稍改动一点就坑很多，如果没有单元测试保障，回头改动某个函数过后导致大家使用出现问题，那就是不负责任了。</p><p>参考 <a href="http://localhost:4000/2019/08/28/ji-zhu-zong-jie/baseshell/baseshell-shi-yong-jiao-cheng/">BaseShell使用教程</a> 中的 测试【Utils】章节</p><h1 id="十-动态创建函数"><a class="markdownIt-Anchor" href="#十-动态创建函数"></a> 十、动态创建函数</h1><p>我们可以动态的创建函数。应用如下面的例子我们可以替换一个函数的名字为另一函数，这样做我们可以实现类似的面向对象编程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重命名函数</span><span class="token keyword">function</span> <span class="token function-name function">new_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> _NotBlank <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"source function name can not be null"</span> <span class="token operator">&amp;&amp;</span> _NotBlank <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token string">"target function name can not be null"</span>  <span class="token builtin class-name">test</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">declare</span> <span class="token parameter variable">-f</span> $1<span class="token variable">)</span></span>"</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span>  <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${_<span class="token operator">/</span>$1<span class="token operator">/</span>$2}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如 <a href="http://BaseArrayList.sh">BaseArrayList.sh</a> 中的实现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里会新建一个List,建议用在多线程模式下</span>  new_arrayList number <span class="token comment">#创建一个名为number的List</span>  number_add <span class="token number">1</span>         <span class="token comment">#向个number中添加一个元素</span>  number_add <span class="token number">2</span>         <span class="token comment">#向个number中添加一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十一-递归"><a class="markdownIt-Anchor" href="#十一-递归"></a> 十一、递归</h1><h1 id="十二-设计模式"><a class="markdownIt-Anchor" href="#十二-设计模式"></a> 十二、设计模式</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jvm垃圾回收</title>
      <link href="/2021/05/25/java/jvm-la-ji-hui-shou/"/>
      <url>/2021/05/25/java/jvm-la-ji-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收要解决的根本问题"><a class="markdownIt-Anchor" href="#垃圾回收要解决的根本问题"></a> 垃圾回收要解决的根本问题</h1><p>这里我们先不区分编程语言,单说垃圾回收。这里涉及三个问题,哪些区域的垃圾需要回收,这些区域的垃圾如何识别,这些区域的垃圾如何回收。</p><p>一个对象只有被认定为垃圾之后才能被回收,否则决不能动它,因为一旦移动或者删除就会发生找不值或者找到错误的值的情况。试想一下,一块内存区域本来你在使用着,后来被垃圾回收了(所谓垃圾回收就是指这块内存区域被高(低)电平覆盖,要么全0要么全1,然后这块地址可以继续被用来存放其他的变量的值了)等你在用的时候,发现值没了或者变了,这时候程序就要出错了。</p><h1 id="垃圾回收的历史"><a class="markdownIt-Anchor" href="#垃圾回收的历史"></a> 垃圾回收的历史</h1><p>但是细想一下为什么我们需要垃圾回收呢?为什么c语言就没有垃圾回收机制呢？</p><p>一开始人们发明编程语言的时候,受限于当时的硬件和软件理论的限制。觉得程序员就应该自己管理内存,无论向操作系统申请内存还是把内存归还给操作系统（c语言就是这个想法,所以他没有垃圾回收器,加上垃圾回收器之后就变身C++了）,而且你用完一块儿内存空间之后,你就应该及时释放掉,注意这里的及时,就是说你越快释放越好,因为那时候的内存空间是很有限的啊,你不及时释放,后面的代码逻辑就可能执行不了啊。所以人们并没有垃圾回收的概念。 后来随着硬件的提高,内存容量的增大,以及软件理论的更新,人们发现我在写代码的时候有大量的申请内存、释放内存的动作,这是重复的行为啊,有程序员就受不了了,代码中应该杜绝重复的代码,如果有重复的代码,那一定是代码写的不够好,不够好怎么办呢?我就要分层、抽象,巴拉巴拉各种软件设计理论就来了。于是人们觉得我们应该吧这些重复的代码抽象出来,最后人们想到,释放内存的逻辑应该交给程序来做,程序员不应该关心内存的释放,当然申请你还是需要关心的。不过释放的工作我放到另外一层来做,这一层就是所谓的垃圾回收器。</p><p>垃圾回收器的历史远远比Java语言要早,甚至比c语言还要早,要知道垃圾回收的思想是从Lisp语言开始的,:isp语言也算一一门神奇的语言了,在1956年发明,因为他是一门走在时代前言的编程语言,它当时提出的垃圾回收思想对后世的影响还是很深刻的,甚至第一个垃圾识别算法–引用计数法就是它最先提出来的。</p><p>从有无垃圾收集器来区分,编程语言其实可以分成两大阵营,一大阵营是有垃圾回收器的语言,一类是没有垃圾回收器的语言。</p><blockquote><p>有垃圾回收器的说自己简单,不用手动写释放内存的样板代码,不会存在内存泄漏,自诩安全系数高。<br>没有垃圾回收器的语言就说自己灵活,可以手动控制内存的分配与释放,自诩效率高。</p></blockquote><p>那有没有一种语言既没有垃圾回收器又不用需要关心内存的回收问题呢？有没有这么两全其美的语言呢。</p><p>还真有,有一门新的语言叫 Rust 语言的,它既没有垃圾回收器,也不需要手动写代码释放内存。它的实现比较另类。是在编译的时候帮你把释放内存的代码插入到了代码之间。所以看起来不需要你手动释放代码,也没有垃圾收集器,但按照我的理解,其实它还是应该归为有垃圾收集的语言。</p><h1 id="java的垃圾回收"><a class="markdownIt-Anchor" href="#java的垃圾回收"></a> Java的垃圾回收</h1><p>一门语言一旦决定归到垃圾回收器阵营,例如Java,那它就必须要实现一套垃圾回收器来负责回收垃圾,也就是说它运行的时候,后台默默地还会启动一个线程或进程来扫描所使用的内存,而垃圾收集器的目的就是要高效的回收内存以供新的代码使用。要高效的回收可并不容易啊。所以人们针对这个高效的问题提出了一个又一个的解决方案,而每一个方案又会产生一系列新的问题,然后又在下一代的方案中解决。对此我们衍生了很多很多的垃圾回收算法。不同的算法对应不同的垃圾收集器。</p><h2 id="第一个问题哪些区域的垃圾需要回收"><a class="markdownIt-Anchor" href="#第一个问题哪些区域的垃圾需要回收"></a> 第一个问题,哪些区域的垃圾需要回收？</h2><p>要想确定哪些区域需要回收,就首先要知道有哪些区域。然后才能说哪些区域需要回收,哪些区域不需要回收。一个Java进程想要回收人家QQ的内存空间,这是不可能的!所以,我们要先搞清楚Java运行的时候,到底管理着哪些内存空间,也就是另一个知识点: JVM 的运行时数据区域。这个知识点也比较繁杂,这里简单说一下。JAVA是基于JVM的跨平台实现了所谓的一次编译到处执行的宏伟目标的。因此在各个平台开发对应的JVM的时候一定有一个标准,我们称作JVM标准。其中针对运行时数据区域的划分就有规定,规定称要实现JVM必须将内存划分为5个区域:程序计数器、方法栈、本地方法栈、方法区、堆</p><p>那既然知道有上面5部分区域了,那哪些区域是需要被回收的呢？理论上只要是空间只要不用我就应该回收掉。要想了解这个问题就要知道每个区域到底存的是啥。</p><p>由上面的 程序计数器、方法栈、本地方法栈 随着线程而生随线程而灭,因此线程退出的时候,空间自动释放。其中程序计数器是一块很小的内存,小到只需要存下一个内存地址就行,每个线程独占一块儿程序计数器,用来指示本线程执行到了代码的哪一行；方法栈、本地方法栈里面是一个个的方法栈帧,对应着方法的调用,入栈之后代表方法运行,运行完毕后自动弹出栈顶,空间就自动释放了,所以垃圾回收器不用操心这三块区域。因此我们需要关心的其实就剩方法区和堆栈了,方法区中本来存放的一些类信息、方法信息等等静态的东西,那么对于类信息在一个类不使用的时候就应该自动释放不在占着内存,方法去里面还有可能存放一些常量,我们叫做常量池,也是需要释放内存的。堆就不用说了,对象分配的地方,用完自然要释放,因此垃圾回收的主战场就是堆了,此外还有方法区。不过随着JVM的发展,这个所谓的方法区也逐渐逐渐归还给堆了,因为方法区本来就是堆得一部分,只不过因为要存一些类信息、静态变量等信息而强行划分出来的,HotSopt虚拟机为了和JRokit虚拟机的一些优秀特性合并,在Java8中已经将方法区中的字符串池、静态变量等移到堆中了。</p><h2 id="第二个问题这些区域的垃圾如何识别"><a class="markdownIt-Anchor" href="#第二个问题这些区域的垃圾如何识别"></a> 第二个问题,这些区域的垃圾如何识别</h2><p>人们最先想到的就是引用计数,引用计数就是一个对象被引用了,引用计数器就+1,一个对象的引用被断开了,引用计数器就-1,实现起来非常简单,前面说过了,甚至第一个垃圾识别算法–引用计数法就是List最先提出来的。但是引用计数无法解决循环引用的问题,为了解决循环引用的问题,人们发明了弱引用的弥补方式,但是只能应用于简单场景,所以一些脚本语言在设计垃圾回收器的时候就选择了引用计数的实现方式。例如 js,python。人们为了解决引用计数的老大难问题：循环引用,又发明了一种方法叫可达性分析法,java 采用了后者。</p><h2 id="第三个问题这些区域的垃圾如何回收"><a class="markdownIt-Anchor" href="#第三个问题这些区域的垃圾如何回收"></a> 第三个问题,这些区域的垃圾如何回收</h2><p>既然JAVA选择了可达性分析,我们知道可达性分析是依赖于根对象的,所以必须知道根对象在哪儿。这需要我们了解一下JVM的内存分布,或者叫内存布局,官方名字叫运行时数据区域,也就是JVM在于行的时候数据所在的区域。这可以看我的另一篇文章 《Java-运行时数据区》。这里我们只说一下跟对象存在的地方。</p><ol><li>栈<br>栈里面存的是栈帧,栈帧里面存了对象的引用,这些引用就是根对象</li><li>本地方法栈<br>栈里面存的是栈帧,本地方法在执行的时候,会把对象的引用在传递到本地方法栈的栈帧里面,栈帧里面存了对象的引用,这些引用就是根对象</li><li>方法区：静态引用、常量池中的引用<br>方法区中村的静态引用和常量池中的应用,这些引用就是根对象</li></ol><h2 id="标记清除算法"><a class="markdownIt-Anchor" href="#标记清除算法"></a> 标记清除算法</h2><h2 id="复制算法"><a class="markdownIt-Anchor" href="#复制算法"></a> 复制算法</h2><h2 id="标记整理算法"><a class="markdownIt-Anchor" href="#标记整理算法"></a> 标记整理算法</h2><h2 id="分代垃圾回收算法"><a class="markdownIt-Anchor" href="#分代垃圾回收算法"></a> 分代垃圾回收算法</h2><p>直到统计理论的引入,才开始分代回收</p><h1 id="java的垃圾回收器"><a class="markdownIt-Anchor" href="#java的垃圾回收器"></a> Java的垃圾回收器</h1><p>垃圾收集器按照代分为两种,新生代一种、老年代一种,这样做的目的是为了让新生代和老年代的垃圾收集器可以随意组合,但事与愿违,有些回收器之间是不可以随意组合的。<br>一开始为了简单,只有串行的 serial 收集器,因为那个年代计算机可用的内存本来就很小,只有几十兆几百兆,那供JVM可用的内存就更少,因此产生的垃圾也就少,用串行回收器足够了,回收速度很快,用户根本感知不到,相当于运行10s就回收个10ms。但是随着计算机的发展,JVM可控的内存越来越多,产生的来及也就越来越多,用串行回收器不够了,因为产生的垃圾多了,在回收速度一定的情况下,回收时间自然就变长了,长到用户开始感知了,运行10s就回收了1s,于是JAVA不能忍了,这阶段的主要目标就是提高垃圾回收的速度,缩短垃圾回收的时间,而这时候真多核处理技术的发展使得真多线程成为现实,因此为了提高垃圾回收的速度,自然而然的就想到了用多线程来回收,这样就搞出了parNew,现在新生代试试水,所以parNew 诞生的时候老年代还是只有serial old这一种串行的垃圾回收器。但是随着内存的继续发展,达到GB了,这时候即使多线程也不行了,因为用户还是能感到明显的停顿。可能运行了20s就有一次1s的垃圾回收了。所以这时候人们并不是要求垃圾回收的速度越来越快了,而是要求用户最好不要感知到垃圾回收,我们知道 回收时间=垃圾量/垃圾回收速度 ,刚才说到了,我们已经用多线程垃圾回收的方式实现了垃圾回收速度的最大化,这时候回收速度我们优化不了了,为了缩短回收时间,我们只能减少垃圾量的产生,为了减少垃圾量的产生,我们需要让程序运行的时间短一会儿,这样产生的垃圾就少,但是这样垃圾回收的频率就会上来,可是用户无感知了呀,原来10s中回收1s,现在每3s就回收3ms,3ms的时间用户也感知不到,实际上用户程序是暂停了的,这样人么就要求能控制运行多久就执行一次多久的垃圾回收,于是 parell scaveng 诞生,可以控制吞吐率了,人们一看效果不过,于是应用到老年代 parell old 诞生。这时候老年代已经有两种垃圾回收器了。但是到现在,无论如何用户程序都得暂停,人们的胃口越来越大,期望用户程序不暂停,你还得给我管理垃圾回收,于是cms诞生,这个是并行垃圾回收器的第一次尝试,但是老年代会产生内存碎片啊,于是G1诞生,但是G1有效率问题啊,于是ZGC诞生。可以看到GC垃圾收集器的发明过程,就是人类欲望的膨胀过程。</p><h2 id="serial-收集器-serial-old-收集器"><a class="markdownIt-Anchor" href="#serial-收集器-serial-old-收集器"></a> serial 收集器 &amp; serial old 收集器</h2><h2 id="parnew-收集器"><a class="markdownIt-Anchor" href="#parnew-收集器"></a> parNew 收集器</h2><h2 id="parell-scaveng-收集器-parell-old-收集器"><a class="markdownIt-Anchor" href="#parell-scaveng-收集器-parell-old-收集器"></a> parell scaveng 收集器 &amp; parell old 收集器</h2><h2 id="cms-收集器"><a class="markdownIt-Anchor" href="#cms-收集器"></a> CMS 收集器</h2><h2 id="g1-收集器"><a class="markdownIt-Anchor" href="#g1-收集器"></a> G1 收集器</h2><h2 id="zgc-收集器"><a class="markdownIt-Anchor" href="#zgc-收集器"></a> ZGC 收集器</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-显示git分支</title>
      <link href="/2020/09/11/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-xian-shi-git-fen-zhi/"/>
      <url>/2020/09/11/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-xian-shi-git-fen-zhi/</url>
      
        <content type="html"><![CDATA[<p>我们先来看一下效果</p><center>  <img src="/2020/09/11/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-xian-shi-git-fen-zhi/show.jpg"></center>首先进入主目录下 `cd ~` ,找到 `.bashrc` 文件如果没有则新建之<p>找到如下类似的一段文本,没有则添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$color_prompt</span>"</span> <span class="token operator">=</span> <span class="token function">yes</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '</span><span class="token keyword">else</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'${debian_chroot:+($debian_chroot)}\u@\h:\w\[\033[01;32m\]$(git_branch)\[\033[00m\]\$ '</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 else 中 PS1= 后面那条命令中 <code>$(git_branch)</code>这一个,这其实是一个函数,我们需要在 <code>.bashrc</code>文件中实现这个函数,所以我们需要在这个文件中添加这个函数的实现如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">git_branch</span> <span class="token punctuation">{</span>  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">git</span> branch <span class="token parameter variable">-vv</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^\*"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">"s/^\*\ //"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\["</span><span class="token variable">`</span></span>  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${tmp<span class="token operator">#</span>*<span class="token punctuation">[</span>}</span>  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${tmp<span class="token operator">%</span><span class="token punctuation">]</span>*}</span>  <span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token variable">${tmp<span class="token operator">#</span>*<span class="token operator">/</span>}</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">git</span> branch <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^\*"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">"s/^\*\ //"</span><span class="token variable">`</span></span>  <span class="token keyword">fi</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${branch}</span>"</span> <span class="token operator">=</span> <span class="token string">"(no branch)"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token string">"(<span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse <span class="token parameter variable">--short</span> HEAD<span class="token variable">`</span></span>...)"</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token string">" [<span class="token variable">$branch</span>]"</span>  <span class="token keyword">fi</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写设计模式-寻找JDK中的设计模式</title>
      <link href="/2020/08/17/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-xun-zhao-jdk-zhong-de-she-ji-mo-shi/"/>
      <url>/2020/08/17/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-xun-zhao-jdk-zhong-de-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例"><a class="markdownIt-Anchor" href="#单例"></a> 单例</h1><p>jdk.internal.misc.Unsafe<br>Unsafe 用的单例模式,而且是饿汉式</p><h1 id="享元模式"><a class="markdownIt-Anchor" href="#享元模式"></a> 享元模式</h1><p>，包装类型如Byte、Integer都是不变类，因此，反复创建同一个值相同的包装类型是没有必要的。以Integer为例，如果我们通过Integer.valueOf()这个静态工厂方法创建Integer实例，当传入的int范围在-128~+127之间时，会直接返回缓存的Integer实例</p><p>在实际应用中，享元模式主要应用于缓存，即客户端如果重复请求某些对象，不必每次查询数据库或者读取文件，而是直接返回内存中缓存的数据。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写设计模式-用λ实现代理模式</title>
      <link href="/2020/08/13/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-dai-li-mo-shi/"/>
      <url>/2020/08/13/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>使用代理模式的目的，往往是因为已经存在某个类和该类的对象，想在该类的部分或全部方法执行前后在执行某些代码。</p><p>代理模式分为静态代理和动态代理，动态代理的实现方式又有两种：JDK自带的动态代理，利用了反射的原理，还有一种是 cglib方式实现的代理，利用了ASM字节码织入技术。</p><p>静态代理可以利用组合或者继承的方式实现，其目的就是为了持有被代理对象的引用，进而调用被代理对象的方法。</p><p>这里我们说一下JDK的动态代理</p><div width="100%"><div style="float:left; width:50%;"><h1>JDK动态代理普通写法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user say:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">IUser</span> user<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">UserProxy</span><span class="token punctuation">(</span><span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getUserProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IUser</span> userProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUser</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">UserProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userProxy<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div style="float:left;height:200px; width:0px;border-left:solid white;border-right:1px solid white"></div><div style="float:left; width:49%;"><h1>JDK动态代理尝试λ写法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user say:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserProxyFactory</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IUser</span> <span class="token function">getUserProxy</span><span class="token punctuation">(</span><span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IUser</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IUser</span> userProxy <span class="token operator">=</span> <span class="token class-name">UserProxyFactory</span><span class="token punctuation">.</span><span class="token function">getUserProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userProxy<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写设计模式-用λ实现单例模式</title>
      <link href="/2020/08/10/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-dan-li-mo-shi/"/>
      <url>/2020/08/10/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>DCL 单例 用λ表达式来实现</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.util.Optional;public class Singleton{  //1. 构造方法私有化  //2. 持有自身的静态引用  //3. 提供获取自身静态引用的公有静态方法  private Singleton(){}  private static volatile Singleton singleton;  public static Singleton getInstance(){     return Optional.ofNullable(singleton).orElseGet(()-&gt;{       synchronized(Singleton.class){         return Optional.ofNullable(singleton).orElse(new Singleton());       }     });  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写设计模式-用λ实现工厂模式</title>
      <link href="/2020/08/10/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-gong-han-mo-shi/"/>
      <url>/2020/08/10/java/java-she-ji-mo-shi/chong-xie-she-ji-mo-shi-yong-lshi-xian-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>创建型设计模式一共有4中,分别叫 工厂、单例、构建、原型。创建型设计模式的目标是创建对象实例,其中我认为最简单的当属工厂设计模式。工厂设计模式的宗旨是把对象实例化的过程收集到一处来。</p><p>其中工厂模式还可以细分，分别是 简单工厂也叫静态工厂、工厂方法和抽象工厂，其中简单工厂也叫静态工厂是工厂方法的特例，工厂方法是抽象工厂的特例。<br>工厂方法的目的就是生产对象，也就是封装new的过程。只要你把某个对象的new过程封装到某个类或者某个方法中广义上我们都可以叫工厂方法<br>例如</p><pre class="line-numbers language-none"><code class="language-none">public static Object convert() {    return new Object();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般简单工厂就是构造一个工厂类，里面写一个方法获取某个基类对象,至于最后如何生成具体子类的实例，则在该方法内部实现.这就是简单工厂的雏形</p><div width="100%"><div style="float:left; width:49%;"><h1>简单工厂普通写法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> student <span class="token operator">=</span> <span class="token class-name">UserFactory</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>    <div style="float:left;height:50px; width:0px;border-left:solid white;border-right:1px solid white"></div>    <div style="float:left; width:49%;"><h1>简单工厂尝试λ写法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userFactory <span class="token operator">=</span> code <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> student <span class="token operator">=</span> userFactory<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h1><p>工厂方法和抽象工厂方法也类似，只是换成λ表达式即可。因为λ表达式本质上是一个函数一个方法，所以必然依托于出现在某个类中。</p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么写好Shell脚本</title>
      <link href="/2020/05/31/linux/shell/zen-me-xie-hao-shell-jiao-ben/"/>
      <url>/2020/05/31/linux/shell/zen-me-xie-hao-shell-jiao-ben/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-text" data-language="text"><code class="language-text"> ____                      _          _ _| __ )  __ _ ___  ___  ___| |__   ___| | ||  _ \ / _` / __|/ _ \/ __| '_ \ / _ \ | || |_) | (_| \__ \  __/\__ \ | | |  __/ | ||____/ \__,_|___/\___||___/_| |_|\___|_|_|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="序"><a class="markdownIt-Anchor" href="#序"></a> 序</h1><p>Shell脚本实在是太灵活了,相比标准的Java、C、C++ 等,它不过是一些现有命令的堆叠,这是他的优势也是他的劣势,太灵活导致不容易写规范。本人在写Shell脚本的过程中形成了自己一些规范,这些规范仍在实践中,在此分享出来。</p><h1 id="shell介绍"><a class="markdownIt-Anchor" href="#shell介绍"></a> Shell介绍</h1><p>Shell中文译名叫 壳(ke,又读qiao) 外壳的意思,有壳就要有核.核指的是内核,内核即操作系统<strong>内</strong>的<strong>核</strong>心代码,内核是操作系统对计算机硬件资源(例如显示器、硬盘、内存等等)进行调度的唯一通道,也就是说所有对计算机发出的指令,例如使蜂鸣器鸣响、点亮键盘背光、复制粘贴等等都需要经过内核来操作才行,这无论如何你是跨越不过去的。而Shell则是包裹在内核之外的一层壳,通过Shell我们可以方便的操控系统的软硬件,体现就是我们使用的一个个的命令或工具,都是Shell这层壳的范畴。</p><p>上面说了Shell是一些工具的集合,但同时Shell也是一门语言。就像Java一样,既是一些工具（jar包）的集合,也是一种编程语言。既然是语言就要选择是哪个阵营：解释型还是编译型。Shell选择了解释型,C语言选择了编译型,Java既选择了编译又选择了解释。既然是一种解释型语言,就需要解释器来解释执行。历史上出现过很多Shell解释器,例如 sh,bash,csh,zsh 等等,不同的Shell解释器有不同的词法和语法,就好比不同的方言。用不同的Shell其实指的仅仅是更换了脚本解释器而已。要注意的是有些命令在不同的解释器中会有不同的表现,这也是为什么我们的脚本一移植到别人电脑上就不可用的原因之一。</p><p>举两个例子<br>坑一:echo 在 zsh 和其他 Shell解释器中对特殊字符转义的输出就不同。如果不分清具体使用的是哪个Shell,很有可能就落坑里还不知道原因。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">bash</span>chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span>chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">zsh</span>chenshangMacBook-Pro% <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span>chenshangMacBook-Pro% <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>坑二: 数组使用方式也不同</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">bash</span>chenshang@chenshangMacBook-Pro:~$ <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">zsh</span>chenshangMacBook-Pro% <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>chenshangMacBook-Pro% <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>chenshangMacBook-Pro%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之,Shell脚本中的坑很多,林林总总,写脚本的时候一定要小心,否则脚本的移植性堪忧。这也就是为什么Shell不适合开发大型应用的原因之一。但辅助开发还是绰绰有余的。尤其是在运维服务器和对文本处理的过程中,与linux的亲和性让它占尽了优势。</p><p>本Shell规约是以bash为标准,在Mac OS 10.14上进行验证。所有命令和脚本都是依托bash这个解释器来执行的,我用bash的原因主要就是因为bash是发展比较早的解释器,后续发展的各种解释器如 zsh\csh 多多少少都兼容bash。不过,同时也无法使用其他Shell的高级特性。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ sw_versProductName:Mac OS XProductVersion:<span class="token number">10.14</span>chenshang@chenshangMacBo    ok-Pro:~$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>BuildVersion:18A391Darwin chenshangMacBook-Pro.local <span class="token number">18.0</span>.0 Darwin Kernel Version <span class="token number">18.0</span>.0: Wed Aug <span class="token number">22</span> <span class="token number">20</span>:13:40 PDT <span class="token number">2018</span><span class="token punctuation">;</span> root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$0</span><span class="token parameter variable">-bash</span>chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token environment constant">SHELL</span>}</span>/usr/local/bin/bashchenshang@chenshangMacBook-Pro:~$ <span class="token function">bash</span> <span class="token parameter variable">-version</span>GNU bash, version <span class="token number">5.0</span>.2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>-release <span class="token punctuation">(</span>x86_64-apple-darwin18.2.0<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">&gt;</span>This is <span class="token function">free</span> software<span class="token punctuation">;</span> you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然Shell他是一门语言就免不了两大要素:词法和语法,首先有哪些词汇(保留词、关键字),词汇有哪些分类(数据类型),其次这些词汇如何表达语意(也就是语法)。Shell编程指的并不是编写这个工具,而是指利用现有的Shell工具进行编程,写出来的程序是轻量级的脚本,我们叫做Shell脚本。Shell的语法是从C继承过来的,因此我们在写Shell脚本的时候往往能看到C语言的影子。因为初代Unix内核中的Shell解释器最主要的两个贡献者一个是肯汤普森,另一个是丹尼斯里奇,而丹尼斯里奇是C语言的发明者,肯汤普森则用C语言重写了之前的Unix内核。</p><h1 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h1><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>写Shell脚本考验是的你对各个命令或工具使用的熟练程度。基本命令必须要熟练掌握,常用命令要知道基本功能和基本参数,生僻命令只需要知道大概即可,要学会使用man手册查看命令的帮助文档。对于一些命令不必死记硬背,用的时候查一下解决问题即可。</p><p>基本命令例如 /bin 目录下的</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">chenshang@chenshangMacBook-Pro:~$ ls /bin/[         chmod     date      echo      hostname  launchctl ls        pax       rm        sleep     tcsh      wait4pathbash      cp        dd        ed        kill      link      mkdir     ps        rmdir     stty      test      zshcat       csh       df        expr      ksh       ln        mv        pwd       sh        sync      unlink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用命令和工具</p><blockquote><p>sed、awk、grep、tr、column、jq、ssh、scp、expect、ps、top、htop、tree、pstree、curl、wget、java 相关的工具</p></blockquote><p>一些冷门工具</p><blockquote><p>lolcat、lsof、tree、tac</p></blockquote><p>本Shell规约规定</p><blockquote><p><font color="#dd0000">【强制】Linux工具的使用不必死记硬背,不必死记硬背,不必死记硬背,即查即用即可 </font><br></p></blockquote><h2 id="运行方式"><a class="markdownIt-Anchor" href="#运行方式"></a> 运行方式</h2><p>既可以在命令行交互的运行,又可以将指令固化到文件中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">cat</span> test.sh<span class="token comment">#!/bin/zsh</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${array}</span>"</span>chenshang@chenshangMacBook-Pro:~$ <span class="token function">sh</span> test.sh<span class="token punctuation">\</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>chenshang@chenshangMacBook-Pro:~$ <span class="token function">zsh</span> test.sh<span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">1</span>chenshang@chenshangMacBook-Pro:~$ <span class="token function">chmod</span> u+x test.shchenshang@chenshangMacBook-Pro:~$ ll test.sh-rw-rw-rw-  <span class="token number">1</span> chenshang  staff    <span class="token number">40</span> Feb <span class="token number">18</span> <span class="token number">17</span>:32 test.shchenshang@chenshangMacBook-Pro:~$ ./test.sh<span class="token punctuation">\</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>chenshang@chenshangMacBook-Pro:~$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><p><font color="#dd0000">【推荐】脚本以均<code>.sh</code>结尾,使人可以一目了然知道该文件是脚本文件 </font><br></p></blockquote><blockquote><p><font color="#dd0000">【推荐】脚本执行建议明确指定解析器,这样可以不用每个文件都单独赋予可执行权限 </font><br></p></blockquote><p>如果要固化到文件中,那我们的脚本该怎么写呢？</p><h2 id="关于首行"><a class="markdownIt-Anchor" href="#关于首行"></a> 关于首行</h2><blockquote><p><font color="#dd0000">【推荐】推荐使用 <code>#!/usr/bin/env bash</code> 作为 shebang </font><br></p></blockquote><p>我们往往看到大多数Shell脚本的第一行是 <code>#!/bin/bash</code> 这句话,当然也有 <code>#!/bin/sh</code>、<code>#!/usr/bin/bash</code>,这几种写法也都算是正确,当然还有一些野路子的写法,为了避免误导这里就不示例了。本Shell规约并不推荐使用上面的任何一种,而是使用 <code>#!/usr/bin/env bash</code> 这种。</p><p>首行关系到运行脚本的时候究竟使用哪种Shell解释器。这也说明Shell是一种解释性语言,脚本从上到下每读一行就执行一行,在遇到第一行是 <code>#!/bin/bash</code> 的时候就会加载 bash 相关的环境,在遇到 <code>#!/bin/sh</code> 就会加载 sh 相关的环境,避免在执行脚本的时候遇到意想不到的错误。但一开始我并不知道我电脑上安装了哪些Shell,默认使用的又是哪一个Shell,我脚本移植到别人的计算机上执行,我更不可能知道别人的计算机是Ubuntu还是Arch或是Centos。为了提高程序的移植性,本Shell规约规定使用 <code>#!/usr/bin/env bash</code>, <code>#!/usr/bin/env bash</code> 会自己判断使用的Shell是目录在哪,并加载相应的环境变量。</p><p>首行只在没有明确指定使用哪个Shell解释器的时候才起作用,如果执行脚本的时候指定了具体是用bash还是zsh还是csh,那第一行中定义的shell解释器将不再有用。</p><p>举几个例子,顺便学习一下shellchek工具</p><p>我们看一下下面一段脚本,在改变第一行头部的时候,shellcheck给出的建议是什么。shellckek 类似我们在idea里面安装的语法检查工具。它会提示我们脚本中有哪些地方写的不够规范。<br>$ cat <a href="http://jsons.sh">jsons.sh</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${array}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不使用首行的时候</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">In test.sh line 1:echo \\\\^-- SC2148: Tips depend on target shell and yours is unknown. Add a shebang.In test.sh line 3:echo "${array}"    ^------^ SC2128: Expanding an array without an index only gives the first element.For more information:https://www.shellcheck.net/wiki/SC2148 -- Tips depend on target shell and y...https://www.shellcheck.net/wiki/SC2128 -- Expanding an array without an ind...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 #!/bin/bash 或 #!/usr/bin/env bash</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">In test.sh line 4:echo "${array}"    ^------^ SC2128: Expanding an array without an index only gives the first element.For more information:https://www.shellcheck.net/wiki/SC2128 -- Expanding an array without an ind...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 #!/bin/zsh</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">In test.sh line 1:#!/bin/zsh^-- SC1071: ShellCheck only supports sh/bash/dash/ksh scripts. Sorry!For more information:https://www.shellcheck.net/wiki/SC1071 -- ShellCheck only supports sh/bash/...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 #!/bin/sh</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">In test.sh line 3:array=(1 2 3)    ^-----^ SC2039: In POSIX sh, arrays are undefined.In test.sh line 4:echo "${array}"    ^------^ SC2128: Expanding an array without an index only gives the first element.For more information:https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, arrays are undefined.https://www.shellcheck.net/wiki/SC2128 -- Expanding an array without an ind...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一行不写大多数时候我们运行脚本的时候也没有问题,但在使用shellcheck进行静态代码检查的时候,会提示</p><blockquote><p>^-- SC2148: Tips depend on target Shell and yours is unknown. Add a shebang.</p></blockquote><p>如果使用Intellij IDEA 也会提示 <code>add shebang line</code></p><p>当你点击 <code>Add shebangline</code> 的时候它会自动添加 <code>#!/usr/bin/env bash</code> ,这也是为什么本Shell规约推荐使用 <code>#!/usr/bin/env bash</code> 的原因之一。</p><p><strong>shebang 维基百科</strong></p><blockquote><p>在计算机科学中,Shebang（也称为 Hashbang ）是一个由井号和叹号构成的字符序列 #! ,其出现在文本文件的第一行的前两个字符。 在文件中存在 Shebang 的情况下,类 Unix 操作系统的程序载入器会分析 Shebang 后的内容,将这些内容作为解释器指令,并调用该指令,并将载有 Shebang 的文件路径作为该解释器的参数[1]。\n<br>例如,以指令<code>#!/bin/sh</code>开头的文件在执行时会实际调用 <code>/bin/sh</code> 程序（通常是 Bourne Shell 或兼容的 Shell,例如 bash、dash 等）来执行。这行内容也是 Shell 脚本的标准起始行。</p></blockquote><p>首行写完之后,就要正式写我们的代码了。我们学Java的时候第一件事情就是学习Java的8种基本数据类型。我们学Shell也一样,先看这门语言支持哪些数据类型。对于比Java这种强类型的语言,Shell是一门弱类型语言,Shell可以说只有两类数据类型 字符串 &amp; 数组。</p><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><p>无论输入的是字符串还是数字,Shell都是按照字符串类型来进行存储的(也就是说Shell无法显示定义一个 bit、short、int、long、float、double、boolean、char),具体属于什么数据类型,shell会根据上下文或操作符自行确定。</p><p>字符串可以用单引号,也可以用双引号,也可以不用引号。单双引号的区别跟PHP类似。区别</p><ol><li>``单引号里的任何字符都会原样输出,单引号字符串中的变量是无效的；</li><li>``单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行）,但可成对出现,作为字符串拼接使用。</li><li>""双引号里可以有变量(这在编程语言里面叫字符串插值)和转义字符</li></ol><h3 id="shell数组"><a class="markdownIt-Anchor" href="#shell数组"></a> Shell数组</h3><h4 id="定义数组"><a class="markdownIt-Anchor" href="#定义数组"></a> 定义数组</h4><p>bash支持一维数组（不支持多维数组）,并且没有限定数组的大小。类似于 C 语言,数组元素的下标由 0 开始编号。获取数组中的元素要利用下标,下标可以是整数或算术表达式,其值应大于或等于 0。在 Shell 中,用括号来表示数组,数组元素用"空格"符号分割开。</p><p>定义数组的一般形式为:数组名=(值1 值2 … 值n).例如:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span><span class="token comment"># 或者</span><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>value0value1value2value3<span class="token punctuation">)</span><span class="token comment"># 还可以单独定义数组的各个分量:</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value0array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>valueN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以不使用连续的下标,而且下标的范围没有限制。</p><h4 id="读取数组"><a class="markdownIt-Anchor" href="#读取数组"></a> 读取数组</h4><blockquote><p><font color="#dd0000"> 读取数组元素值的一般格式是:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mtext>数组名</mtext><mo stretchy="false">[</mo><mtext>下标</mtext><mo stretchy="false">]</mo></mrow><mtext>。</mtext><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>f</mi><mi>o</mi><mi>n</mi><mi>t</mi><mo>&gt;</mo><mo>&lt;</mo><mi>b</mi><mi>r</mi><mi mathvariant="normal">/</mi><mo>&gt;</mo><mtext>例如</mtext><mo>:</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>n</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">{数组名[下标]}。&lt;/font&gt;&lt;br /&gt;例如:valuen=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">名</span><span class="mopen">[</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">标</span><span class="mclose">]</span></span><span class="mord cjk_fallback">。</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">如</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>{array[n]}<br>使用 @ 或 * 符号可以获取数组中的所有元素。<br>例如:echo ${array[@]}, echo ${array[*]}</font></p></blockquote><h4 id="数组长度"><a class="markdownIt-Anchor" href="#数组长度"></a> 数组长度</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">取得数组元素的个数length=${#array[@]}或者length=${#array[*]}取得数组单个元素的长度lengthn=${#array[n]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><p><font color="#dd0000">【强制】传递数组使用 “${list[*]}” 形式 </font><br></p></blockquote><blockquote><p><font color="#dd0000">【强制】接收数组使用 array=($*) 形式 </font><br></p></blockquote><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># @return the number of elements in this list</span><span class="token keyword">function</span> <span class="token function-name function">list_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${size}</span>"</span><span class="token punctuation">}</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>list_size <span class="token string">"<span class="token variable">${list<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span><span class="token variable">)</span></span>assertEquals <span class="token string">"<span class="token variable">${size}</span>"</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知道了数据类型,我们看怎么定义变量呢?</p><h2 id="shell变量"><a class="markdownIt-Anchor" href="#shell变量"></a> Shell变量</h2><h3 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h3><p>Shell里面的变量分为 局部变量、环境变量。</p><ol><li>局部变量 局部变量在脚本或命令中定义,仅在当前shell实例中有效,其他shell启动的程序不能访问局部变量。</li><li>环境变量 所有的程序,包括shell启动的程序,都能访问环境变量,有些程序需要环境变量来保证其正常运行。</li></ol><p>本shell规约规定</p><blockquote><p><font color="#dd0000">【推荐】不要定义与环境变量重名的局部变量,会改变环境变量的值,进而影响后续脚本的执行。</font><br></p></blockquote><blockquote><p><font color="#dd0000">【推荐】如果要打破上一个推荐,修改后及时修改回来。例如 IFS 代表分隔符的情况。</font><br></p></blockquote><h3 id="变量定义"><a class="markdownIt-Anchor" href="#变量定义"></a> 变量定义</h3><p>基本形式 <code>变量=变量值</code></p><p>本shell规约规定</p><blockquote><p><font color="#dd0000">【强制】变量名和等号之间不能有空格,这可能和你熟悉的所有编程语言都不一样。</font><br></p></blockquote><h3 id="变量取值"><a class="markdownIt-Anchor" href="#变量取值"></a> 变量取值</h3><blockquote><p><font color="#dd0000">【强制】变量取值用 “${}”, 使用 {} 包裹,给所有变量加上花括号,防止产生歧义 </font><br></p></blockquote><blockquote><p><font color="#dd0000">【强制】变量取值用 “${}”, 使用 “” 包裹,防止分词 </font><br></p></blockquote><blockquote><p><font color="#dd0000">【强制】若需要将调用的函数的返回结果赋值给local变量,使用 $(),不推荐使用 `` </font><br></p></blockquote><h3 id="变量作用域"><a class="markdownIt-Anchor" href="#变量作用域"></a> 变量作用域</h3><p>局部变量如果不明确变量的作用域则默认是全局可见的,也就是一个变量从定义它的位置开始到脚本的最后一行,一直是可以访问的,即使是在函数里面定义的,在函数外面也是可以访问的。这一点和我们用的Java是不一样的。Java在大括号内定义的变量只能在大括号内可见。如果想要实现在大括号的的作用于可见的变量,我们必须显示的用local关键字修饰。例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span>           <span class="token comment">#全局变量</span><span class="token keyword">function</span> <span class="token function-name function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token comment">#全局变量</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span>         <span class="token comment">#全局变量</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">2</span>   <span class="token comment">#局部变量</span><span class="token punctuation">}</span>f1            <span class="token comment">#这里得先调用一下</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${a}</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${b}</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${c}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a 在函数外面定义,系全局作用域；在f1里面改变了a的值,同时定义了一个全局作用域的变量b ,和一个 函数作用域的变量c。 所以 b 在大括号外是可以被访问的,但是c却不能被访问。</p><p>本shell规约规定</p><blockquote><p><font color="#dd0000">【推荐】能缩小变量作用域的就缩小变量的作用域,也就是能用local的就用local修饰</font></p></blockquote><h3 id="只读变量"><a class="markdownIt-Anchor" href="#只读变量"></a> 只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量,只读变量的值不能被改变。</p><p>本shell规约规定</p><blockquote><p><font color="#dd0000">【强制】认定为常量的必须用readonly修饰,相当于 Java 中的final</font></p></blockquote><h3 id="删除变量"><a class="markdownIt-Anchor" href="#删除变量"></a> 删除变量</h3><p>使用 unset 命令可以删除变量,变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p>本shell规约规定</p><blockquote><p><font color="#dd0000">【推荐】删除变量能不用就不用,一般没什么应用场景</font></p></blockquote><h2 id="关于注释"><a class="markdownIt-Anchor" href="#关于注释"></a> 关于注释</h2><p>除脚本首行外,所有以 <code>#</code> 开头的语句都将成为注释。</p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主函数 []&lt;-()                   &lt;-------函数注释这样写</span><span class="token keyword">function</span> <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">"Hello World!!!"</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${var}</span>"</span><span class="token punctuation">}</span><span class="token comment"># info级别的日志 []&lt;-(msg:String)  &lt;-------带入参的函数注释</span><span class="token function-name function">log_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token variable">)</span></span>][<span class="token variable">$$</span>]: [info] <span class="token variable">$*</span>"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">}</span><span class="token comment"># error级别的日志 []&lt;-(msg:String) &lt;-------带入参的函数注释</span><span class="token function-name function">log_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment"># todo [error]用红色显示         &lt;------函数内注释</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">msg</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#将要输出的日志内容  &lt;------变量的注释紧跟在变量的后面</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">${msg}</span>"</span> <span class="token operator">!=</span> x<span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token comment"># 注释                        &lt;-------函数内注释 `#` 与缩进格式对整齐</span>  <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token variable">)</span></span>][<span class="token variable">$$</span>]:[error] <span class="token variable">$*</span>"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token keyword">fi</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><p><font color="#dd0000">【强制】函数需有注释标识该函数的用途、入参变量、函数的返回值类型</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】函数的注释 <code>#</code> 顶格写, 井号后面紧跟一个空格<br>说明: 对于该格式的要求是为了最后生成函数的帮助文档是用的(markdown语法),然后是注释的内容,注释尽量简短且在一行,最后跟的是函数的类型。</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】函数内注释 <code>#</code> 与缩进格式对整齐</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】变量的注释紧跟在变量的后面,不推荐换行写注释</font></p></blockquote><h2 id="关于函数"><a class="markdownIt-Anchor" href="#关于函数"></a> 关于函数</h2><p>函数定义的形式是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">#函数执行的操作</span><span class="token comment">#函数的返回结果</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">#函数执行的操作</span><span class="token comment">#函数的返回结果</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><p><font color="#dd0000"> 【强制】认定为常函数的必须用readonly修饰,相当于 Java 中的final。</font></p></blockquote><blockquote><p><font color="#dd0000"> 【推荐】使用关键字 <code>function</code> 显示定义的函数为 public 的函数,可以供 外部脚本以 <code>sh 脚本 函数 函数入参</code> 的形式调用,可以认为成Java当中的public的方法</font></p></blockquote><blockquote><p><font color="#dd0000"> 【推荐】未使用关键字 <code>function</code> 显示定义的函数为 private 的函数, 仅供本脚本内部调用,可以认为成Java中的私有方法,注意这种private是人为规定的,并不是Shell的语法,不推荐以 &gt; <font color="#dd0000"> <code>sh 脚本 函数 函数入参</code> 的形式调用,注意是不推荐而不是不能。</font></font></p></blockquote><p>说明:本Shell规约这样做的目的就在于使脚本具有一定的封装性,看到 <code>function</code> 修饰的就知道这个函数能被外部调用, 没有被修饰的函数就仅供内部调用。你就知道如果你修改的函数的影响范围. 如果是 被function 修饰的函数,修改后可能影响到外部调用他的脚本, 而修改未被function修饰的函数的时候,仅仅影响本文件中其他函数。</p><p>如 <a href="http://core.sh">core.sh</a> 脚本内容如下是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重新设置DNS地址 []&lt;-()</span><span class="token keyword">function</span> <span class="token function-name function">setNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>log_info <span class="token string">"setNameServer is ok"</span><span class="token punctuation">}</span><span class="token comment"># info级别的日志 []&lt;-(msg:String)</span><span class="token function-name function">log_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token variable">)</span></span>][<span class="token variable">$$</span>]: <span class="token entity" title="\033">\033</span>[32m [info] <span class="token entity" title="\033">\033</span>[0m <span class="token variable">$*</span>"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">}</span><span class="token comment"># error级别的日志 []&lt;-(msg:String)</span><span class="token function-name function">log_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment"># todo [error]用红色显示</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token variable">)</span></span>][<span class="token variable">$$</span>]: <span class="token entity" title="\033">\033</span>[31m [error] <span class="token entity" title="\033">\033</span>[0m <span class="token variable">$*</span>"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则我可以使用 <code>sh core.sh setNameServer</code> 的形式调用  <code>set_name_server</code> 函数,<br>但就不推荐使用 <code>sh core.sh log_info "Hello World"</code> 的形式使用 <code>log_info</code> 和 <code>log_error</code> 函数,注意是不推荐不是不能。</p><h3 id="函数调用"><a class="markdownIt-Anchor" href="#函数调用"></a> 函数调用</h3><p>变量、函数调用必须在函数声明之后,也就是说在用一个函数的时候,这一行命令的前面必须出现了该函数,因为Shell的执行是从上向下解释执行的。</p><p>为了能够调用另一个脚本中的方法，我们可以使用source关键字加载一下该脚本，source 相当于java中的import。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Log/BaseLog.sh<span class="token keyword">function</span> <span class="token function-name function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">"I am f1"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>log_info <span class="token string">"LINENO:<span class="token variable">${LINENO}</span> 开始执行"</span>      <span class="token comment">#调用 ./../../BaseShell/Log/BaseLog.sh 中的函数,需要先用source BaseLog.sh</span>f1                                      <span class="token comment">#在函数内部调用当前脚本内的函数</span>log_success <span class="token string">"LINENO:<span class="token variable">${LINENO}</span> 结束执行"</span>   <span class="token comment">#调用 ./../../BaseShell/Log/BaseLog.sh 中的函数</span><span class="token punctuation">}</span>main                                       <span class="token comment">#在脚本内部调用当前脚本内的函数</span><span class="token function">bash</span> ChangBaiShanFetcher.sh                <span class="token comment">#执行其他脚本</span><span class="token function">bash</span> ChangBaiShanFetcher.sh main           <span class="token comment">#执行其他脚本的main方法,前提是 ChangBaiShanFetcher.sh 脚本 支持按函数名调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】将函数分门别类保存在不同的脚本中【推荐】使用source的方式引入另一个脚本中的函数,不推荐使用`脚本 函数名 函数参数`的形式调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="函数参数"><a class="markdownIt-Anchor" href="#函数参数"></a> 函数参数</h3><table><thead><tr><th>参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本或函数的参数个数</td><td></td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。如"$*“用「”」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。</td><td></td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td><td></td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td><td></td></tr><tr><td>$@</td><td>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo><mtext>相同</mtext><mo separator="true">,</mo><mtext>但是使用时加引号</mtext><mo separator="true">,</mo><mtext>并在引号中返回每个参数。如</mtext><mi mathvariant="normal">"</mi></mrow><annotation encoding="application/x-tex">*相同,但是使用时加引号,并在引号中返回每个参数。如"</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∗</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">同</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">号</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">返</span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">如</span><span class="mord">"</span></span></span></span>@“用「”」括起来的情况、以"$1" “<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi mathvariant="normal">"</mi><mo>…</mo><mi mathvariant="normal">"</mi></mrow><annotation encoding="application/x-tex">2" … "</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">"</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span></span></span></span>n” 的形式输出所有参数。</td><td></td></tr><tr><td>$-</td><td>显示Shell使用的当前选项,与set命令功能相同。</td><td></td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误,其他任何值表明有错误。</td><td></td></tr></tbody></table><p>本Shell规约规定</p><blockquote><p><font color="#dd0000"> 【强制】 在函数内部首先使用有意义的变量名接受参数,然后在使用这些变量进行操作,禁止直接操作$1,$2等,除非这些变量只用一次</font></p></blockquote><h3 id="函数注释"><a class="markdownIt-Anchor" href="#函数注释"></a> 函数注释</h3><p>函数类型的概念是从函数编程语言中的概念偷过来的,Shell函数的函数类型指的是函数的输入到函数的输入的映射关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 主函数 []&lt;-()                  &lt;-------函数注释这样写</span><span class="token keyword">function</span> <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">"Hello World!!!"</span><span class="token builtin class-name">echo</span> <span class="token variable">${var}</span><span class="token punctuation">}</span><span class="token comment"># info级别的日志 []&lt;-(msg:String)  &lt;-------带入参的函数注释</span><span class="token function-name function">log_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y-%m-%dT%H:%M:%S%z'</span><span class="token variable">)</span></span>][<span class="token variable">$$</span>]: [info] <span class="token variable">$*</span>"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:</p><blockquote><p>main函数的函数类型是 <code>[]&lt;-()</code> , <code>&lt;-</code> 左侧表的是函数的返回值类型 用<code>[]</code>包裹, 右侧是函数的参数类型 用<code>()</code>包裹,多个参数用 <code>,</code> 分隔,参数的描述是从 Scala 语言中偷过来, 先是参数名称 然后是参数类型 中间用<code>:</code>分隔</p></blockquote><blockquote><p>对于main函数的注释来说, <code>#</code> 顶格写,后面紧跟一个空格,其实这样写是遵循的markdown的语法, 后面再跟一个空格,然后是 <code>[]&lt;-()</code>,代表这个函数没有入参也没有返回值,这个函数的目的就是执行这个这个函数中的命令,但我不关心这个函数的返回值。也就是利用函数的副作用来完成我们想要的操作。</p></blockquote><blockquote><p>对于log_info 也是一样 不过 最后的函数类型是 <code>[]&lt;-(msg:String)</code> 代表入参是一个<code>String</code>类型的信息,然后也没有返回值。</p></blockquote><p>关于函数的返回值,我理解的函数的返回值有两种形式,一种是显示的return一种是隐式的echo</p><p>以下是几种常见的写法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>-<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token operator">&lt;</span>-<span class="token punctuation">(</span>var1:String,var2:String<span class="token punctuation">)</span><span class="token punctuation">[</span>Boolean<span class="token punctuation">]</span><span class="token operator">&lt;</span>-<span class="token punctuation">(</span>var1:String,var2:Int<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>-<span class="token punctuation">(</span>var1:String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h3><p>Shell 函数的返回值比较复杂,获取函数的返回值又有多种方式.一般来说,一个函数内的所有标准输出都作为函数的返回值,注意是标准输出,不包含标准错误。<br>我们先来说,我们执行一条命令的时候, 比如 pwd 正常情况下它输出的结果是 当前所处的目录</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Last login: Sat Jan 20 17:39:16 on ttys000chenshang@chenshangMacBook-Pro:~$ pwd/Users/chenshang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意我说的是正常情况下,那异常情况下呢?输出的结果又是什么?输出的结果有可能五花八门!所以,Shell中必然有一种状态来标识一条命令是否执行成功,也就是命令执行结果的状态。那这种状态是怎么标识的,这就引出了Shell中一个反人类的规定,就是 0代表真、成功的含义。非零代表假、失败的含义。</p><p>所以 pwd 这条命令如果执行成功的话,命令的执行结果状态一定是0,然后返回值才是当前目录。如果这条命令执行失败的话,命令的执行结果状态一定不是0,有可能是1 代表命令不存在,然后输出 not found,也有可能执行结果状态是2 代表超时,然后什么也不输出。(不要以为pwd这种linux内带的命令就一定执行成功,有可能你拿到的就是一台阉割版的linux呢)</p><h4 id="显示return"><a class="markdownIt-Anchor" href="#显示return"></a> 显示return</h4><p>return 用来显示的返回函数的返回结果,例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查当前系统版本 [Integer]&lt;-()</span><span class="token keyword">function</span> <span class="token function-name function">checkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>log_info <span class="token string">"check_version ..."</span><span class="token punctuation">)</span> <span class="token comment">#log_info是我写的工具类中的一个函数</span><span class="token builtin class-name">local</span> version <span class="token comment">#这里是先定义变量,在对变量进行赋值,我们往往是直接初始化,而不是像这样先定义在赋值,这里只是告诉大家可以这么用</span><span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">sed</span> <span class="token parameter variable">-r</span> <span class="token string">'s/.* ([0-9]+)\..*/\1/'</span> /etc/redhat-release<span class="token variable">)</span></span><span class="token punctuation">(</span>log_info <span class="token string">"centos version is <span class="token variable">${version}</span>"</span><span class="token punctuation">)</span><span class="token builtin class-name">return</span> <span class="token string">"<span class="token variable">${version}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示的return结果,返回值只能是[0-255]的数值,常常用在状态判断的时候。所以这个return有点像我们定义的异常（异常code,异常msg）.code=0,则代表命令执行成功,code!=0代表异常,异常msg通过标准错误输出。</p><p>这样这个函数的返回值是一个数值类型,我在脚本的任何地方调用 checkVersion 这个函数后,使用 $? 获取返回值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checkVersion<span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${version}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意这里不用 <code>version=$(check_version)</code> 这种形式获取结果,这样也是获取不到结果的</p><p>本Shell规约规定:</p><blockquote><p><font color="#dd0000"> 【推荐】不推荐使用return方式返回,推荐使用echo方式返回结果</font></p></blockquote><blockquote><p><font color="#dd0000"> 【推荐】返回结果类型是Boolean类型,也就是说函数的功能是起判断作用,返回结果是真或者假的时候使用才显示 return 返回结果</font></p></blockquote><p>例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查网络 [Boolean]&lt;-()</span><span class="token keyword">function</span> <span class="token function-name function">check_network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>log_info <span class="token string">"check_network ..."</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">http_code</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-I</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> %<span class="token punctuation">\</span><span class="token punctuation">{</span>http_code<span class="token punctuation">\</span><span class="token punctuation">}</span>  www.baidu.com<span class="token variable">)</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${http_code}</span> <span class="token parameter variable">-eq</span> <span class="token number">200</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token punctuation">(</span>log_info <span class="token string">"network is ok"</span><span class="token punctuation">)</span>    <span class="token builtin class-name">return</span> <span class="token variable">${TRUE}</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token punctuation">(</span>log_error <span class="token string">"network is not ok"</span><span class="token punctuation">)</span><span class="token builtin class-name">return</span> <span class="token variable">${FALSE}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隐式echo"><a class="markdownIt-Anchor" href="#隐式echo"></a> 隐式echo</h4><p>echo 用来显示的返回函数的返回结果,例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将json字符串格式化树形结构 [String]&lt;-(json_string:String)</span><span class="token keyword">function</span> <span class="token function-name function">json_format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">jsonString</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${jsonString}</span>"</span><span class="token operator">|</span>jq <span class="token builtin class-name">.</span> <span class="token comment">#jq是Shell中处理json的一个工具</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数中所有的echo照理都应该输出到控制台上 例如</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">json_format "{\"1\":\"one\"}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会在控制台上看到如下输出</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"1"</span><span class="token operator">:</span> <span class="token string">"one"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是一旦你用变量接收函数的返回值,这些本该输出到控制台的结果就都会存储到你定义的变量中 例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">json</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>json_format <span class="token string">"{<span class="token entity" title="\&quot;">\"</span>1<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>one<span class="token entity" title="\&quot;">\"</span>}"</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${json}</span>"</span> <span class="token comment">#如果没有这句,上面的语句执行完成后,不会在控制台有任何的输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们把 json_format 改造一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将json字符串格式化树形结构 [String]&lt;-(json_string:String)</span><span class="token keyword">function</span> <span class="token function-name function">json_format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">jsonString</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"为格式化之前:<span class="token variable">${jsonString}</span>"</span> <span class="token comment">#其实新添加的这一句只是用来记录一行日志的,但是返回结果会被外层变量接收</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${jsonString}</span>"</span><span class="token operator">|</span>jq <span class="token builtin class-name">.</span> <span class="token comment">#jq是Shell中处理json的一个工具</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>echo "为格式化之前:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>j</mi><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>s</mi></msub><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mi mathvariant="normal">"</mi><mtext>其实新添加的只一句只是用来记录一行日志的</mtext><mo separator="true">,</mo><mtext>但是</mtext><mi>j</mi><mi>s</mi><mi>o</mi><mi>n</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">{json_string}" 其实新添加的只一句只是用来记录一行日志的,但是json=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span class="mord">"</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">句</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">记</span><span class="mord cjk_fallback">录</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">日</span><span class="mord cjk_fallback">志</span><span class="mord cjk_fallback">的</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>(json_format “{"1":"one"}”),变量 json 也会将这句话作为返回结果进行接收,但这是我不想要看到的。</p><p>解决这个问题需要了解重定向相关</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将json字符串格式化树形结构 [String]&lt;-(json_string:String)</span><span class="token keyword">function</span> <span class="token function-name function">json_format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">jsonString</span><span class="token operator">=</span><span class="token variable">$1</span>log_trace <span class="token string">"为格式化之前:<span class="token variable">${jsonString}</span>"</span> <span class="token comment">#其实新添加的只一句只是用来记录一行日志的</span>log_info  <span class="token string">"为格式化之前:<span class="token variable">${jsonString}</span>"</span> <span class="token comment">#其实新添加的只一句只是用来记录一行日志的</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${jsonString}</span>"</span><span class="token operator">|</span>jq <span class="token builtin class-name">.</span> <span class="token comment">#jq是Shell中处理json的一个工具</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详情请看 <a href="http://BaseLog.sh">BaseLog.sh</a> 中对日志的处理</p><h2 id="关于分支"><a class="markdownIt-Anchor" href="#关于分支"></a> 关于分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HEAD_KEYWORD parameters<span class="token punctuation">;</span> BODY_BEGINBODY_COMMANDSBODY_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><font color="#dd0000"></font></blockquote><p>【强制】将HEAD_KEYWORD和初始化命令或者参数放在第一行；<br>【强制】将BODY_BEGIN同样放在第一行；<br>【强制】复合命令中的BODY部分以2个空格缩进；<br>【强制】BODY_END部分独立一行放在最后；<br>【推荐】parameters部分test表达式变量取值都用""包裹；<br>【推荐】parameters部分test表达式统一使用=等符号, 在明确是数字的时候可以使用 -eq等参数；</p><h3 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while"><a class="markdownIt-Anchor" href="#while"></a> while</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">done</span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> item <span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${item}</span>"</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token string">'file_name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="until"><a class="markdownIt-Anchor" href="#until"></a> until</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> statements<span class="token keyword">done</span><span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token variable">${array}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${item}</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case"><a class="markdownIt-Anchor" href="#case"></a> case</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">case</span> word <span class="token keyword">in</span>pattern <span class="token punctuation">)</span>  <span class="token comment">#statements</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>  <span class="token comment">#statements</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><blockquote><font color="#dd0000"></font></blockquote><p>【强制】 if\while\until 后面的判断 使用 双中括号<code>[[]]</code></p><h2 id="数学计算"><a class="markdownIt-Anchor" href="#数学计算"></a> 数学计算</h2><p>注释 1:shell 的自加、自减操作符在使用上和 c 语言一样。-- 或者 ++ 出现在变量前面是前缀形式,先运算后赋值；-- 或者 ++ 出现在变量后面是后缀形式,先赋值后运算。<br>本Shell规约规定</p><blockquote><font color="#dd0000"></font></blockquote><p>【推荐】明确知道变量是整数,计算使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>包裹计算</mtext><mo separator="true">,</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>内对变量的操作不用</mtext></mrow><annotation encoding="application/x-tex">(())包裹计算,(())内对变量的操作不用</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">裹</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">算</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">用</span></span></span></span>取值<br>正确 a=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>反例</mtext><mi>a</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">((1+1))反例 a=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">例</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>(($a++))<br>【推荐】复杂计算使用bc计算器,前提是得安装bc计算器命令</p><h2 id="关于debug"><a class="markdownIt-Anchor" href="#关于debug"></a> 关于Debug</h2><p>详情见 <a href="http://localhost:4000/2021/06/03/ji-zhu-zong-jie/baseshell/shell-gao-ji-bian-cheng-ji-qiao/">Shell高级编程技巧</a></p><h2 id="关于单元测试"><a class="markdownIt-Anchor" href="#关于单元测试"></a> 关于单元测试</h2><p>详情见 <a href="http://localhost:4000/2021/06/03/ji-zhu-zong-jie/baseshell/shell-gao-ji-bian-cheng-ji-qiao/">Shell高级编程技巧</a></p><h1 id="命名风格"><a class="markdownIt-Anchor" href="#命名风格"></a> 命名风格</h1><p>本Shell规约规定</p><blockquote><p><font color="#dd0000">【强制】脚本中变量、函数、文件的命名均不能以数字、下划线、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>开头</mtext><mo separator="true">,</mo><mtext>也不能以下划线或者</mtext></mrow><annotation encoding="application/x-tex">开头,也不能以下划线或者</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">头</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span></span></span></span>结尾<br>反例: _name / __name / <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant="normal">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant="normal">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">name / name_ / name</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">/</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span></span></span></span> / 5name<br>说明: $作为Shell语言的取值符号,其他命名约束参考Java规约。</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】代码中的命名严禁使用拼音与英文混合的方式,更不允许直接使用中文的方式。<br>正例:alibaba / taobao / youku / hangzhou 等国际通用的名称,可视同英文。<br>说明:正确的英文拼写和语法可以让阅读者易于理解,避免歧义。注意,即使纯拼音命名方式 也要避免采用。</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】参数名、局部变量都统一使用 lowerCamelCase 风格,必须遵从 驼峰形式。<br>正例: localValue / errMsg / userName</font></p></blockquote><blockquote><p><font color="#dd0000">【推荐】使用下划线分割函数命名,都统一使用 lowerCamelCase 风格,必须遵从 驼峰形式。<br>正例:getUserName() / log_info() / map_add()<br>说明: 纯用下划线会使得命名很长,纯用驼峰又无法将函数聚类<br>get_user_english_name()  vs getUserEnglishName()<br>log_info() vs logInfo()<br>map_add() vs mapAdd()<br>log_info “xxx” 在调用的时候类比于Java 的<code>log.info("xxx")</code></font></p></blockquote><blockquote><p><font color="#dd0000">【强制】文件名 UpperCamelCase 风格,首字母大写的驼峰形式<br>正例:BaseLog.sh / <a href="http://BaseString.sh">BaseString.sh</a><br>说明:类比Java的类,我们把相同功能的函数抽象到一个脚本文件中,留待后续其他脚本引用。随着我们写的脚本日渐增多<br>我们很有必要分门别类的将它们聚集到一个文本文件中,一是方便后续查阅,而是方便后续调用</font></p></blockquote><blockquote><p><font color="#dd0000">【强制】常量命名全部大写,单词间用下划线隔开,力求语义表达完整清楚,不要嫌名字长。<br>正例:MAX_STOCK_COUNT 反例:MAX_COUNT</font></p></blockquote><blockquote><p><font color="#dd0000">【推荐】文件夹名字大写<br>【强制】文件名以 .sh 结尾<br>说明:虽然不用.sh结尾或者以任何其他新式结尾都可以运行,但是以 .sh结尾可以一眼看出就是脚本文件</font></p></blockquote><p><a name="end"></a><br>本Shell规约规定</p><blockquote><p><font color="#dd0000">【强制】使用两个空格进行缩进,不适用tab缩进</font></p></blockquote><blockquote><p><font color="#dd0000">【推荐】不在一行的时候使用 <code>\</code> 进行换行,使用 <code>\</code> 换行的原则是整齐美观</font></p></blockquote><p>例子:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># 脚本使用帮助文档 []&lt;-()</span><span class="token function-name function">manual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">cat</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"less <span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$0</span><span class="token entity" title="\&quot;">\"</span>"</span> <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-B1</span> <span class="token string">"function "</span>   <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"<span class="token entity" title="\\">\\</span>--"</span>         <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">"s/function //g"</span>   <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">"s/(){//g"</span>         <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">"s/#//g"</span>           <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'N;s/\n/ /'</span>        <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">column</span> <span class="token parameter variable">-t</span>              <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $1,$3,$2}'</span> <span class="token punctuation">\</span>        <span class="token operator">|</span><span class="token function">column</span> <span class="token parameter variable">-t</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">search_user_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>httpclient_get <span class="token parameter variable">--cookie</span> <span class="token string">"<span class="token variable">${cookie}</span>"</span> <span class="token punctuation">\</span>                                       <span class="token string">"<span class="token variable">${url}</span>/userName=<span class="token variable">${user_name}</span>"</span><span class="token variable">)</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> <code>()、(())、[]、[[]]、{}</code> 使用方法</h1><h2 id="的用法"><a class="markdownIt-Anchor" href="#的用法"></a> ( ) 的用法</h2><h3 id="命令组"><a class="markdownIt-Anchor" href="#命令组"></a> 命令组。</h3><p>括号中的命令将会新开一个子shell顺序执行,所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号’;'隔开,最后一个命令可以没有分号,各命令和括号之间不必有空格。</p><h3 id="命令替换"><a class="markdownIt-Anchor" href="#命令替换"></a> 命令替换。</h3><p>等同于 `command`,shell扫描一遍命令行,发现了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo><mtext>结构</mtext><mo separator="true">,</mo><mtext>便将</mtext></mrow><annotation encoding="application/x-tex">(command)结构,便将</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">构</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">便</span><span class="mord cjk_fallback">将</span></span></span></span>(command)中的command执行一次,得到其标准输出,再将此输出放到原来命令。</p><h3 id="用于初始化数组"><a class="markdownIt-Anchor" href="#用于初始化数组"></a> 用于初始化数组。</h3><p>如：array=(a b c d e f)</p><h2 id="的用法-2"><a class="markdownIt-Anchor" href="#的用法-2"></a> (( )) 的用法</h2><ol><li><p>这种扩展计算是整数型的计算,不支持浮点型。((exp))结构扩展并计算一个算术表达式的值,如果表达式的结果为0,那么返回的退出状态码为1,或者是"false",而一个非零值的表达式所返回的退出状态码将为0,或者是"true"。若是逻辑判断,表达式exp为真则为1,假则为0。</p></li><li><p>只要括号中的运算符、表达式符合C语言运算规则,都可用在$((exp))中,甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时,输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果为95 (16进制转十进制)<br>单纯用 (( )) 也可重定义变量值,比如 a=5; ((a++))可将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext>重定义为</mtext><mn>6</mn><mtext>常用于算术运算比较</mtext><mo separator="true">,</mo><mtext>双括号中的变量可以不使用</mtext></mrow><annotation encoding="application/x-tex">a 重定义为6常用于算术运算比较,双括号中的变量可以不使用</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">为</span><span class="mord">6</span><span class="mord cjk_fallback">常</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">术</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">较</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">双</span><span class="mord cjk_fallback">括</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span></span></span></span>符号前缀。括号内支持多个表达式用逗号分开。只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)), 如果不使用双括号, 则为for i in <code>seq 0 4</code>或者for i in {0…4}。再如可以直接使用if (($i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</p></li></ol><h2 id="的用法-3"><a class="markdownIt-Anchor" href="#的用法-3"></a> [ ] 的用法</h2><ol><li>bash 的内部命令,[和test是等同的。如果我们不用绝对路径指明,通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识,右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试,并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号,但是新版的Bash中要求必须这样。</li><li>test和[]中可用的比较运算符只有==和!=,两者都是用于字符串比较的,不可用于整数比较,整数比较只能使用-eq,-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用,对于字符串比较可以使用转义形式,如果比较"ab"和"bc"：[ ab &lt; bc ],结果为真,也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</li><li>字符范围。用作正则表达式的一部分,描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</li><li>在一个array 结构的上下文中,中括号用来引用数组中每个元素的编号。</li></ol><h2 id="的用法-4"><a class="markdownIt-Anchor" href="#的用法-4"></a> [[ ]] 的用法</h2><ol><li>[[是 bash 程序语言的关键字。并不是一个命令,[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割,但是会发生参数扩展和命令替换。</li><li>支持字符串的模式匹配,使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式,而不仅仅是一个字符串,比如[[ hello == hell? ]],结果为真。[[ ]] 中匹配字符串或通配符,不需要引号。</li><li>使用[[ … ]]条件判断结构,而不是[ … ],能够防止脚本中的许多逻辑错误。比如,&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中,但是如果出现在[ ]结构中的话,会报错。比如可以直接使用if [[ $a != 1 &amp;&amp; $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。</li><li>bash把双中括号中的表达式看作一个单独的元素,并返回一个退出状态码。</li></ol><h2 id="的用法-5"><a class="markdownIt-Anchor" href="#的用法-5"></a> { } 的用法</h2><ol><li>对大括号{}中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。</li><li>对大括号{}中以点点（…）分割的顺序文件列表起拓展作用,如：touch {a…d}.txt 结果为a.txt b.txt c.txt d.txt。</li><li>代码块,又被称为内部组,这个结构事实上创建了一个匿名函数 。<br>与()中的命令不同,{}内的命令不会新开一个子shell运行,即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开,最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</li></ol><h1 id="字符串常用操作"><a class="markdownIt-Anchor" href="#字符串常用操作"></a> 字符串常用操作</h1><h2 id="特殊的替换结构"><a class="markdownIt-Anchor" href="#特殊的替换结构"></a> 特殊的替换结构</h2><ol><li><code>${var:-string}</code> 和 <code>${var:=string}</code>:若变量var为空,则用在命令行中用string来替换 <code>${var:-string}</code>,否则变量var不为空时,则用变量var的值来替换 <code>${var:-string}</code>；对于<code>${var:=string}</code> 的替换规则和 <code>${var:-string}</code> 是一样的,所不同之处是<code>${var:=string}</code>若var为空时,用string替换 <code>${var:=string}</code> 的同时,把string赋给变量var,<code>${var:=string}</code> 很常用的一种用法是,判断某个变量是否赋值,没有的话则给它赋上一个默认值。</li><li><code>${var:+string}</code> 的替换规则和上面的相反,即只有当var不是空的时候才替换成string,若var为空时则不替换或者说是替换成变量 var的值,即空值。</li><li><code>${var:?string}</code>替换规则为：若变量var不为空,则用变量var的值来替换${var:?string}；若变量var为空,则把string输出到标准错误中,并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</li><li><code>${variable%pattern}</code>这种模式,shell在variable中查找,看它是否以给的模式pattern结尾,如果是,就从命令行把variable中的内容去掉右边最短的匹配模式</li><li><code>${variable%%pattern}</code>这种模式,shell在variable中查找,看它是否以给的模式pattern结尾,如果是,就从命令行把variable中的内容去掉右边最长的匹配模式</li><li><code>${variable#pattern}</code>这种模式,shell在variable中查找,看它是否以给的模式pattern开始,如果是,就从命令行把variable中的内容去掉左边最短的匹配模式</li><li><code>${variable##pattern}</code>这种模式,shell在variable中查找,看它是否以给的模式pattern结尾,如果是,就从命令行把variable中的内容去掉右边最长的匹配模式<br>这四种模式中都不会改变variable的值,其中,只有在pattern中使用了匹配符号时,%和%%,#和##才有区别。结构中的pattern支持通配符,表示零个或多个任意字符,?表示仅与一个任意字符匹配,[…]表示匹配中括号里面的字符,[!..]表示不匹配中括号里面的字符。**</li></ol><h2 id="字符串提取和替换"><a class="markdownIt-Anchor" href="#字符串提取和替换"></a> 字符串提取和替换</h2><ol><li><code>${var:num}</code>,shell在var中提取第num个字符到末尾的所有字符。若num为正数,从左边0处开始；若num为负数,从右边开始提取字串,但必须使用在冒号后面加空格或一个数字或整个num加上括号,如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>v</mi><mi>a</mi><mi>r</mi><mo>:</mo><mo>−</mo><mn>2</mn></mrow><mtext>、</mtext><mi mathvariant="normal">‘</mi></mrow><annotation encoding="application/x-tex">{var: -2}、`</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">2</span></span><span class="mord cjk_fallback">、</span><span class="mord">‘</span></span></span></span>{var:1-3}<code>或</code>${var:(-2)}`。</li><li><code>${var:num1:num2}</code>,num1是位置,num2是长度。表示从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>a</mi><mi>r</mi><mtext>字符串的第</mtext></mrow><annotation encoding="application/x-tex">var字符串的第</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">串</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">第</span></span></span></span>num1个位置开始提取长度为$num2的子串。不能为负数。</li><li><code>${var/pattern1/pattern2}</code>表示将var字符串的第一个匹配的pattern1替换为另一个pattern2。</li><li><code>${var//pattern1/pattern2}</code>表示将<code>var</code>字符串中的所有能匹配的pattern1替换为另一个pattern2。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种排序算法-希尔排序</title>
      <link href="/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-xi-er-pai-xu/"/>
      <url>/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-xi-er-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>希尔排序的核心也是交换,是在插入排序的基础上演进的,目的是期望快速消除更多的逆序对儿。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">33</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">1</span> <span class="token number">34</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>D<span class="token operator">=</span>size<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>D<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>D<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment">#希尔排序就是在插入排序的基础上加上一个跳跃序列，可以说插入是临近比较，希尔则是跳跃着比较。</span>  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>D<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment">#先找一个下标指向第一个元素,因为默认第0个元素是排好的,所以从第1个下标的元素开始往前面插,i代表要取出的数</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment">#先记录下当前位置的元素,从他前面一个元素开始比较,直到找到自己合适位置就直接插入</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>D <span class="token operator">&amp;&amp;</span> ${nums[j<span class="token operator">-</span>D]} <span class="token operator">&gt;</span> tmp<span class="token punctuation">;</span>j<span class="token operator">-=</span>D<span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>      nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>j-D<span class="token punctuation">]</span>}</span>    <span class="token keyword">done</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp}</span>    <span class="token builtin class-name">echo</span> <span class="token string">"插入nums[<span class="token variable">${i}</span>]=<span class="token variable">${tmp}</span>到nums[<span class="token variable">${j}</span>]: <span class="token variable">${nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行以下看一下输出结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">插入nums[8]=22到nums[8]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[9]=11到nums[9]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[10]=33到nums[10]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[11]=22到nums[11]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[12]=11到nums[12]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[13]=1到nums[5]: 1 3 5 7 2 1 6 8 22 11 33 22 11 3 34 56插入nums[14]=34到nums[14]: 1 3 5 7 2 1 6 8 22 11 33 22 11 3 34 56插入nums[15]=56到nums[15]: 1 3 5 7 2 1 6 8 22 11 33 22 11 3 34 56插入nums[4]=2到nums[4]: 1 3 5 7 2 1 6 8 22 11 33 22 11 3 34 56插入nums[5]=1到nums[1]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[6]=6到nums[6]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[7]=8到nums[7]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[8]=22到nums[8]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[9]=11到nums[9]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[10]=33到nums[10]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[11]=22到nums[11]: 1 1 5 7 2 3 6 8 22 11 33 22 11 3 34 56插入nums[12]=11到nums[8]: 1 1 5 7 2 3 6 8 11 11 33 22 22 3 34 56插入nums[13]=3到nums[9]: 1 1 5 7 2 3 6 8 11 3 33 22 22 11 34 56插入nums[14]=34到nums[14]: 1 1 5 7 2 3 6 8 11 3 33 22 22 11 34 56插入nums[15]=56到nums[15]: 1 1 5 7 2 3 6 8 11 3 33 22 22 11 34 56插入nums[2]=5到nums[2]: 1 1 5 7 2 3 6 8 11 3 33 22 22 11 34 56插入nums[3]=7到nums[3]: 1 1 5 7 2 3 6 8 11 3 33 22 22 11 34 56插入nums[4]=2到nums[2]: 1 1 2 7 5 3 6 8 11 3 33 22 22 11 34 56插入nums[5]=3到nums[3]: 1 1 2 3 5 7 6 8 11 3 33 22 22 11 34 56插入nums[6]=6到nums[6]: 1 1 2 3 5 7 6 8 11 3 33 22 22 11 34 56插入nums[7]=8到nums[7]: 1 1 2 3 5 7 6 8 11 3 33 22 22 11 34 56插入nums[8]=11到nums[8]: 1 1 2 3 5 7 6 8 11 3 33 22 22 11 34 56插入nums[9]=3到nums[5]: 1 1 2 3 5 3 6 7 11 8 33 22 22 11 34 56插入nums[10]=33到nums[10]: 1 1 2 3 5 3 6 7 11 8 33 22 22 11 34 56插入nums[11]=22到nums[11]: 1 1 2 3 5 3 6 7 11 8 33 22 22 11 34 56插入nums[12]=22到nums[10]: 1 1 2 3 5 3 6 7 11 8 22 22 33 11 34 56插入nums[13]=11到nums[11]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[14]=34到nums[14]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[15]=56到nums[15]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[1]=1到nums[1]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[2]=2到nums[2]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[3]=3到nums[3]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[4]=5到nums[4]: 1 1 2 3 5 3 6 7 11 8 22 11 33 22 34 56插入nums[5]=3到nums[4]: 1 1 2 3 3 5 6 7 11 8 22 11 33 22 34 56插入nums[6]=6到nums[6]: 1 1 2 3 3 5 6 7 11 8 22 11 33 22 34 56插入nums[7]=7到nums[7]: 1 1 2 3 3 5 6 7 11 8 22 11 33 22 34 56插入nums[8]=11到nums[8]: 1 1 2 3 3 5 6 7 11 8 22 11 33 22 34 56插入nums[9]=8到nums[8]: 1 1 2 3 3 5 6 7 8 11 22 11 33 22 34 56插入nums[10]=22到nums[10]: 1 1 2 3 3 5 6 7 8 11 22 11 33 22 34 56插入nums[11]=11到nums[10]: 1 1 2 3 3 5 6 7 8 11 11 22 33 22 34 56插入nums[12]=33到nums[12]: 1 1 2 3 3 5 6 7 8 11 11 22 33 22 34 56插入nums[13]=22到nums[12]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56插入nums[14]=34到nums[14]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56插入nums[15]=56到nums[15]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="增量序列的选取"><a class="markdownIt-Anchor" href="#增量序列的选取"></a> 增量序列的选取</h1><ol><li>增量序列两个相邻元素最好互质<br>常用的增量序列</li><li>Hibbard 增量序列 2^n-1</li><li>Sedgewick 增量序列</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种排序算法-插入排序</title>
      <link href="/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-cha-ru-pai-xu/"/>
      <url>/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>插入排序的核心也是交换，注意和冒泡排序一样，都是相邻交换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 定义一个数组</span><span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">33</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">1</span> <span class="token number">34</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment">#先找一个下标指向第一个元素,因为默认第0个元素是排好的,所以从第1个下标的元素开始往前面插,i代表要取出的数</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment">#先记录下当前位置的元素,从他前面一个元素开始比较,直到找到自己合适位置就直接插入</span>  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment">#找一个下标先指向当前要插入的对象，然后一次和前面的元素进行比较，直到找到一个比自己小的元素，那这个元素后边位置就是要插入的元素所占的位置，否则就把前面的元素奔后移，来给要出入的元素腾空</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${nums<span class="token punctuation">[</span>j-1<span class="token punctuation">]</span>}</span> <span class="token parameter variable">-gt</span> <span class="token variable">${tmp}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token comment">#如果前面的元素比要出入的元素值大，就把前一个元素向后移动</span>         nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>j-1<span class="token punctuation">]</span>}</span>    <span class="token keyword">else</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp}</span>        <span class="token builtin class-name">echo</span> <span class="token string">"插入nums[<span class="token variable">${i}</span>]=<span class="token variable">${tmp}</span>到nums[<span class="token variable">${j}</span>]: <span class="token variable">${nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span>        <span class="token builtin class-name">break</span> <span class="token number">1</span> <span class="token comment"># 这里只跳出一层循环</span>    <span class="token keyword">fi</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行以下看一下输出结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">插入nums[1]=3到nums[1]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[2]=5到nums[2]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[3]=7到nums[3]: 1 3 5 7 2 3 6 8 22 11 33 22 11 1 34 56插入nums[4]=2到nums[1]: 1 2 3 5 7 3 6 8 22 11 33 22 11 1 34 56插入nums[5]=3到nums[3]: 1 2 3 3 5 7 6 8 22 11 33 22 11 1 34 56插入nums[6]=6到nums[5]: 1 2 3 3 5 6 7 8 22 11 33 22 11 1 34 56插入nums[7]=8到nums[7]: 1 2 3 3 5 6 7 8 22 11 33 22 11 1 34 56插入nums[8]=22到nums[8]: 1 2 3 3 5 6 7 8 22 11 33 22 11 1 34 56插入nums[9]=11到nums[8]: 1 2 3 3 5 6 7 8 11 22 33 22 11 1 34 56插入nums[10]=33到nums[10]: 1 2 3 3 5 6 7 8 11 22 33 22 11 1 34 56插入nums[11]=22到nums[10]: 1 2 3 3 5 6 7 8 11 22 22 33 11 1 34 56插入nums[12]=11到nums[9]: 1 2 3 3 5 6 7 8 11 11 22 22 33 1 34 56插入nums[13]=1到nums[1]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56插入nums[14]=34到nums[14]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56插入nums[15]=56到nums[15]: 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然我们还可以简化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 定义一个数组</span><span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">33</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">1</span> <span class="token number">34</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment">#先找一个下标指向第一个元素,因为默认第0个元素是排好的,所以从第1个下标的元素开始往前面插,i代表要取出的数</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment">#先记录下当前位置的元素,从他前面一个元素开始比较,直到找到自己合适位置就直接插入</span>  <span class="token builtin class-name">local</span> j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums[j<span class="token operator">-</span><span class="token number">1</span>]<span class="token operator">&gt;</span>tmp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token comment"># 这里不用if判断，直接在for里面进行判断，不满足条件的直接跳出</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>j-1<span class="token punctuation">]</span>}</span>  <span class="token keyword">done</span>  nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp}</span>  <span class="token builtin class-name">echo</span> <span class="token string">"插入nums[<span class="token variable">${i}</span>]=<span class="token variable">${tmp}</span>到nums[<span class="token variable">${j}</span>]: <span class="token variable">${nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果和上面一样一样的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种排序算法-冒泡排序</title>
      <link href="/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-mou-pao-pai-xu/"/>
      <url>/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>最近在研究数据结构和算法,突然想用shell来实现一把,今天先来写一个冒泡排序。<br>要想记住各种排序算法，只要知道其原理，用什么语言实现都易如反掌</p><h1 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h1><ol><li>核心操作 交换相邻两个元素的值</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 定义一个数组</span><span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">33</span> <span class="token number">22</span> <span class="token number">11</span> <span class="token number">1</span> <span class="token number">34</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token comment"># 核心操作</span><span class="token keyword">function</span> <span class="token function-name function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment"># i 和 j 分别代表要交换的两个元素的在数组中的下标</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token variable">$2</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment"># 注意这里用 ${nums[x]} 的形式才能取出数组对应下标的元素的值</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span> <span class="token comment"># 注意这里 ${nums[x]} 中的x 支持数学表达式，没必要 使用 $(()) 来计算</span>  nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp}</span>     <span class="token comment"># 注意这里 ${  } 包裹 tmp,因为shell中没有显示的指针，也没有引用类型，取值一定要用 ${} 包裹</span><span class="token punctuation">}</span><span class="token comment"># 数组的元素个数</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${<span class="token operator">#</span>nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token comment"># 注意这里使用${@xxx[@]}的形式取出shell中数组元素的个数</span><span class="token comment"># 用一个下标标识数组最右侧一个元素,相当于一个指针指向了最右侧一个元素,每执行完一轮后指针左移一位</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">))</span></span><span class="token punctuation">{</span> <span class="token comment"># 注意这个地方是size-1因为有size个元素,那最有一个元素的下标一定是size-1因为数组的下标是从零开始的</span>  <span class="token comment"># 用一个下标标识数组最左侧一个元素, 每次与相邻的下一个元素进行比较,如果当前元素比下一个元素大,则交换两个位置的元素,比较完成后下标右移一位,直到遇到下标i,因为经过几轮排序后i后面的元素都是排好序的</span>  <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token comment"># 这个地方是&lt;i</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span> <span class="token parameter variable">-gt</span> <span class="token variable">${nums<span class="token punctuation">[</span>j+1<span class="token punctuation">]</span>}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token comment"># 注意这个地方的比较[1]</span>      swap <span class="token string">"<span class="token variable">${j}</span>"</span> <span class="token string">"<span class="token variable"><span class="token variable">$((</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>"</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第<span class="token variable"><span class="token variable">$((</span>size<span class="token operator">-</span>i<span class="token variable">))</span></span>轮冒泡后:<span class="token variable">${nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行一把</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">第1轮冒泡后:1 3 5 2 3 6 7 8 11 22 22 11 1 33 34 a b c 56第2轮冒泡后:1 3 2 3 5 6 7 8 11 22 11 1 22 33 a b c 34 56第3轮冒泡后:1 2 3 3 5 6 7 8 11 11 1 22 22 a b c 33 34 56第4轮冒泡后:1 2 3 3 5 6 7 8 11 1 11 22 a b c 22 33 34 56第5轮冒泡后:1 2 3 3 5 6 7 8 1 11 11 a b c 22 22 33 34 56第6轮冒泡后:1 2 3 3 5 6 7 1 8 11 a b c 11 22 22 33 34 56第7轮冒泡后:1 2 3 3 5 6 1 7 8 a b c 11 11 22 22 33 34 56第8轮冒泡后:1 2 3 3 5 1 6 7 a b c 8 11 11 22 22 33 34 56第9轮冒泡后:1 2 3 3 1 5 6 a b c 7 8 11 11 22 22 33 34 56第10轮冒泡后:1 2 3 1 3 5 a b c 6 7 8 11 11 22 22 33 34 56第11轮冒泡后:1 2 1 3 3 a b c 5 6 7 8 11 11 22 22 33 34 56第12轮冒泡后:1 1 2 3 a b c 3 5 6 7 8 11 11 22 22 33 34 56第13轮冒泡后:1 1 2 a b c 3 3 5 6 7 8 11 11 22 22 33 34 56第14轮冒泡后:1 1 a b c 2 3 3 5 6 7 8 11 11 22 22 33 34 56第15轮冒泡后:1 a b c 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56第16轮冒泡后:a b c 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56第17轮冒泡后:a b c 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56第18轮冒泡后:a b c 1 1 2 3 3 5 6 7 8 11 11 22 22 33 34 56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面的[1],因为这里我们只能比较数字,也就是只能比较整型数组,小数和字符串的冒泡排序我们的代码是不支持的。搞鬼的地方就在 我代码注释里面标[1]的地方.</p><p>我们用的判断相邻两个元素大小的表达是 <code>if [[ a -gt b ]]</code> 这种形式，这种用 [[]] 包裹的if判定表达式只能针对 整数。这个是shell语法决定的</p><p>如果nums数组中出现小数，运行程序立马报错，因为shell中没有浮点类型，带点号的shell默认为字符串<br>line 34: [[: 3.3: syntax error: invalid arithmetic operator (error token is “.3”)</p><p>如果要按照字符串比较，应该吧if表达式换成这样 <code>if [ ${nums[j]} \&gt; ${nums[j+1]} ]</code> 但同样，这种形式的比较会使数字的比较出现紊乱，例如<br>21 和 12 用上面这种比较，shell会认为 12 &gt; 21 因为12的第一个字符1出现在21的第一个字符2之前。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell教你搞定各种排序算法-快速排序</title>
      <link href="/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-kuai-su-pai-xu/"/>
      <url>/2020/04/15/linux/shell/shu-ju-jie-gou-suan-fa/shell-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>排序算法中,没有一种算法在任意一种情况下都是最好的。我们总是能构造出一种最坏的情况。快速排序并不总是最快的。</p><p>快速排序是由东尼·霍尔提出的一种高效的排序算法，简称快排。它的算法思想并不复杂，可以用3个步骤6个字来概括：选基、分割、递归。</p><p>扩充成一句话就是：首先挑选基准值；然后分割数组，把小于基准值的元素放到基准值前面，大于基准值的元素放到基准值后面；最后递归地对小于基准值的子序列和大于基准值的子序列进行排序。主要使用了所谓的分治的思想</p><p>快速排序的写法有很多中,可以优化的点也有很多。但终归逃过不过一个分一个治，也就是递归。</p><p>光第一步选基就有很多方法和优化的空间<br>第一种方式,我们每次选待排数组的最左边一个元素为主<br>第二种方式,我们随机选待排数组的一个元素为主<br>第三种方式,我们组左,中,右三个数的中位数为主。或者5个数中的中位数<br>如果我们每次选的元素总是能将数组刚好左右分割，使得所选元素左边都比该元素小，右边的元素都比该元素大，那么我们的算法就是最优的。</p><p>下面我没来挑战一下这个看似简单实则超级难理解的算法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                   <span class="token comment">#我们还是先来定义一个main方法</span>  <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">10</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token comment">#我们再来定义一个待排数组,注意这里是个全局的变量</span>  quick_sort                              <span class="token comment">#我们调用我们即将书写的快速排序</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span>                      <span class="token comment">#打印数组,看看是不是按照从小到的的顺序排序了呢</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">quick_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">#注意array是全局变量,我们可以在这里访问到它</span>  <span class="token comment">#快排一定有一个递归调用,这个递归调用一般需要左右两个数组下标</span>  <span class="token keyword">function</span> <span class="token function-name function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">left</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">right</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable">${left}</span><span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token variable">${right}</span> <span class="token comment">#这里为什么要重新让j=right,i=left呢,我们直接用 left,right不行么?答案是不行,因为要记住数组进来的时候,处理的左右边界是什么。</span>    <span class="token comment">#1. 首先这个方法是一个递归，递归三要素之一就是要有退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${left}</span> <span class="token parameter variable">-ge</span> <span class="token variable">${right}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>    <span class="token comment">#2. 选主元</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">base</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>}</span> <span class="token comment">#每次都已最左边的为基</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${i}</span> <span class="token parameter variable">-ne</span> <span class="token variable">${j}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>      <span class="token comment">#3. 分隔</span>      <span class="token comment">#3.1 从右边j想左找第一个比base小的元素的数组的下标,如果右边的元素一直比base大，就一直找，直到 j=i 了未知</span>      <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span> <span class="token parameter variable">-ge</span> <span class="token variable">${base}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${j}</span> <span class="token parameter variable">-gt</span> <span class="token variable">${i}</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token comment">#注意等号</span>        <span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span>      <span class="token keyword">done</span>      <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token parameter variable">-le</span> <span class="token variable">${base}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${j}</span> <span class="token parameter variable">-gt</span> <span class="token variable">${i}</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>      <span class="token keyword">done</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${i}</span> <span class="token parameter variable">-lt</span> <span class="token variable">${j}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>         <span class="token builtin class-name">local</span> <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>}</span>         array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span>         array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${tmp}</span>      <span class="token keyword">fi</span>    <span class="token keyword">done</span>    array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">${base}</span>    <span class="token function">sort</span> <span class="token string">"<span class="token variable">${left}</span>"</span> <span class="token string">"<span class="token variable"><span class="token variable">$((</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token variable">))</span></span>"</span>    <span class="token function">sort</span> <span class="token string">"<span class="token variable"><span class="token variable">$((</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>"</span> <span class="token string">"<span class="token variable">${right}</span>"</span>  <span class="token punctuation">}</span>  <span class="token function">sort</span><span class="token punctuation">}</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
          <category> 数据结构算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么尾递归能优化</title>
      <link href="/2020/04/13/java/wei-shi-me-wei-di-gui-neng-you-hua/"/>
      <url>/2020/04/13/java/wei-shi-me-wei-di-gui-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<p>要知道一个道理，计算机特别讨厌递归程序，特别讨厌。因为处理不好，内存就被吃光了。</p><h1 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h1><p>百度百科</p><blockquote><p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</p></blockquote><p>构成递归需具备的条件：</p><ol><li>子问题须与原始问题为同样的事，且更为简单；</li><li>不能无限制地调用本身，须有个出口，化简为非递归状况处理。</li></ol><p>所以综上所述,函数自己调用自己就是递归了么?不是,函数自己调用自己只是递归的一个先决条件,还有一个条件是,需要有函数的终止条件。否则递归就是一个死循环。</p><h1 id="尾递归"><a class="markdownIt-Anchor" href="#尾递归"></a> 尾递归</h1><p>百度百科</p><blockquote><p>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。</p></blockquote><p>我们可以这样理解尾递归</p><ol><li>所有递归形式的调用都出现在函数的末尾</li><li>递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分</li></ol><h1 id="递归是咋调用的呢"><a class="markdownIt-Anchor" href="#递归是咋调用的呢"></a> 递归是咋调用的呢</h1><p>递归就是自身调用自身，而自身是一个函数，一个函数在执行的时候一定要吧这个函数压入栈中，执行的时候在出栈。所以一个函数在执行的时候先把遇到的函数压入栈中，那入栈的时候就要申请空间嘛，这个空间可以裂解为就是存放函数的一个空间，如果递归的层次特别多，那么就要申请特别多的占空间来存放一个函数的各种参数，久而久之就OOM了</p><h1 id="为什么尾递归能优化"><a class="markdownIt-Anchor" href="#为什么尾递归能优化"></a> 为什么尾递归能优化</h1><blockquote><p>当编译器检测到一个函数调用是尾递归的时候，它就覆盖当前的活动记录而不是在栈中去创建一个新的。编译器可以做到这点，因为递归调用是当前活跃期内最后一条待执行的语句，于是当这个调用返回时栈帧中并没有其他事情可做，因此也就没有保存栈帧的必要了。通过覆盖当前的栈帧而不是在其之上重新添加一个，这样所使用的栈空间就大大缩减了，这使得实际的运行效率会变得更高。</p></blockquote><h1 id="尾递归优化了什么"><a class="markdownIt-Anchor" href="#尾递归优化了什么"></a> 尾递归优化了什么</h1><p>通过上面的描述，我们知道，尾递归和普通递归的区别就在一，<code>它就覆盖当前的活动记录而不是在栈中去创建一个新的</code> 这句话怎么理解呢。就是尾递归只是复用了当前的函数栈而不是重新压入一个栈。所以尾递归的优化点就在这儿。</p><h1 id="为什么普通递归就不能优化"><a class="markdownIt-Anchor" href="#为什么普通递归就不能优化"></a> 为什么普通递归就不能优化</h1><p>为什么普通递归函数无法像尾递归函数一样优化呢?明明都是递归函数,怎们普通递归就不能再编译阶段优化成循环的形式呢?</p><p>就想上面说的当编译器检测到一个函数调用是尾递归的时候，它就覆盖当前的活动记录而不是在栈中去创建一个新的。普通递归调用则实现不了,因为普通递归调用必须等待上一个函数的完整执行和返回,因此上一个函数必须入栈才行。</p><h1 id="java-vs-scala-尾递归优化"><a class="markdownIt-Anchor" href="#java-vs-scala-尾递归优化"></a> Java Vs Scala 尾递归优化</h1><p>Java 没有实现尾递归优化，Scala有实现</p><ul><li>未完待续</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/2020/04/09/java/java-nei-bu-lei/"/>
      <url>/2020/04/09/java/java-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<p>内部类就是类里面的类，形式上大概是这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以把内部类和这个外部类的某一个成员变量和成员方法看成同一个级别。例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 这个 Inner 就和成员变量和成员函数也叫成员方法一样，都属于这个类的一个属性而已。<br>另外既然和外部类的属性和方法属于同一级别，那也就可以被 访问限制修饰符来修饰，访问限制修饰符指的就是 private 、public 啊还有一个就是static .<br>private 和 public 就限制了一个内部类是不是能被外部访问，就像private修饰的变量 age 一样，只能被类内部使用，除非你在暴露接口扩大其访问权限。例如你写pubulic 的get set 方法。那内部类也一样，如果你用private修饰，那你在这个外部类的其他类你就不能创建一个Inner类了，因为他是private的嘛，要求只能在内部类里面使用。而这个使用指的就是创建实例，因为类的作用就是new一个个的对象出来嘛。private了就是不允许外部new对象了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Mian</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//想要创建内部类必须先有外部类</span>     <span class="token class-name">Outer</span> outer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//因为这里是public的内部类，所以可以直接这样写</span>     <span class="token comment">//但要单独引用包 import xxxx.xx.Outer.Inner;</span>     <span class="token class-name">Inner</span> inner<span class="token operator">=</span>outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//也可以这样写，表明这个内部类的外部类是Outer 下的Inner ,这样写更明确</span>     <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner2<span class="token operator">=</span>outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//但如果这里是private的内部类，上面两行代码立马报错</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个内部类被static修饰了，就成了类级别的了，和外部类的实例对象就无关了，成了所有实例对象共享的一部分代码，这部分代码全局都只此一份。被static修饰的内部类有一个专门的名称叫，静态内部类。静态内部类和静态类一样，我们不用创建实例对象就可以访问里面的静态方法，注意是静态方法，对于费静态方法，我们还是得老老实实创建对象的。内部类都静态了，那她就和静态类一样，在用到他的时候他才会初始化，这就给我们安全的创造单例模式提供了方便,static的作用就是变成类相关的，而类的加载机制有保证了累得加载是惰性加载，也就是用到这个类的时候才会初始化类相关的变量，如果用不到那它就是一坨文本文件，静静的躺在磁盘上而已。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//要想创建内部类的实例，我们不需要外部类的实例，所以可以直接通过下面的方式new</span>    <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Inner</span> inner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当然如果 内部类被private 修饰，那么上面两行代码立马报错</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为啥要有内部类"><a class="markdownIt-Anchor" href="#为啥要有内部类"></a> 为啥要有内部类</h1><p>把一个类写成一个单独的类怎么了，怎么了呢，非要搞这么复杂干啥呢?其实还是因为Java当前吹过的牛逼，那就是Java觉得只要单根继承就好，它根本不想去解决菱形问题或者叫钻石问题，为此他就丧失的多继承的优越性，为了弥补单根继承的缺陷，它发明了内部类。</p><p>那单根继承有什么缺点呢？单根继承的确定就单根继承，这不废话么，说白了就是扩展不方便，我想把两个类的方法集于一身，你说怎么办吧？你会发现你在java里面怎么写都别扭，我implements吧，我还得写一遍实现，我用abstract 吧，我只能继承一次，那我就级联继承吧 A extents B ,B extents C ,那A不就有了B和C的功能了么，但你会发现 B继承C 更别扭，因为没有儿子继承妈妈，妈妈在继承爸爸一说，因为B和C 在语意上就应该是并列的。</p><p>那内部类为什么就能弥补呢?因为Java规定了内部类可以访问外部的成员变量，甚至包括 private的，其实这个甚至不应该强调，因为一强调，我们就会重点去关注了，其实你想想内部类和内部的成员变量和成员方法一个级别，我在里面能访问和我同一个别的属性有什么问题么？没有问题！！！我就应该有权限。</p><p>那能访问有怎么了呢，这样我们就可以引入不用的内部类分别继承我们想要多继承的类，然后我们就可以控制我们自己列的行为啦！类似这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"你好"</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> name    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mom</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> name    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那怎么实现的呢，我也不用反编译什么的，直接告诉你，因为内部类在实例化的时候，编译器通过构造函数偷偷的吧外部类实例的引用注入到了内部类中。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile 探秘</title>
      <link href="/2020/04/09/java/java-bing-fa-bian-cheng/volatile-tan-mi/"/>
      <url>/2020/04/09/java/java-bing-fa-bian-cheng/volatile-tan-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>volatile 这个单词一定要能够拼写正确 v-o-l-a-t-i-l-e ，因为我相信你在写代码的时候肯定没有经常用到它。还有一个最长的关键字叫 synchronized 。</p><p>volatile 的中文翻译</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"translation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"挥发性"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"basic"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"us-phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɑːlətl"</span><span class="token punctuation">,</span>    <span class="token property">"phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɒlətaɪl"</span><span class="token punctuation">,</span>    <span class="token property">"uk-phonetic"</span><span class="token operator">:</span> <span class="token string">"ˈvɒlətaɪl"</span><span class="token punctuation">,</span>    <span class="token property">"explains"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"n. 挥发物；有翅的动物"</span><span class="token punctuation">,</span>      <span class="token string">"adj. [化学] 挥发性的；不稳定的；爆炸性的；反复无常的"</span><span class="token punctuation">,</span>      <span class="token string">"n. (Volatile)人名；(意)沃拉蒂莱"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到是挥发性，也可以理解为易失性。容易失去它，为什么这么说呢?因为被volatile修饰的变量在多线程或者多核cpu中，只要一个线程或cpu修改了它的值，那在其他线程或cpu里面就失去了它，如果还想获取到它，就不得不去指定的内存地址里面在去找它。<br>所以这个字段修饰的变量一定要被多线程访问才行，否则修饰它就没有意义了。编译器在编译的时候就有可能帮你吧这个修饰符自动给去掉。所以单线程里面我们一般不用volatile关键字修饰变量，因为你修饰了也没用。由此建议写代码的时候审视一下是不是该用volatile关键字修饰，关键在于这个变量是不是多线程共享的，另外就算是多线程共享的也不一定要被volatile修饰，例如引用变量，只要引用变量的初始化不是在多个线程里面都写一份就不需要修饰了。</p><h1 id="怎么实现"><a class="markdownIt-Anchor" href="#怎么实现"></a> 怎么实现</h1><p>不整那些虚头巴脑的名词，什么 内存可见性啊、缓存行啊、嗅探啊、读屏障、写屏障啊、lock指令啊。我直接说过程。<br>首先被 volatile 修饰的关键字在cpu里面或者某个线程里面被修改之前，先发送一个命令给其他cpu，大喊一声我要修改xxx内存地址的值了，你们谁有不要在动这个地址了，这一声大喊，其实就是在一个电子电路上加了一个高电平，这个电平加的及其快，快到几乎是所有cpu同时收到，然后其他cpu就会把这个内存对应的cpu里面的缓存设置为失效状态，当然如果在设置失效之前，你读取了这个缓存值去处理我们就没有办法了，因为我们没有办法让时光倒流嘛。但是只要刚刚那个cpu说了我要修改，其他cpu再想读写这个内存里面的值就读不出来了，就会阻塞，但是阻塞的机器很短，因此cpu会选用自旋的方式，哎呀所谓自旋就是不停的看我能不能不了，我能不能读了，如果不能就继续疯狂的询问，为的是减少上下文的切换的开销。<br>然后大吼一声的cpu开始计算修改缓存里面的值，完事之后有一个最重要的一步那就是把这个内存里面的值，立马写回到共享内存中。这之后，在大吼一声，你们可以操作该内存地址啦。</p><p>这个开始大吼一声的操作总要有一个指令来处理吗，对应的就是lock指令。lock指令就是加了读写屏障嘛，就是让你不能读也不能写码<br>这个让其他cpu缓存失效的其实就是设置的缓存行的状态嘛<br>这个设置缓存行失效的方式我么就叫做嗅探技术嘛。</p><p>这里唠叨一下嗅探技术，网上没有搜到任何关于嗅探技术的文章，都是一笔带过，这里我谈谈我的理解，但不保证是对的啊。<br>这个理cpu的嗅探并不是，其中一个cpu大喊我要修改xx内存的东西了，之后 ，所有的cpu就设置自己对应的缓存失效的。而是真真正正cpu修改了内存的值之后才生效的，怎么做的呢，你可以理解为cpu 在 内存和缓存之间画了一条连接线，这个连接线要么都是高电平，要么都是低电平，我们知道一条电线只要中间没有电阻，两端电压其实是一样的，只要修改了内存的值，那么就加高电平，cpu先检测这个连线是不是高电平。如果是就重新读内存值。由此可见，嗅探一定是自己去嗅探，主动发现。这就是我的理解，不服来战。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Java并发编程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置ssh允许root登陆</title>
      <link href="/2020/04/07/linux/she-zhi-ssh-yun-xu-root-deng-lu/"/>
      <url>/2020/04/07/linux/she-zhi-ssh-yun-xu-root-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>有时候我们登陆linux服务器发现只能以普通用户登陆，而不能以root账户登陆。 如果想用root权限，往往需要使用sudo ，然后在输入root密码才行，这也是linux建议的做法。这样可以做到权限的控制，防止一些灾难性的操作。</p><p>但是有时候我们确实需要使用root权限登陆的。</p><ol><li>先使用你的账号登陆</li><li>sudo -iu root 切换到root账号，这里需要你知道root账号的密码</li><li>如果需要修改密码 使用 passwd 命令</li><li>修改 /etc/ssh/sshd_config 大概在 32行 修改</li></ol><p><code>#PermitRootLogin prohibit-password</code>  为 <code>PermitRootLogin yes 即可</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长短句</title>
      <link href="/2020/04/03/mo-xiang-zhi-jian/wo-de-shi-ci/chang-duan-ju/"/>
      <url>/2020/04/03/mo-xiang-zhi-jian/wo-de-shi-ci/chang-duan-ju/</url>
      
        <content type="html"><![CDATA[<p>水调歌头轻唱遍<br>千里婵娟忆江南<br>江南风景旧曾谙<br>一纸相见欢，奈何朱颜换<br>焚诗寄香丘，欲语泪先流<br>牡丹亭，浣沙溪，侍香金童解连环<br>此去已经年<br>犹记弄冰弦</p><p>凤凰台上忆少年<br>十里相思望北川<br>塞北柳絮正堪堪<br>一曲声声慢，素手卷珠帘<br>借酒浇新愁，把酒黄昏后<br>西江月，鹧鸪天，传言玉女弄玉簪<br>此去已经年<br>还盼解鞍鞯</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本JDK的坑-ClassNotFound</title>
      <link href="/2020/03/18/java/java-tian-keng/gao-ban-ben-jdk-de-keng-classnotfound/"/>
      <url>/2020/03/18/java/java-tian-keng/gao-ban-ben-jdk-de-keng-classnotfound/</url>
      
        <content type="html"><![CDATA[<p>如果使用高版本的JDK启动jar包的时候,可能会遇到一些莫名其妙的问题,所以Java当前吹的永远向前兼容的牛逼算是吹破了。今天我就遇到了.<br>一开我使用java -jar xxxxx.jar 启动的时候会报出一些JVM启动参数问题，觉得莫名其妙，命名本地可以启动，为什么到了服务器上就启动不了呢？<br>于是第一时间想到了查看一下java的版本</p><pre class="line-numbers language-none"><code class="language-none">root@xr-travelse-arm-vm01:~# java -versionopenjdk version "11.0.4" 2019-07-16OpenJDK Runtime Environment (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3)OpenJDK 64-Bit Server VM (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果发现居然装的是java 11. 这个版本我们生产环境从未用过，本想正重装Java8来解决，但是难道以后都不升级了么，所以这个问题一定要弄明白，于是乎goole了一下发现java8 以后的jvm虚拟机去掉了好几个jvm配置参数，那是因为jdk8以后版本的jvm开始做减法了，去掉了一些功能.例如 配置</p><pre class="line-numbers language-none"><code class="language-none">#local JVM_HEAP="-XX:NewRatio=1 -XX:SurvivorRatio=8 -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=64m -XX:+HeapDumpOnOutOfMemoryError -XX:ReservedCodeCacheSize=64m -XX:InitialCodeCacheSize=64m"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置这些在java8中是没问题的，但是配置在java11中会导致服务启动不了。因为有些参数已经废弃掉了，或者改用了其他的方式来配置。</p><p>另外，还会出现一个现象，就是引用启动没有问题，但是程序就是运行不了，而且不打印异常堆栈信息，这你怎么排查！！！我没办法只要远程调试，断点执行，才发现一个异常。<br>最后还是使用java8吧先，有时间在研究java11.</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒懂 QPS、TPS、PV、UV、GMV、IP、RPS！</title>
      <link href="/2020/03/18/ji-suan-ji/ji-suan-ji-ji-chu/qps-tps-pv-uv-gmv-ip-rps/"/>
      <url>/2020/03/18/ji-suan-ji/ji-suan-ji-ji-chu/qps-tps-pv-uv-gmv-ip-rps/</url>
      
        <content type="html"><![CDATA[<p>QPS、TPS、PV、UV、GMV、IP、RPS等各种名词，外行看起来很牛X，实际上对程序员来说都是必懂知识点。下面我来一一解释一下。</p><p>QPS</p><blockquote><p>Queries Per Second，每秒查询数。每秒能够响应的查询次数。QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。每秒的响应请求数，也即是最大吞吐能力。</p></blockquote><p>TPS</p><blockquote><p>Transactions Per Second 的缩写，每秒处理的事务数目。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息作出的评估分。<br>TPS 的过程包括：客户端请求服务端、服务端内部处理、服务端返回客户端。例如，访问一个 Index 页面会请求服务器 3 次，包括一次 html，一次 css，一次 js，那么访问这一个页面就会产生一个“T”，产生三个“Q”。</p></blockquote><p>PV（page view）</p><blockquote><p>即页面浏览量，通常是衡量一个网络新闻频道或网站甚至一条网络新闻的主要指标。PV 即 page view，页面浏览量。用户每一次对网站中的每个页面访问均被记录 1 次。用户对同一页面的多次刷新，访问量累计。<br>根据这个特性，刷网站的 PV 就很好刷了。</p></blockquote><p>与 PV 相关的还有 RV，即重复访问者数量（repeat visitors）。</p><blockquote><p>UV 访问数（Unique Visitor）<br>指独立访客访问数，统计1天内访问某站点的用户数(以 cookie 为依据)，一台电脑终端为一个访客。</p></blockquote><p>IP（Internet Protocol）</p><blockquote><p>独立 IP 数，是指 1 天内多少个独立的 IP 浏览了页面，即统计不同的 IP 浏览用户数量。同一 IP 不管访问了几个页面，独立 IP 数均为 1；不同的 IP 浏览页面，计数会加 1。IP 是基于用户广域网 IP 地址来区分不同的访问者的，所以，多个用户（多个局域网 IP）在同一个路由器（同一个广域网 IP）内上网，可能被记录为一个独立 IP 访问者。如果用户不断更换 IP，则有可能被多次统计。</p></blockquote><p>GMV，是 Gross Merchandise Volume 的简称。</p><blockquote><p>只要是订单，不管消费者是否付款、卖家是否发货、是否退货，都可放进 GMV 。</p></blockquote><p>RPS 代表吞吐率，即 Requests Per Second 的缩写。</p><blockquote><p>吞吐率是服务器并发处理能力的量化描述，单位是 reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大的请求数，称之为最大吞吐率。<br>有人把 RPS 说等效于 QPS。其实可以看作同一个统计方式，只是叫法不同而已。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专有名词缩写</title>
      <link href="/2020/03/18/ji-suan-ji/ji-suan-ji-ji-chu/zhuan-you-ming-ci-suo-xie/"/>
      <url>/2020/03/18/ji-suan-ji/ji-suan-ji-ji-chu/zhuan-you-ming-ci-suo-xie/</url>
      
        <content type="html"><![CDATA[<p>说一个名词一定要说全称,最好还用英文说出来,让人觉得你很专业,嗯,很专业(哈哈)。其实这里就是简单记录一下啦。</p><table><thead><tr><th>缩写</th><th>全称</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>UTF</td><td>UnicodeTransformationFormat</td><td></td><td></td></tr><tr><td>ANSI</td><td>American National Standards Institute</td><td>美国国家标准协会</td><td></td></tr><tr><td>E-R图</td><td>Entity Relationship Diagram</td><td>E-R图也称实体-联系图</td><td></td></tr><tr><td>Java RMI</td><td>Java Remote Method Invocation</td><td>Java远程方法调用</td><td></td></tr><tr><td>RPC</td><td>Remote Procedure Call</td><td>远程过程调用</td><td></td></tr><tr><td>IPC</td><td></td><td>进程间通</td><td></td></tr><tr><td>QPS</td><td></td><td>每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</td><td></td></tr><tr><td>RDP</td><td>Remote Desktop Protocol</td><td>远程桌面协议</td><td></td></tr><tr><td>JDK</td><td>Javd Develope Kit</td><td>Java 开发工具,是所有工具的集合,包括JRE+一些工具(jstack…）</td><td></td></tr><tr><td>JRE</td><td>Java Runtime Enviroment</td><td>Java 运行时环境,要让java运行起来只需要Jvm和Java的核心jar包即可</td><td></td></tr><tr><td>UML</td><td>Unified Modeling Language</td><td>统一建模语言</td><td></td></tr><tr><td>VPS</td><td>Virtual Private Server</td><td>虚拟专用服务器</td><td></td></tr><tr><td>PPPOE</td><td>Point To Point Protocol Over Ethernet</td><td>点对点协定在以太网</td><td></td></tr><tr><td>IDC</td><td>Internet Data Center</td><td>互联网数据中心</td><td>就是电信部门利用已有的互联网通信线路、带宽资源，建立标准化的电信专业级机房环境，为企业、政府提供服务器托管、租用以及相关增值等方面的全方位服务。</td></tr><tr><td>SOP</td><td>Standard Operating Procedure</td><td>标准作业程序</td><td></td></tr><tr><td>RTO</td><td></td><td>恢复时间目标</td><td>RTO是指灾难发生后，从IT系统宕机导致业务停顿之刻开始，到IT系统恢复至可以支持各部门运作，业务恢复运营之时，此两点之间的时间段。</td></tr><tr><td>ARPAnet</td><td>Advanced Research Projects Agency Network</td><td>高等研究计划署网络</td><td></td></tr><tr><td>DRAM</td><td>Dynamic Random Access Memory</td><td>动态随机存取存储器</td><td></td></tr><tr><td>主R</td><td>Responsible</td><td>责任人</td><td></td></tr><tr><td>QPS</td><td>Queries Per Second</td><td>每秒查询数。每秒能够响应的查询次数</td><td></td></tr><tr><td>TPS</td><td>Transactions Per Second</td><td>每秒处理的事务数目</td><td></td></tr><tr><td>PV</td><td>page view</td><td>页面浏览量</td><td></td></tr><tr><td>UV</td><td>Unique Visitor</td><td>独立访客访问数</td><td></td></tr><tr><td>IP</td><td>Internet Protocol</td><td>独立 IP 数，是指 1 天内多少个独立的 IP 浏览了页面，即统计不同的 IP 浏览用户数量</td><td></td></tr><tr><td>GMV</td><td>Gross Merchandise Volume</td><td>只要是订单，不管消费者是否付款、卖家是否发货、是否退货，都可放进 GMV 。</td><td></td></tr><tr><td>RPS</td><td>Requests Per Second</td><td>代表吞吐率</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mavne不继承父pom插件</title>
      <link href="/2020/02/12/java/java-tian-keng/mavne-bu-ji-cheng-fu-pom-cha-jian/"/>
      <url>/2020/02/12/java/java-tian-keng/mavne-bu-ji-cheng-fu-pom-cha-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">&lt;configuration&gt;    &lt;skip&gt;true&lt;/skip&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java配置文件变量替换</title>
      <link href="/2020/02/11/java/java-pei-zhi-wen-jian-bian-liang-ti-huan/"/>
      <url>/2020/02/11/java/java-pei-zhi-wen-jian-bian-liang-ti-huan/</url>
      
        <content type="html"><![CDATA[<p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow></mrow><mtext>方式会被</mtext><mi>m</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>n</mi><mtext>处理。如果你</mtext><mi>p</mi><mi>o</mi><mi>m</mi><mtext>继承了</mtext><mi>s</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>−</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>−</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>−</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext>，</mtext><mi>S</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>B</mi><mi>o</mi><mi>o</mi><mi>t</mi><mtext>已经将</mtext><mi>m</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>n</mi><mo>−</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo>−</mo><mi>p</mi><mi>l</mi><mi>u</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>s</mi><mtext>默认的</mtext></mrow><annotation encoding="application/x-tex">{}方式会被maven处理。如果你pom继承了spring-boot-starter-parent，Spring Boot已经将maven-resources-plugins默认的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"></span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">被</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">你</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">继</span><span class="mord cjk_fallback">承</span><span class="mord cjk_fallback">了</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">经</span><span class="mord cjk_fallback">将</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord cjk_fallback">默</span><span class="mord cjk_fallback">认</span><span class="mord cjk_fallback">的</span></span></span></span>{}方式改为了@@方式，如@version@</p><center>  <img src="/2020/02/11/java/java-pei-zhi-wen-jian-bian-liang-ti-huan/show.jpg"></center>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/02/11/java/java-suo/"/>
      <url>/2020/02/11/java/java-suo/</url>
      
        <content type="html"><![CDATA[<p>为什么需要锁？<br>我们把多个线程竞争处理的资源称为临界资源（代码块、方法体等），当一个线程获得了临界资源的使用权以后，为了保证临界资源在同一时间只能由一个线程获得，其它线程必须等这个线程处理完以后才能通过竞争再次尝试获得临界资源的使用权。</p><p>追问：为什么要保证临界资源在同一时间只能由一个线程使用?<br>首先肯定是有这样的场景存在，多个线程同时操作临界资源会导致数据的不一致。</p><p>追问：什么叫数据的不一致?<br>就是你本来期望是一个结果，但是偏偏变成了另一个结果，本来不应该出现的情况，但是偏偏出现了，就叫数据不一致了。</p><p>追问：所以归根结底是为了解决临界资源在并发使用过程中可能出现的数据不一致性问题才必须保证临界资源在同一时间只能由一个线程获得?<br>是的。因为并发会导致数据不一致，那干脆在使用临界资源的时候不要并发了，多么简单暴力啊。</p><p>追问：说了半天还是没有说到锁啊?<br>那我们如何实现上面说的 必须保证临界资源在同一时间只能由一个线程获得呢？答案就是大家对向某个人提出申请，这个人必须足够公正，能保证在同一时间只能有一个人获得申请，而且要保证获得申请的人不撤销申请其他人即使再申请也不会获得申请，这个人就是锁，要知道这个人一旦被看作锁，那么他也将变成临界资源，申请锁的这个动作在多线程里必须也得能保证数据一致，也就是线程安全，貌似陷入死循环了。但这个保证是操作系统保证的，更确切的说是操作系统的内核保证的，操作系统毕竟还是一个软件，内核要保证线程安全本质上是通过硬件完成的，其实就是锁总线。</p><p>锁的分类<br>锁并不是某个语言特有的，c语言也有锁，c++也是，包括一些后现代的编程语言例如scala、groovy等都有锁，操作系统更需要锁，redis有锁，数据库有锁，分布式系统有分布式锁。锁你可以理解为一个工具类，使用这个工具类可以保证临界资源在同一时间只能由一个线程获得。锁的种类有很多，真的很多，有悲观锁、乐观锁，有互斥锁、共享锁，有可重入锁、不可重入锁，数据库有行锁、表锁、页锁，分布式有分布式锁，可以用redis实现可以用zookeeper实现。按照我的理解和记忆方案，不见得是对的，但在这里提出来，大家一起讨论一下。</p><p>我认为只要是锁一定都是悲观锁，因为乐观锁虽然叫锁，但是其实并不是锁，只是后人为了区分而强加的概念。乐观锁的实现原理逃不出CAS，悲观锁的原理逃不出互斥量。所以Java中所有叫锁的都是悲观锁包括 synchornized。</p><p>然后就是锁的几个特性，比如 公平不公平啊、可重入不可重入啊、独享啊还是共享啊。每个锁必然有这三个特性。</p><p>锁分类<br>悲观锁/乐观锁<br>重点讲两类锁的思想区别 和 cas</p><p>锁特性<br>公平性/非公平性、公平锁/非公平锁<br>公平锁是指多个线程按照申请锁的顺序来获取锁。</p><p>非公平锁不按照申请顺序，后申请的可能会先获得锁。</p><p>对于Java的ReentranLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。</p><p>ReentranLock中有一个内部类：Sync。FairSync、NonFairSync继承了Sync，公平与不公平在源码体现在【!hasQueuedPredecessors()】这句代码，公平的话：如果前面有等待节点，那就不去获得锁；不公平就是抢占；具体看：<a href="https://blog.csdn.net/lsgqjh/article/details/63685058">https://blog.csdn.net/lsgqjh/article/details/63685058</a></p><p>对于 Synchonized而言，也是一种非公平锁，由于其不像 ReentrantLock是通过AQS实现的，所以没办法变成公平锁。</p><p>可重入性/不可重入性、可重入锁/不可重入锁<br>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁，不会因为之前已经获取过还没释放而阻塞。</p><p>Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><p>到目前为止我还没有遇到过不可重入的锁，也想象不到不可重入锁的使用场景，因为不可重入锁大概率会出现死锁情况，所以貌似没有人会去实现不可重入锁。</p><p>独占性/共享性、互斥锁/读写锁<br>独享锁是指该锁一次只能被一个线程所持有。共享锁是指该锁可被多个线程所持有。这里主要是为了把一个操作掰成两个操作，一个读一个写，分别加不同粒度的锁，目的是实现在只有读的场景下的最大并发。</p><p>独享锁也叫互斥锁，读写锁等同于一个独享锁+一个共享锁，也叫一个写锁+读锁。读锁的共享锁可保证并发读是非常高效的，读写，写读，写写的过程是互斥的。</p><p>对于Java ReentrantLock而言，其是独享锁。但是对于Lock的另一个实现类ReadWriteLock，其读锁是共享锁，其写锁是独享锁。</p><p>对于Synchronized而言，当然是独享锁。</p><p>另外在synchronizd关键字的优化相关知识里面，会碰到 诸如 偏向锁/轻量级锁/自旋锁/适应性自旋锁/重量级锁 的概念，这些都是锁升级中的某些状态，除了重量级锁是锁外，其它要么不是锁，要么就是在成为锁的路上，这里不过多讨论，只需要记住只要是锁一定有上面三个特性就好。所以synchronized的全称应该叫 非公平的可重入的互斥悲观锁。同理，ReentrantLock 默认也是非公平的可重入的互斥悲观锁，当然ReentrantLock也可以实现 公平的可重入的互斥悲观锁。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-generator自定义swagger-doc插件扩展</title>
      <link href="/2020/02/11/java/mybatis-generator-zi-ding-yi-swagger-doc-cha-jian-kuo-zhan/"/>
      <url>/2020/02/11/java/mybatis-generator-zi-ding-yi-swagger-doc-cha-jian-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<p>pom.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.chenshang.plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-swagger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.chenshang.plugin;import java.util.List;import org.mybatis.generator.api.IntrospectedColumn;import org.mybatis.generator.api.IntrospectedTable;import org.mybatis.generator.api.Plugin;import org.mybatis.generator.api.PluginAdapter;import org.mybatis.generator.api.dom.java.Field;import org.mybatis.generator.api.dom.java.TopLevelClass;public class MybatisSwaggerDoc extends PluginAdapter {  @Override  public boolean validate(List&lt;String&gt; warnings) {    return true;  }  @Override  public boolean modelFieldGenerated(Field field, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, Plugin.ModelClassType modelClassType) {    String classAnnotation = "@ApiModel(value=\"" + topLevelClass.getType().getShortName() + "\")";    if (!topLevelClass.getAnnotations().contains(classAnnotation)) {      topLevelClass.addAnnotation(classAnnotation);    }    String apiModelAnnotationPackage = properties.getProperty("apiModelAnnotationPackage");    String apiModelPropertyAnnotationPackage = properties.getProperty("apiModelPropertyAnnotationPackage");    if (null == apiModelAnnotationPackage) {      apiModelAnnotationPackage = "io.swagger.annotations.ApiModel";    }    if (null == apiModelPropertyAnnotationPackage) {      apiModelPropertyAnnotationPackage = "io.swagger.annotations.ApiModelProperty";    }    topLevelClass.addImportedType(apiModelAnnotationPackage);    topLevelClass.addImportedType(apiModelPropertyAnnotationPackage);    field.addAnnotation("@ApiModelProperty(value=\"" + introspectedColumn.getRemarks() +      "\",name=\"" + introspectedColumn.getJavaProperty() +      "\",dataType=\"" + introspectedColumn.getFullyQualifiedJavaType().getShortName() +      "\")");    return super.modelFieldGenerated(field, topLevelClass, introspectedColumn, introspectedTable, modelClassType);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有主属性清单</title>
      <link href="/2020/02/10/java/java-tian-keng/mei-you-zhu-shu-xing-qing-dan/"/>
      <url>/2020/02/10/java/java-tian-keng/mei-you-zhu-shu-xing-qing-dan/</url>
      
        <content type="html"><![CDATA[<p>异常: *.jar中没有主清单属性</p><p>原因:<br>查看了MANIFEST.MF，发现没有Main-Class属性，我想了一下，就试着去SpringBoot的官方文档上找找，果然有讲这一部分，spring-boot-maven-plugin的打包过程与直接使用maven-jar-plugin不同，所以我们在使用spring-boot-maven-plugin时需要指定的执行项，或者我们在打包时指定，使用 mvn package spring-boot:repackage来打包也可以执行。</p><p>解决方法:</p><pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;executions&gt;          &lt;execution&gt;            &lt;goals&gt;              &lt;goal&gt;repackage&lt;/goal&gt;            &lt;/goals&gt;          &lt;/execution&gt;        &lt;/executions&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请使用-source=8或更高版本以启用lambda表达式</title>
      <link href="/2020/02/10/java/java-tian-keng/qing-shi-yong-source-8-huo-geng-gao-ban-ben-yi-qi-yong-lambda-biao-da-shi/"/>
      <url>/2020/02/10/java/java-tian-keng/qing-shi-yong-source-8-huo-geng-gao-ban-ben-yi-qi-yong-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p>异常:[ERROR] (请使用 -source 8 或更高版本以启用 lambda 表达式)<br>解决方法: 在项目的pom.xml指定1.8</p><pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;        &lt;version&gt;3.8.1&lt;/version&gt;        &lt;configuration&gt;          &lt;source&gt;1.8&lt;/source&gt;          &lt;target&gt;1.8&lt;/target&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载与重写</title>
      <link href="/2020/02/05/java/chong-zai-yu-chong-xie/"/>
      <url>/2020/02/05/java/chong-zai-yu-chong-xie/</url>
      
        <content type="html"><![CDATA[<p>记住重载是同一个类中的行为，重写是父子类继承中的行为。他们都是多态的表现形式。其实说白了多台就是为了最大限度的兼容和少写代码。试想我写一个方法就可以传递100中不同的类型的参数，是不是就可以少些99个方法么。</p><h1 id="重载"><a class="markdownIt-Anchor" href="#重载"></a> 重载</h1><p>重载指的是在同一个类中，方法同名但参数不同，这个参数的不同足以另Jvm虚拟机根据参数的个数或参数的类型来区分究竟该调用哪个方法,在调用的时候Jvm总是倾向于调用方法更明确的那个<br>如下</p><pre class="line-numbers language-none"><code class="language-none">public class Son {  public String print(Object o) {    return "111";  }  public String print(String o) {    return o;  }  public static void main(String[] args) {    new Son().print("12345");    new Son().print(args);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意下面两个方法是不能共存的，因为在调用的时候没有办法区分</p><pre class="line-numbers language-none"><code class="language-none">public String print(Object o) {    return "111";  }public &lt;T&gt; T print(T o) {  return o;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理由是泛型的类型擦除</p><pre class="line-numbers language-none"><code class="language-none">public &lt;T&gt; T print(T o) {  return o;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个方法和</p><pre class="line-numbers language-none"><code class="language-none">public Object  print(o o) {  return o;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法无异</p><h1 id="重写"><a class="markdownIt-Anchor" href="#重写"></a> 重写</h1><p>重写就是重新一份，这个新写的一份是有条件的</p><ol><li>方法名必须一模一样</li><li>方法签名必须一模一样，无论参数的个数还是类型</li><li>方法的返回值必须是父类方法的同类型或子类</li><li>方法限定条件不能比父类更严格，如果父类方法是public 那子类重写方法必须是public.如果父类方法是protected 那子类可以是就不可以小于protected的限定也就是不能是default和private的。这样做的目的其实还是为了在调用的时候知道该掉用那个方法。如果违背了这个条件，比如在弗雷中可以调用但是实际类型是子类，会导致抛出异常的，因为子类方法无法调用。这也违背了设计原则中的里氏代换原则</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题的理解</title>
      <link href="/2020/02/02/qian-duan/kua-yu-wen-ti-de-li-jie/"/>
      <url>/2020/02/02/qian-duan/kua-yu-wen-ti-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是跨域问题"><a class="markdownIt-Anchor" href="#什么是跨域问题"></a> 什么是跨域问题?</h1><p>跨域问题指的是,在一个域名下向另一个域名发起请求试图获取数据或者页面DOM元素,浏览器是不允许的,因为你跨了不同的域名。但确确实实我们又想要向另一个域名发送请求获取数据,这时候我们就遇到了所谓的跨域问题。</p><h1 id="为什么会有跨域问题"><a class="markdownIt-Anchor" href="#为什么会有跨域问题"></a> 为什么会有跨域问题?</h1><p>跨域问题的出现是因为浏览器的同源策略,同源策略限制了不同域名之间是不允许访问的。注意这个限制是浏览器限制的,或者说是浏览器的内核限制的,脱离的这个限定是不会出现跨域问题的，因为不受同源策略的限制。这也就是为什么后端服务可以使用Http工具发起http请求而不会遇到所谓的跨域问题的原因。</p><h1 id="为什么会有同源策略"><a class="markdownIt-Anchor" href="#为什么会有同源策略"></a> 为什么会有同源策略?</h1><p>浏览器一开始并没有对不用域名之间的相会调用有任何限制,直到有人利用这个漏洞发明了跨站请求伪造获取了大量的用户信息。各大浏览器厂商才开始关注,所以 Netspace公司最先提出并应用了同源策略到浏览器上，至此之后所有的浏览器都不允许不同域名之间的相互调用了。</p><h1 id="什么是跨站请求伪造"><a class="markdownIt-Anchor" href="#什么是跨站请求伪造"></a> 什么是跨站请求伪造?</h1><p>在没有同源策略限制的时代,在一个域名下想另一个域名发送请求的时候会带上目标域名的cookie并返回结果,这样在当前域名下就可以获取到另一个域名请求的所有数据，包括该域名下的cookie,返回结果,页面DOM等等。你会说这样不是挺好的么，但是试想一下如果别有用心之人利用这个漏洞获取了你登录银行的cookie,你就该后悔了。</p><h1 id="跨站请求伪造是怎么做的"><a class="markdownIt-Anchor" href="#跨站请求伪造是怎么做的"></a> 跨站请求伪造是怎么做的?</h1><p>我们知道一般浏览器会保留一个叫做cookie的东西，cookie的发明是源于http协议无状态的特性发明的。cookie这个东西有一个特点,就是存储在浏览器当前所在电脑本地，并且每次访问当前cookie对应的域名的时候都会携带过去。因此当你在一个域名下向另一个域名发送请求的时候,浏览器会自动携带上另一个域名的cookie然后发送到对应的服务器。这样当你登陆你的银行页面之后然后还没有登出,当你在访问另一个页面的时候,它就可以在后台偷偷访问你的银行页面,然后干一些不为人知的事情。</p><h1 id="http为什么是无状态的"><a class="markdownIt-Anchor" href="#http为什么是无状态的"></a> http为什么是无状态的?</h1><p>因为当时发明http的时候需求没有那么复杂，只是需要简单的浏览文本即可，根本没有什么长连接啊之类的需求，因此当时就为了简单起见所以http就设计成了无状态的了。</p><h1 id="跨域问题如何解决"><a class="markdownIt-Anchor" href="#跨域问题如何解决"></a> 跨域问题如何解决?</h1><p>同源策略其实是限制不同域名之间的访问，它是出于安全的目的。但安全和方便本就是对立的，安全了使用起来就麻烦。尤其是在现在前后端分离的场景下、在现在微服务大行其道的今天，一个服务一个域名或服务器也是很常见的。最常见的解决方法就是jsonp的方式，最正统的解决方案就是 cros</p><h1 id="cros-跨站资源共享"><a class="markdownIt-Anchor" href="#cros-跨站资源共享"></a> cros 跨站资源共享</h1><p>跨站资源共享是解决跨域问题的首选，需要前后端配合。其本质上就是后端限制什么样的域名允许跨站访问我而已。用到了http的header中设置一些默认的参数。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 线程状态转换</title>
      <link href="/2019/12/09/java/java-bing-fa-bian-cheng/java-xian-cheng-zhuang-tai-zhuan-huan/"/>
      <url>/2019/12/09/java/java-bing-fa-bian-cheng/java-xian-cheng-zhuang-tai-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>我们要知道Java中的线程状态转换,得先知道它有哪些状态,然后在研究它们在什么情况下才会转换。我们先看一下Java源码中是如何定义线程状态的，位置在<br><code>java.lang.Thread</code> 类中的内部枚举类 <code>public enum State</code> 中，大概在1742行</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/**     * A thread state.  A thread can be in one of the following states:     * &lt;ul&gt;     * &lt;li&gt;{@link #NEW}&lt;br&gt;     *     A thread that has not yet started is in this state.     *     &lt;/li&gt;     * &lt;li&gt;{@link #RUNNABLE}&lt;br&gt;     *     A thread executing in the Java virtual machine is in this state.     *     &lt;/li&gt;     * &lt;li&gt;{@link #BLOCKED}&lt;br&gt;     *     A thread that is blocked waiting for a monitor lock     *     is in this state.     *     &lt;/li&gt;     * &lt;li&gt;{@link #WAITING}&lt;br&gt;     *     A thread that is waiting indefinitely for another thread to     *     perform a particular action is in this state.     *     &lt;/li&gt;     * &lt;li&gt;{@link #TIMED_WAITING}&lt;br&gt;     *     A thread that is waiting for another thread to perform an action     *     for up to a specified waiting time is in this state.     *     &lt;/li&gt;     * &lt;li&gt;{@link #TERMINATED}&lt;br&gt;     *     A thread that has exited is in this state.     *     &lt;/li&gt;     * &lt;/ul&gt;     *     * &lt;p&gt;     * A thread can be in only one state at a given point in time.     * These states are virtual machine states which do not reflect     * any operating system thread states.     *     * @since   1.5     * @see #getState     */    public enum State {        /**         * Thread state for a thread which has not yet started.         */        NEW,        /**         * Thread state for a runnable thread.  A thread in the runnable         * state is executing in the Java virtual machine but it may         * be waiting for other resources from the operating system         * such as processor.         */        RUNNABLE,        /**         * Thread state for a thread blocked waiting for a monitor lock.         * A thread in the blocked state is waiting for a monitor lock         * to enter a synchronized block/method or         * reenter a synchronized block/method after calling         * {@link Object#wait() Object.wait}.         */        BLOCKED,        /**         * Thread state for a waiting thread.         * A thread is in the waiting state due to calling one of the         * following methods:         * &lt;ul&gt;         *   &lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;         *   &lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;         *   &lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;         * &lt;/ul&gt;         *         * &lt;p&gt;A thread in the waiting state is waiting for another thread to         * perform a particular action.         *         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;         * on an object is waiting for another thread to call         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;         * is waiting for a specified thread to terminate.         */        WAITING,        /**         * Thread state for a waiting thread with a specified waiting time.         * A thread is in the timed waiting state due to calling one of         * the following methods with a specified positive waiting time:         * &lt;ul&gt;         *   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt;         *   &lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;         *   &lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;         *   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;         *   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;         * &lt;/ul&gt;         */        TIMED_WAITING,        /**         * Thread state for a terminated thread.         * The thread has completed execution.         */        TERMINATED;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码我们知道,Java是在1.5版本中才加入对线程支持的,也就是说一开始JDK其实是不支持多线程编程的。那源码中定义了6中状态分别是，</p><pre class="line-numbers language-none"><code class="language-none">NEW: 新建RUNNABLE: 就绪BLOCK: 阻塞WAITING: 等待TIMED_WATING: 限时等待TERMINATED: 终止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那为什么要区分这么多种状态呢? 注释都已经写得清清楚楚了。</p><h6 id="new"><a class="markdownIt-Anchor" href="#new"></a> NEW</h6><blockquote><p>/**<br>* Thread state for a thread which has not yet started.<br>*/<br>还没有开始的线程所处的状态</p></blockquote><p>每一个线程，在堆内存中都有一个对应的Thread对象。Thread t = new Thread();当刚刚在堆内存中创建Thread对象，还没有调用t.start()方法之前，线程就处在NEW状态。在这个状态上，线程与普通的java对象没有什么区别，就仅仅是一个堆内存中的对象。</p><h6 id="runnable"><a class="markdownIt-Anchor" href="#runnable"></a> RUNNABLE</h6><blockquote><p>/**<br>* A thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating * system such as processor.<br>*/<br>线程在Java虚拟机中的状态,再该状态下,线程正在等待操作系统的处理器给他分配资源</p></blockquote><p>对应 t.start() 调用的时候或者运行中的线程自己调用yield方法礼让一下的时候或者当前线程的cpu时间轮片到了出发了cpu中断，该线程响应中断后会改变状态,此时还会引起上下文的切换。</p><h6 id="block"><a class="markdownIt-Anchor" href="#block"></a> BLOCK</h6><blockquote><p>/**<br>* Thread state for a thread blocked waiting for a monitor lock.<br>* A thread in the blocked state is waiting for a monitor lock<br>* to enter a synchronized block/method or<br>* reenter a synchronized block/method after calling<br>* {@link Object#wait() Object.wait}.<br>*/<br>该状态下当前线程在等待一把锁。当遇到 synchronized 的时候就会处于该状态 或者调用一个对象的wait方法后被其他线程唤醒再次尝试获取 synchronized 锁的时候获取失败会再次进入该状态。</p></blockquote><p>可见阻塞状态一定是跟锁有关的，也就是同步的时候，是因为线程获取不到锁才进入的状态，醒来的第一件事情一定是获取锁。获取到锁执行同步代码，获取不到锁就继续阻塞，直到下次醒来后继续执行。所以这个地方等待的是锁的释放。</p><p>WAITING,</p><ul><li>{@link Object#wait() Object.wait} with no timeout<br>当调用不加时间的wait方法的时候。注意这里要想调用wait方法一定得先获取到对象对应的锁。获取不到锁进入阻塞状态,获取到锁后才调用wait方法，这时候直接进入WAITING状态。这个地方等待的是有人来唤醒(调用notify或notifyAll)</li><li>{@link #join() Thread.join} with no timeout<br>把一个线程加到当前线程的执行流程中，也就是在join那个时间点等待执行线程的完成，完成后才继续执行，所以这是时候当前线程是处于WATING状态的，这个地方等待的是另一个线程执行完成后在唤醒。（其原理是先把当前线程挂起WATING，并把线程id传递给另一个线程，另一线程执行完成后，根据线程ID吧当前线程的状态改为RUNABLE。然后当前线程等待cpu调度）<br>Join 方法：本质上还是根据wait方法实现的。分析join源码发现join方法本身是使用了synchronized修饰符的。是加在方法上面的，意味着。 获取了当前对象的锁，然后继续发现里面的代码调用了wait。意味着我们先锁，再释放，等待唤醒，什么情况下被唤醒呢？执行结束的时候。调用wait之后一定阻塞的是当前线程，及时wait的对象是一个线程。</li><li>{@link LockSupport#park() LockSupport.park}<br>可见等待状态其实与锁无关，它的唤醒一定是另一个线程完成某件事情后主动去唤醒(所谓唤醒，其实就是把状态改为RUNNABLE)</li></ul><p>TIMED_WAITING</p><ul><li></li><li>{@link #sleep Thread.sleep}</li><li></li><li>{@link Object#wait(long) Object.wait} with timeout</li><li></li><li>{@link #join(long) Thread.join} with timeout</li><li></li><li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li><li></li><li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li></ul><p>TIMED_WATTING 状态一定是和时间有关，等时间到了，自动出发唤醒（其实现原理是，先把线程ID 放到一个队列中，然后每隔时钟周期都检查是不是有线程到时间了，到了就把状态改为RUNABLE)。这个定时唤醒是系统时钟搞得鬼，系统时钟也是独立运行的时钟，可以像它上面注册时钟事件，当时间到了之后，就会发起中断，以唤醒进程。而且cpu一定会响应的。</p><p>TERMINATED<br>这个状态没有什么多说的，当线程运行结束的时候或者异常的时候就会别设置为该状态。已经是终态了。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JAVA </tag>
            
            <tag> Java并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 时间戳插入后丢失毫秒</title>
      <link href="/2019/11/28/java/java-tian-keng/mysql-shi-jian-chuo-cha-ru-hou-diu-shi-hao-miao/"/>
      <url>/2019/11/28/java/java-tian-keng/mysql-shi-jian-chuo-cha-ru-hou-diu-shi-hao-miao/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个问题,就是数据库中某个字段定义成了timestamp类型,当我向数据库中该字段赋值一个时间戳的时候,发现存入的值和我预期的值不同,我本来打算存储的是 1574978582234 但存入数据库中居然变成了 1574978582000 也就是后三位都变成000了，我称之为都是毫秒计数。</p><p>解决方法是在定义mysql的 DDL 的时候该字段的类型定义成 timestamp(3)即可</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap new 时赋值</title>
      <link href="/2019/11/23/java/hashmap-new-shi-fu-zhi/"/>
      <url>/2019/11/23/java/hashmap-new-shi-fu-zhi/</url>
      
        <content type="html"><![CDATA[<p>Java 中hashMap 怎么在新建的时候赋值</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) {    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;() {      {        put("one", "1");        put("two", "2");      }    };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法建议在只在测试的时候使用,其实是一种偷懒的写法,目前Java还没有优化这方面的打算。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程范式</title>
      <link href="/2019/10/08/ji-suan-ji/ji-suan-ji-ji-chu/bian-cheng-fan-shi/"/>
      <url>/2019/10/08/ji-suan-ji/ji-suan-ji-ji-chu/bian-cheng-fan-shi/</url>
      
        <content type="html"><![CDATA[<p>之前写过一篇文章叫《面向对象的理解》</p><blockquote><p>面向对象是一种程序设计的思想，之前人们搞程序设计用的都是面向过程的思想，更早则没有任何思想而言，随着人们对软件开发过程的深入，发现软件编程也是需要一类思想来指导的。就像共产主义革命，没有马克思主义的指导是无法成功的一样。</p></blockquote><p>今天再来说说编程范式,记得很早之前有一次去面试,被问到关于编程范式的问题,当时这个词是第一次听说,完全蒙了.</p><h3 id="百度百科"><a class="markdownIt-Anchor" href="#百度百科"></a> 百度百科</h3><blockquote><p>编程范型、编程范式或程序设计法（英语：Programming paradigm），（范即模范、典范之意，范式即模式、方法），是一类典型的编程风格，是指从事软件工程的一类典型的风格（可以对照方法学）。 [1]</p></blockquote><h3 id="维基百科"><a class="markdownIt-Anchor" href="#维基百科"></a> 维基百科</h3><blockquote><p>编程范型、编程范式或程序设计法（英语：Programming paradigm），（范即模范、典范之意，范式即模式、方法），是一类典型的编程风格，是指从事软件工程的一类典型的风格（可以对照方法学）。如：函数式编程、过程式编程、面向对象编程、指令式编程等等为不同的编程范型。</p></blockquote><h3 id="个人分析"><a class="markdownIt-Anchor" href="#个人分析"></a> 个人分析</h3><p>编程编的多了,前辈程序员发现软件编程也需要一类思想来指导。就像共产主义革命，没有马克思主义的指导是无法成功的一样。我们经常说 Java是面向对象的编程语言、 C语言是面向过程的编程语言、scala是集面向对象编程范式与面向函数编程范式于一身的编程语言。所以说编程范式并不针对某一种语言,它是我们在写代码时候解决某类问题的一种指导思想。</p><ol><li>某种语言可能只属于某一种编程范式例如汇编语言你就只能按照面向过程的范式去写代码,你写不出面向对象范式语言那样的代码;</li><li>某种语言有可能更倾向于某一种编程范式，例如C语言更倾向于面向过程的编程范式，因为C语言解决的问题往往是那种与数学算法相关的问题,但并不是说他不能用面向对象或面向函数的方式来写代码,例如它的 结构体 数据类型就有面向对象的苗头了;</li><li>某中语言可能可以使用多种编程范式来解决问题，例如C<ins>语言是在C语言的基础上发展出来的,它自然可以使用C语言式的面向过程的编程范式解决问题，有可以使用类、继承、封装、多态等诸多思想的面向对象范式编写代码,只不过他更倾向于面向对象编程而已，因为C</ins>已经不仅限于解决与数学算法相关的问题了。</li></ol><h4 id="面向过程过程式-命令式"><a class="markdownIt-Anchor" href="#面向过程过程式-命令式"></a> 面向过程（过程式、命令式）</h4><p>一开始人们能用程序解决的问题比较少也比较局限,所以一开始人们关注的是事物发展变化的过程，前辈们自然而然的的就形成了面向过程编程的思维方式，要理解什么是面向过程，你首先需要知道什么是过程？过程就是事物发展的先后顺序，一个个事件发展连起来就是一个过程，而面向过程就是重点分析这个先后顺序，先干什么，后干什么，然后干什么。比如5除以2这个事件，面向过程的思维首先想到的是除法这个事件，所以它会先写一个除法的方法，用来接收数据5和3,就像这样div(5,3)。例如汇编语言需要知道把哪个寄存器的值移动到哪个寄存器,需要将哪两个寄存器的值进行求和,也就是我们的汇编指令<code>MOV</code> <code>SUB</code> <code>SADD</code>等。试想你写一个从1加到100的一段汇编代码得多么麻烦。但是前辈程序员在这样的指导思想下写了几十年的代码。这种编程思想就叫面向过程编程,也叫指令式编程。即使是使用了大量高级助记符的高级语言例如C,C++,Java等也有很多编写方式用到的思想是指令式编程。</p><h4 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h4><p>随着程序要解决的问题的增多以及对事物发展认识的深入，人们发现事物才是需要关注的重点，事物的发展是由事物的本质决定的， 于是便产生了面向对象的设计思想，要理解什么是面向对象？你首先需要知道什么是对象，对象是对事物的抽象。那么什么是抽象？抽象就是对事物的归纳总结，那总结后会得出什么来呢？人们发现事物都有一些共同特点，那就是都有属性和动作，于是便概括出事物的属性和动作，归纳总结出来的这个抽象的东西就叫对象。那什么是属性？什么是动作呢？属性就是事物有哪些东西，动作就是事物能做那些事情，属性是内在的，动作是对外的。拿人为例，人有眼耳口鼻手，动作有看听说嗅打一样。那么人即是一个抽象，一个对象。对象有了，对象有千千万万，那么在对这同一类的对象进行抽象，就有了对象的类。类是对象的模板，对象是类的实例。同一类对象之间是有共性的，这种共性体现在他们是同一个模板刻画出来的，同一类对象之间是有差异的，这种差异体现在他们是不同的对象。我们把这些属性称为变量，把这些动作称为方法也叫函数，属性和动作都有他们作用的范围，我们称为变量和方法的作用域。比如5除以2这个事件,面向对象的思想首先想到的是5和2是一个整型,于是先创建一个整数类型的对象，对象包含一个基本的数据类型以及一个除法的行为,就像这样res=5.div(2).</p><h4 id="面向函数函数式"><a class="markdownIt-Anchor" href="#面向函数函数式"></a> 面向函数（函数式）</h4><p>随着编程大业的发展,先辈程序员发现,所有的编程行为都可以抽象为两个最最基本的函数，一个叫map一个叫reduce。函数是对行为过程的抽象，要想理解什么是函数式编程,要先知道什么是函数.函数式数学中的概念,从一个状态与另一个状态的对应关系,或者从一个状态到另一个状态的映射就是函数,y=f(x) 这个 f 就是函数。就像谈什么是面向对象一样,继承、封装、多态、抽象一样,谈什么函数式编程就要说函数式编程的特点,函数编程的特点有很多:函数式第一公民、高阶函数、模式匹配、无副作用、不变性。</p><p>函数其实说到底是一个集合到另一集合的映射。函数有 N多个名字,在 java 的类中叫方法，在 scala 的类中叫函数，在 java 的方法参数中叫 lamda 这个 lamda 的类型叫函数接口，而这个 lamda 又有一个别名叫匿名函数，在引用了外部环境变量的 lamda 中叫闭包 （js 中有这种叫法，不知道准不准），在 OC 中叫 block ，很像，像到我都不想去区分他们。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>编程范式是一种解决特定问题的思想的抽象,它不与编程语言绑定,上面说的面向过程、面向对象、函数式编程 仅仅是我们常用到的三个,其实编程范式还有其他,不过我研究下来网上也没有一个比较权威的说法,我在这里也就不误人子弟了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell当心for循环中的变量作用域</title>
      <link href="/2019/09/19/linux/shell/shell-dang-xin-for-xun-huan-zhong-de-bian-liang-zuo-yong-yu/"/>
      <url>/2019/09/19/linux/shell/shell-dang-xin-for-xun-huan-zhong-de-bian-liang-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${item}</span>  <span class="token keyword">done</span>  <span class="token builtin class-name">echo</span> <span class="token string">"done"</span>  func<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token variable">${item}</span><span class="token punctuation">}</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码,在for循环执行完毕后又执行了一个函数func,但是func居然打印出了item的最后一次的赋值5,说明这里for 中 item定义的是一个全局的变量,<br>这和我们的认知是不太一样的,理论上item的作用域应该只在main函数中,出了main函数,其他函数应该是不认的。所以这里可能会有坑。</p><p>因此比较保险一点的做法是,在for之前先定义一个local的变量item</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> item<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${item}</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串拼接VS</title>
      <link href="/2019/09/19/java/java-zi-fu-chuan-pin-jie-vs/"/>
      <url>/2019/09/19/java/java-zi-fu-chuan-pin-jie-vs/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/chen-shang/Picture/raw/master/java/String.jpg" alt=""><br>看到上面的提示时是不是有点疑问,对于初学Java的人来说，在学习String的时候，肯定有无数个人和我们讲过，“尽量不要使用+拼接字符串，效率不好，应该使用append，你自己循环拼接个十万次自己瞧瞧就知道了” 为什么这里连IDEA都提醒我们可以用+来代替append呢。</p><p>结论:<br>Java中+拼接字符串并不是人们口中所说的那样臭名昭著，人们口中所说的效率低下指的是在循环中的+拼接，只是不知道从哪天开始完全变了味。如果你能保证在一条语句中把字符串或者字符串变量全部拼接完而不断开，那+拼接根本没有任何缺点，编译器还会有一些优化，如果拼接的全是字符串字面量，那效果更好，它们直接就变成了一个完整的字符串。并且+书写简洁方便，可读性强。直接用StringBuilder的append也没有问题，只是不要append()和+混合使用。</p><p>如果用+拼接字符串中间不断,那么用+拼接的效率与StringBuffer或StringBuilder使用append的效率相当,甚至在编译器的优化下效率反而会更高。因为第一次遇到+拼接的时候,编译器会自动创new 一个 StringBuilder 然后只要+不断就会一路append下去。</p><p>String采用连接运算符(+)效率低下，都是上述循环、大批量数据情况造成的，每做一次"+"就产生个StringBuilder对象，然后append后就扔掉。下次循环再到达时重新产生个StringBuilder对象，然后append字符串，如此循环直至结束。如果我们直接采用StringBuilder对象进行append的话，我们可以节省创建和销毁对象的时间。如果只是简单的字面量拼接或者很少的字符串拼接，性能都是差不多的。</p><p>参考: <a href="https://blog.csdn.net/m0_37589327/article/details/78605268">Java中对于+和append拼接字符串效率的误解</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程vs线程</title>
      <link href="/2019/09/19/ji-suan-ji/ji-suan-ji-ji-chu/jin-cheng-vs-xian-cheng/"/>
      <url>/2019/09/19/ji-suan-ji/ji-suan-ji-ji-chu/jin-cheng-vs-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h1><blockquote><p>维基百科</p></blockquote><p>进程（英语：process），是指计算机中已运行的程序。进程为曾经是分时系统的基本运作单位。在面向进程设计的系统（如早期的UNIX，Linux 2.4及更早的版本）中，进程是程序的基本执行实体；在面向线程设计的系统（如当代多数操作系统、Linux 2.6及更新的版本）中，进程本身不是基本运行单位，而是线程的容器。程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例。若干进程有可能与同一个程序相关系，且每个进程皆可以同步（循序）或异步（平行）的方式独立运行。现代计算机系统可在同一段时间内以进程的形式将多个程序加载到存储器中，并借由时间共享（或称时分复用），以在一个处理器上表现出同时（平行性）运行的感觉。同样的，使用多线程技术（多线程即每一个线程都代表一个进程内的一个独立执行上下文）的操作系统或计算机体系结构，同样程序的平行线程，可在多CPU主机或网络上真正同时运行（在不同的CPU上）。</p><h1 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h1><blockquote><p>维基百科</p></blockquote><p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。</p><p>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。</p><p>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。</p><p>一个进程可以有很多线程，每条线程并行执行不同的任务。</p><p>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见的，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA的值传递和引用传递</title>
      <link href="/2019/09/17/java/java-de-zhi-chuan-di-he-yin-yong-chuan-di/"/>
      <url>/2019/09/17/java/java-de-zhi-chuan-di-he-yin-yong-chuan-di/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">值传递(pass by value):传递的是值的拷贝引用传递(pass by reference):传递的是引用值的拷贝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>讨论这个问题的意义在于分析当一个变量传递给一个含参函数之后,在函数内部改变形参变量的值,会不会影响实参变量。也就是说这个函数有没有副作用。这个问题的说法不一。个人觉得，无论将Java的参数传递归类为是值传递还是引用传递，都是将栈内存中的内容复制一份出来，由于对于基本数据类型来说，其值是直接存在栈内存中的，因此复制出来的就是其值，所以叫值传递；对于普通对象来说，由于栈内存中存储的是该对象的引用，因此复制出来的也就是其引用，所以叫引用传递。但从另一方面说，这个引用也是一个值，所以有的人也说Java只有值传递。</p><p>至于将外部变量传递到方法内部后，什么情况下会改变外部变量的值，这个要视情况而定了。对于基本数据类型来说，由于行参拷贝的是实参的值，对行参的操作并不影响实参的值，除非将返回结果在赋值给实参。对于普通对象来说，如果在函数内部一开始改变了引用的指向，无论如何改变引用对象的值都不会影响实参的变化，但是如果直接就改变行参引用指向的对象的值是会改变实参的值的。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseShell使用教程</title>
      <link href="/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/"/>
      <url>/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-text" data-language="text"><code class="language-text"> ____                      _          _ _| __ )  __ _ ___  ___  ___| |__   ___| | ||  _ \ / _` / __|/ _ \/ __| '_ \ / _ \ | || |_) | (_| \__ \  __/\__ \ | | |  __/ | ||____/ \__,_|___/\___||___/_| |_|\___|_|_|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="项目地址"><a class="markdownIt-Anchor" href="#项目地址"></a> 项目地址</h1><blockquote><p><a href="https://github.com/chen-shang/BaseShell">https://github.com/chen-shang/BaseShell</a></p></blockquote><h1 id="使用教程"><a class="markdownIt-Anchor" href="#使用教程"></a> 使用教程</h1><center>  <img src="/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/init.gif"></center><h1 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h1><p>本Shell框架是以bash为标准,在Mac OS 10.14上进行验证。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ sw_versProductName:Mac OS XProductVersion:<span class="token number">10.14</span>chenshang@chenshangMacBo    ok-Pro:~$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>BuildVersion:18A391Darwin chenshangMacBook-Pro.local <span class="token number">18.0</span>.0 Darwin Kernel Version <span class="token number">18.0</span>.0: Wed Aug <span class="token number">22</span> <span class="token number">20</span>:13:40 PDT <span class="token number">2018</span><span class="token punctuation">;</span> root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$0</span><span class="token parameter variable">-bash</span>chenshang@chenshangMacBook-Pro:~$ <span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token environment constant">SHELL</span>}</span>/usr/local/bin/bashchenshang@chenshangMacBook-Pro:~$ <span class="token function">bash</span> <span class="token parameter variable">-version</span>GNU bash, version <span class="token number">5.0</span>.2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>-release <span class="token punctuation">(</span>x86_64-apple-darwin18.2.0<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">&gt;</span>This is <span class="token function">free</span> software<span class="token punctuation">;</span> you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配套工具安装"><a class="markdownIt-Anchor" href="#配套工具安装"></a> 配套工具安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> jqbrew <span class="token function">install</span> terminal-notifierbrew <span class="token function">install</span> <span class="token function">shellcheck</span>brew <span class="token function">install</span> coreutilsbrew <span class="token function">install</span> <span class="token function">bc</span>brew <span class="token function">install</span> lolcatbrew <span class="token function">install</span> bashdbbrew <span class="token function">install</span> flock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我写这套框架的初衷在于丰富自己的shell脚本库，以期在写一些简单脚本辅助开发时候能够像使用Java类库一样方便。同时为了写出类Java的工具类，这会强迫自己深入学习Java的源代码。<br>所以Java是我的第一语言,Scala作为第二语言,忠实的Shell粉,但不排斥其他编程语言。这是我对编程语言的态度。<br>BaseShell类似于Java语言的SDK是为Shell脚本语言提供的一套工具库,涵盖多种类Java工具的实现</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">.├── Annotation                          #入参检查脚本│&nbsp;&nbsp; └── BaseAnnotation.sh├── Collection                          #集合工具脚本│&nbsp;&nbsp; ├── BaseArrayList.sh│&nbsp;&nbsp; ├── BaseHasMap.sh│&nbsp;&nbsp; └── BaseMap.sh├── Color                               #颜色工具脚本│&nbsp;&nbsp; └── BaseColor.sh├── Concurrent                          #并发工具脚本│&nbsp;&nbsp; ├── BaseLock.sh                       #锁工具│&nbsp;&nbsp; ├── BaseThreadPool.sh                 #仿线程池工具│&nbsp;&nbsp; └── BaseThreadPoolExecutor.sh         #仿线程池工具├── Constant                            #常量定义脚本│&nbsp;&nbsp; └── BaseConstant.sh├── Cursor                              #光标控制脚本│&nbsp;&nbsp; ├── BaseCursor.sh│&nbsp;&nbsp; ├── BaseKeyboard.sh│&nbsp;&nbsp; └── BaseKeyboardEvent.sh├── Date                                #日期工具脚本│&nbsp;&nbsp; ├── BaseLocalDate.sh│&nbsp;&nbsp; ├── BaseLocalDateTime.sh│&nbsp;&nbsp; ├── BaseLocalTime.sh│&nbsp;&nbsp; ├── BaseMonth.sh│&nbsp;&nbsp; ├── BaseTimeUnit.sh│&nbsp;&nbsp; ├── BaseTimestamp.sh│&nbsp;&nbsp; └── BaseWeek.sh├── File                                #文件工具脚本│&nbsp;&nbsp; ├── BaseFile.sh│&nbsp;&nbsp; ├── BaseTable.sh│&nbsp;&nbsp; └── BaseTableGen.sh├── Json                                #Json工具脚本│&nbsp;&nbsp; └── BaseJson.sh├── Lang                                #基础工具脚本│&nbsp;&nbsp; ├── BaseMath.sh│&nbsp;&nbsp; ├── BaseObject.sh│&nbsp;&nbsp; └── BaseString.sh├── Log                                 #日志工具脚本│&nbsp;&nbsp; └── BaseLog.sh├── Redis                               #Redis工具脚本│&nbsp;&nbsp; └── BaseRedis.sh├── Ssh                                 #ssh工具脚本│&nbsp;&nbsp; └── BaseSsh.sh├── Starter                             #导包管理脚本│&nbsp;&nbsp; ├── BaseDateTimeStarter.sh│&nbsp;&nbsp; ├── BaseEnd.sh│&nbsp;&nbsp; ├── BaseHeader.sh│&nbsp;&nbsp; ├── BaseStarter.sh│&nbsp;&nbsp; ├── BaseTestEnd.sh│&nbsp;&nbsp; └── BaseTestHeader.sh├── Test                                #单元测试脚本-里面有每个工具包的使用示例│&nbsp;&nbsp; ├── BaseAnnotationTest.sh│&nbsp;&nbsp; ├── BaseArrayListTest.sh│&nbsp;&nbsp; ├── BaseFileTest.sh│&nbsp;&nbsp; ├── BaseJsonTest.sh│&nbsp;&nbsp; ├── BaseLocalDateTest.sh│&nbsp;&nbsp; ├── BaseLocalDateTimeTest.sh│&nbsp;&nbsp; ├── BaseLocalTimeTest.sh│&nbsp;&nbsp; ├── BaseLockTest.sh│&nbsp;&nbsp; ├── BaseLogTest.sh│&nbsp;&nbsp; ├── BaseMapTest.sh│&nbsp;&nbsp; ├── BaseMathTest.sh│&nbsp;&nbsp; ├── BaseMiniTest.sh│&nbsp;&nbsp; ├── BaseObjectTest.sh│&nbsp;&nbsp; ├── BaseRandomTest.sh│&nbsp;&nbsp; ├── BaseStringTest.sh│&nbsp;&nbsp; ├── BaseTableGenTest.sh│&nbsp;&nbsp; ├── BaseTableTest.sh│&nbsp;&nbsp; ├── BaseThreadPoolExecutorTest.sh│&nbsp;&nbsp; ├── BaseThreadPoolTest.sh│&nbsp;&nbsp; ├── BaseUuidTest.sh│&nbsp;&nbsp; ├── TableDao.sh│&nbsp;&nbsp; └── table├── Utils                                #工具类│&nbsp;&nbsp; ├── BaseCodec.sh                        #编码工具│&nbsp;&nbsp; ├── BaseRandom.sh                       #随机数工具│&nbsp;&nbsp; └── BaseUuid.sh                         #Uuid工具├── Banner                               #项目头图├── BaseShellMini.sh                     #里面涵盖常用的最小工具包可单独导入使用减少项目依赖├── config.sh                            #项目配置文件├── init.sh                              #项目初始化脚本├── mini.sh                              #常用最小引入脚本└── readme.md                            #项目介绍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前还在完善当中。旨在简化shell脚本的编写、提高shell脚本的健壮性。丰富的脚本库可以大大减少shell脚本编写的难度，其类Java的实现方式可以使得面向对象范式的程序员很快的理解并使用。与之相配套的我会出一篇《Shell编程规约》,以期规范Shell脚本程序员的书写习惯。</p><h2 id="初始化项目"><a class="markdownIt-Anchor" href="#初始化项目"></a> 初始化项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">mkdir</span> shell <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> shell <span class="token comment">#新建一个script目录用于存放所有的脚本</span><span class="token function">git</span> clone https://github.com/chen-shang/BaseShell.git<span class="token function">sh</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/BaseShell/init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者 脚本后面跟着项目目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">mkdir</span> shell <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> shell <span class="token comment">#新建一个script目录用于存放所有的脚本</span><span class="token function">git</span> clone https://github.com/chen-shang/BaseShell.git<span class="token function">sh</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/BaseShell/init.sh com.base.shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示输入 project[项目目录] 或者 module[模块名称]<br>看到如下输出,则新建项目成功</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">&gt; sh $(pwd)/BaseShell/init.shproject[项目目录]:com.baseshell.learnmodule[模块名称]:Script./../../com.baseshell.learn├── BaseShell -&gt; /Users/chenshang/shell/BaseShell└── Script    ├── Resources    ├── Service    |&nbsp;&nbsp; └── Main.sh    ├── Test    ├── Utils    ├── config.sh    └── readme.md6 directories, 3 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行项目"><a class="markdownIt-Anchor" href="#运行项目"></a> 运行项目</h2><p>【强制】运行shell脚本要到脚本目录下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> com.baseshell.learn/Script/Controller<span class="token function">sh</span> Main.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到如下输出,说明项目运行ok,之后可以愉快的写脚本了</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal"> ____                 ____  _          _ _| __ )  __ _ ___  ___/ ___|| |__   ___| | ||  _ \ / _` / __|/ _ \___ \| '_ \ / _ \ | || |_) | (_| \__ \  __/___) | | | |  __/ | ||____/ \__,_|___/\___|____/|_| |_|\___|_|_|hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h1><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">./../../com.baseshell.learn                         项目目录├── BaseShell -&gt; /Users/chenshang/shell/BaseShell   BaseShell的源码软链└── Script                                          模块目录：一般建议大写,代表一个Shell模块,里面专门是针对某个模块儿的脚本    ├── Controller                                  控制层：可执行的对外的脚本建议写在这里    │&nbsp;&nbsp; └── Main.sh    ├── Service                                     业务层：项目相关脚本所在的文件,如果想要写一些辅助的脚本,建议与Service同级创建一个文件夹来写    │&nbsp;&nbsp; └── DemoService.sh    ├── Test                                        测试层：对脚本中的函数进行单元测试的脚本    │&nbsp;&nbsp; └── DemoServiceTest.sh    ├── Utils                                       工具层：工具类    ├── Enum                                        枚举层：枚举或常量    ├── Profile                                     环境层：生产环境还是测试环境    │&nbsp;&nbsp; ├── dev    │&nbsp;&nbsp; │&nbsp;&nbsp; └── application.sh    │&nbsp;&nbsp; └── prod    │&nbsp;&nbsp;     └── application.sh    ├── Resources                                   资源目录：资源目录: 一般放一些文本文件、图片、csv等非脚本文件    ├── config.sh                                   配置文件：项目的配置文件包括 头图、日志级别等以及一些项目中用到的配置项    └── readme.md                                   描述文件：项目名称、项目介绍等等6 directories, 3 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BaseShell相当于Java的JDK.<br>配置文件:<br>【推荐】<a href="http://config.sh">config.sh</a> 脚本中尽量只定义变量,不要定义函数或可执行命令,类比Java项目中的properties</p><h1 id="功能介绍"><a class="markdownIt-Anchor" href="#功能介绍"></a> 功能介绍</h1><p>脚本应该怎么写-示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># shellcheck disable=SC1091,SC2155</span><span class="token comment">#===============================================================</span><span class="token assign-left variable">import</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${<span class="token environment constant">BASH_SOURCE</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>"</span> .sh<span class="token variable">)</span></span>_<span class="token variable">$$</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token string">'$'</span><span class="token string">"<span class="token variable">${import}</span>"</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${import}</span>=0"</span><span class="token comment">#===============================================================</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseHeader.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/config.sh<span class="token comment">#导入工具包</span><span class="token comment">#===============================================================================</span><span class="token comment">#业务代码</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span><span class="token punctuation">}</span><span class="token comment">#===============================================================================</span><span class="token builtin class-name">source</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseEnd.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>解释器声明<br>对应上面示例脚本第一行 【推荐】首行写法 <code>#!/usr/bin/env bash</code></li><li>shellcheck 忽略<br>对应上面示例脚本第二行【强制】写好脚本后,使用shellcheck进行语法检查</li><li>防止循环引用代码段<br>对应上面示例脚本3-7行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#===============================================================</span><span class="token assign-left variable">import</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${<span class="token environment constant">BASH_SOURCE</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>"</span> .sh<span class="token variable">)</span></span>_<span class="token variable">$$</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token string">'$'</span><span class="token string">"<span class="token variable">${import}</span>"</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${import}</span>=0"</span><span class="token comment">#===============================================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的作用是为了预防 像 A脚本引用B脚本,B脚本又引用A脚本导致的循环引用问题。其原理是以文件名定义一个变量,引用过之后变量的值设置为0,再次引用的时候直接return,注意再次引用的时候是直接return不是exit. 详细用法,后面会有展开。<br>这段代码目前是我能想到的最精简的方式,不排除以后有更优的方案。</p><ol start="4"><li>引用各种工具类,类似于Java中的import</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#===============================================================</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseHeader.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/config.sh<span class="token comment">#导入工具包</span><span class="token comment">#===============================================================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用第三方脚本使用source命令,相当于Java的import关键字<br><code>source ./../../BaseShell/Starter/BaseHeader.sh</code>,<code>source ./../config.sh</code>这两个是必须要引用的,且放在所有引用的开头。<br><code>source ./../config.sh</code> 则是为了因为当前项目的配置文件,我们对项目的全局配置变量都在这里面定义<br><code>source ./../../BaseShell/Starter/BaseHeader.sh</code> 目的是引入BaseShell框架. 相当于引用下面四个包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Lang/BaseObject.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Log/BaseLog.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Annotation/BaseAnnotation.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Lang/BaseString.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>接下来是main入口函数和业务代码<br>【推荐】Controller包中的业务代码都推荐写入main</li><li>写在最后</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#===============================================================================</span><span class="token builtin class-name">source</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseEnd.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样直接执行脚本的时候,会先寻找脚本里面的main函数去执行,类似运行一个Java Class类中的main方法</p><h2 id="如何引用包"><a class="markdownIt-Anchor" href="#如何引用包"></a> 如何引用包</h2><p>我们规定项目目录最大深度为2层,也就是不允许在Service同级的目录下在创建目录然后在里面写脚本</p><p>引用包使用<code>source</code>命令,<code>source 第三方脚本</code>会使第三方脚本从头到尾加载一遍,遇到函数就加载函数、遇到变量就加载变量、遇到可执行的命令就会执行,这个命令其实就是把第三方脚本定义的函数、全局变量加载到当前脚本的上下文中</p><p>这里推荐使用相对路径,因为使用绝对路径,IDEA无法进行代码提示,也是醉了<br>示例<br>如果想引入日期相关的函数 <code>source ./../../BaseShell/Date/BaseLocalDate.sh</code><br>如果想引入文件相关的函数 <code>source ./../../BaseShell/File/BaseFile.sh</code></p><h2 id="如何查看工具包的使用文档"><a class="markdownIt-Anchor" href="#如何查看工具包的使用文档"></a> 如何查看工具包的使用文档</h2><p>通过使用<code>sh 脚本名称 -ha</code>或者<code>sh 脚本名称 ?a</code>可以快速查看BaseShell框架工具的使用api。使用 <code>sh 脚本名称 -ds 具体的函数</code> 可以查看指定函数的使用api.</p><center>  <img src="/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/api.gif"></center><h2 id="入参检查脚本annotation"><a class="markdownIt-Anchor" href="#入参检查脚本annotation"></a> 入参检查脚本【Annotation】</h2><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">.├── Annotation                         #入参检查脚本|&nbsp;&nbsp; └── BaseAnnotation.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认自动引入,此包下的工具是用来进行函数参数校验的,类似Spring中的Validate的功能。一旦参数校验没有通过则会终止函数的执行。 所有方法都是以 <code>_</code> 开头的,类似于Java中的<code>@</code>,曾想用@开头,但发现@在shell中属于特殊字符,不允许出现在函数命中,斟酌再三选择了<code>_</code></p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">表头</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">_NotBlank</td><td style="text-align:left">入参数不为空(空或空字符串)</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">_Natural</td><td style="text-align:left">入参数为自然数(0,1,2,3…)</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">_Min</td><td style="text-align:left">最大不得小于此最小值</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">_Max</td><td style="text-align:left">最大不得超过此最大值</td><td style="text-align:left">-</td></tr></tbody></table><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssh登录前检查</span><span class="token keyword">function</span> <span class="token function-name function">ssh_checkLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> _NotBlank <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"ip can not be null"</span> <span class="token operator">&amp;&amp;</span> _NotBlank <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token string">"port can not be null"</span> <span class="token operator">&amp;&amp;</span> _NotBlank <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token string">"user can not bull"</span> <span class="token operator">&amp;&amp;</span> _NotBlank <span class="token string">"<span class="token variable">$4</span>"</span> <span class="token string">"pass can not bull"</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token variable">$3</span> <span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">pass</span><span class="token operator">=</span><span class="token variable">$4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般函数的参数校验,我一般和函数也在一行上,第二行用具体的变量名接收参数。上面的函数如果有某个参数没有传,函数会异常退出,下面的代码也不会执行。</p><h2 id="集合工具脚本collection"><a class="markdownIt-Anchor" href="#集合工具脚本collection"></a> 集合工具脚本【Collection】</h2><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">├── Collection|&nbsp;&nbsp; ├── BaseArrayList.sh|&nbsp;&nbsp; ├── BaseHasMap.sh|&nbsp;&nbsp; └── BaseMap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认不自动引入,如要使用需单据引入 <code>source ./../../BaseShell/Collection/BaseArrayList.sh</code><br>此包下的工具是用来对 集合 和 Map 进行操作的。</p><h3 id="basearraylistsh"><a class="markdownIt-Anchor" href="#basearraylistsh"></a> <a href="http://BaseArrayList.sh">BaseArrayList.sh</a></h3><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">表头</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">new_arrayList</td><td style="text-align:left">新建一个list</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_add</td><td style="text-align:left">添加元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_set</td><td style="text-align:left">设置元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_removeByIndex</td><td style="text-align:left">按照下标移除元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_removeByValue</td><td style="text-align:left">按照值移除元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_get</td><td style="text-align:left">按照下标获取元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_forEach</td><td style="text-align:left">对列表中的每一个元素都进行操作</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_size</td><td style="text-align:left">获取当前list的元素个数</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_isEmpty</td><td style="text-align:left">判断当前list是否为空</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_contains</td><td style="text-align:left">判断当前list是否包含某元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_clear</td><td style="text-align:left">清空当前list</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_indexOf</td><td style="text-align:left">获取指定元素的下标</td><td style="text-align:left">从前往后第一个</td></tr><tr><td style="text-align:left">list_lastIndexOf</td><td style="text-align:left">获取指定元素的下标</td><td style="text-align:left">从后往前第一个</td></tr><tr><td style="text-align:left">list_sub</td><td style="text-align:left">截取指定下标的元素</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_copy</td><td style="text-align:left">赋值一个新的数组</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_values</td><td style="text-align:left">获取元素的值列表</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_mapper</td><td style="text-align:left">最每一个元素进行操作并返回一个新的列表</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">list_reducer</td><td style="text-align:left">聚类操作</td><td style="text-align:left">-</td></tr></tbody></table><p>详细用法请参考对应的单元测试类 <a href="http://BaseArrayListTest.sh">BaseArrayListTest.sh</a>、<a href="http://BaseMapTest.sh">BaseMapTest.sh</a></p><h2 id="日志工具log"><a class="markdownIt-Anchor" href="#日志工具log"></a> 日志工具【Log】</h2><h3 id="如何引入"><a class="markdownIt-Anchor" href="#如何引入"></a> 如何引入</h3><p>首先使用 <code>source ./../../BaseShell/Starter/BaseHeader.sh</code> 默认会自动引入Log框架<code>source ./../../BaseShell/Log/BaseLog.sh</code> 无需额外手动引入</p><h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h3><p>Log 包里面有8个方法</p><table><thead><tr><th>方法</th><th>配置文件配置</th><th>说明</th></tr></thead><tbody><tr><td>log_debug</td><td>LOG_LEVEL=DEBUG</td><td>打印DEBUG级别的日志</td></tr><tr><td>log_info</td><td>LOG_LEVEL=INFO</td><td>打印INFO级别的日志,输出颜色为白色</td></tr><tr><td>log_success</td><td>LOG_LEVEL=INFO</td><td>打印INFO级别的日志,输出颜色为绿色</td></tr><tr><td>log_fail</td><td>LOG_LEVEL=INFO</td><td>打印INFO级别的日志,输出颜色为红色,并退出当前进程</td></tr><tr><td>log_warn</td><td>LOG_LEVEL=WARN</td><td>打印WARN级别的日志,输出颜色为灰色</td></tr><tr><td>log_error</td><td>LOG_LEVEL=ERROR</td><td>打印ERROR级别的日志,输出颜色为红色</td></tr><tr><td>log_system</td><td>LOG_LEVEL=SYSTEM</td><td>打印SYSTEM级别的日志,输出颜色为白色,是BaseShell使用的日志输出格式</td></tr><tr><td>log_trace</td><td></td><td>只会记录日志到文件,不会打印到控制台</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 支持固定文本</span>log_debug <span class="token string">"要记录的日志内容"</span><span class="token comment"># 支持字符串插值</span>log_debug <span class="token string">"要记录的日志内容. key=<span class="token variable">${key}</span>,value=<span class="token variable">${value}</span>"</span><span class="token comment"># 支持多参数</span>log_debug <span class="token string">"要记录的日志内容."</span> <span class="token string">"1=<span class="token variable">$1</span>"</span> <span class="token string">"2=<span class="token variable">$2</span>"</span><span class="token comment"># 支持函数</span>log_debug <span class="token string">"要记录的日志内容."</span> <span class="token string">"now=<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span> <span class="token string">"index=<span class="token variable"><span class="token variable">$((</span>i<span class="token operator">++</span><span class="token variable">))</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认配置"><a class="markdownIt-Anchor" href="#默认配置"></a> 默认配置</h3><p>两个系统默认配置,在 <code>config.sh</code> 配置文件中,用户可根据自己的意愿在自己的项目目录下修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 日志记录位置</span><span class="token assign-left variable">LOG_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${<span class="token environment constant">HOME</span>}</span>/.baseshell"</span><span class="token comment"># 日志级别</span><span class="token assign-left variable">LOG_LEVEL</span><span class="token operator">=</span>SYSTEM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出示例"><a class="markdownIt-Anchor" href="#输出示例"></a> 输出示例</h3><p>执行Test下的测试用例,输出如下</p><center>  <img src="/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/log.jpg"></center>### 使用示例<center>  <img src="/2019/08/28/linux/baseshell/baseshell-shi-yong-jiao-cheng/Log.gif"></center><p>未完待续。。。明天再写</p><h2 id="并发工具concurrent"><a class="markdownIt-Anchor" href="#并发工具concurrent"></a> 并发工具【Concurrent】</h2><h2 id="锁concurrent"><a class="markdownIt-Anchor" href="#锁concurrent"></a> 锁【Concurrent】</h2><h2 id="object工具lang"><a class="markdownIt-Anchor" href="#object工具lang"></a> Object工具【Lang】</h2><h2 id="数学工具lang"><a class="markdownIt-Anchor" href="#数学工具lang"></a> 数学工具【Lang】</h2><h2 id="常量constant"><a class="markdownIt-Anchor" href="#常量constant"></a> 常量【Constant】</h2><h2 id="字符串工具lang"><a class="markdownIt-Anchor" href="#字符串工具lang"></a> 字符串工具【Lang】</h2><h2 id="sshssh"><a class="markdownIt-Anchor" href="#sshssh"></a> SSH【Ssh】</h2><h2 id="starter包starter"><a class="markdownIt-Anchor" href="#starter包starter"></a> Starter包【Starter】</h2><h2 id="工具包utils"><a class="markdownIt-Anchor" href="#工具包utils"></a> 工具包【Utils】</h2><h2 id="测试utils"><a class="markdownIt-Anchor" href="#测试utils"></a> 测试【Utils】</h2><p>单元测试的写法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># shellcheck disable=SC1091,SC2155</span><span class="token comment">#===============================================================</span><span class="token comment"># 第一步:引入测试工具包头部</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseTestHeader.sh<span class="token comment">#===============================================================</span><span class="token comment"># 第二步:引入待测试的工具类</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Annotation/BaseAnnotation.sh<span class="token comment">#===============================================================</span><span class="token comment"># 第三步:开始针对某个函数系写单元测试</span><span class="token comment"># 例如</span><span class="token function-name function">test-_Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _Min <span class="token string">"2"</span> <span class="token string">"3"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertTrue <span class="token string">"<span class="token variable">$?</span>"</span>  _Min <span class="token string">"2"</span> <span class="token string">"1"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertFalse <span class="token string">"<span class="token variable">$?</span>"</span>  _Min <span class="token string">"2"</span> <span class="token string">"2"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertFalse <span class="token string">"<span class="token variable">$?</span>"</span><span class="token punctuation">}</span><span class="token comment">#===============================================================</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseTestEnd.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步:引入测试工具包头部</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseTestHeader.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步:引入待测试的工具类</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Annotation/BaseAnnotation.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步:开始针对某个函数系写单元测试. 我们开始测试脚本中的 <code>_Min</code> 函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 例如</span><span class="token function-name function">test-_Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _Min <span class="token string">"2"</span> <span class="token string">"3"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertTrue <span class="token string">"<span class="token variable">$?</span>"</span>  _Min <span class="token string">"2"</span> <span class="token string">"1"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertFalse <span class="token string">"<span class="token variable">$?</span>"</span>  _Min <span class="token string">"2"</span> <span class="token string">"2"</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>  assertFalse <span class="token string">"<span class="token variable">$?</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定<br>【强制】单元测试函数以 test- 开头<br>【强制】若想跳过某个单元测试，可以在函数后面打上 <code>#ignore</code> 标记</p><p>我们使用 <code>assert</code> 系列函数对我们的预期结果进行判断。我们看一下 <a href="http://BaseTestHeader.sh">BaseTestHeader.sh</a> 脚本中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># shellcheck disable=SC1091,SC2155</span><span class="token comment">#===============================================================</span><span class="token assign-left variable">import</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${<span class="token environment constant">BASH_SOURCE</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>"</span> .sh<span class="token variable">)</span></span>_<span class="token variable">$$</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token string">'$'</span><span class="token string">"<span class="token variable">${import}</span>"</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">${import}</span>=0"</span><span class="token comment">#===============================================================</span><span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/config.sh<span class="token builtin class-name">source</span> ./<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/BaseShell/Starter/BaseStarter.sh<span class="token comment">#===============================================================================</span><span class="token comment"># 这种没有实现的函数类似接口,在对应的xxEnd.sh中必有实现</span><span class="token keyword">function</span> <span class="token function-name function">assertEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sourceValue</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#测试结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">targetValue</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token comment">#预期结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token variable">$3</span> <span class="token comment">#描述</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">assertNotBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sourceValue</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#测试结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">targetValue</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token comment">#预期结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token variable">$3</span> <span class="token comment">#描述</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">assertBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sourceValue</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#测试结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">targetValue</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token comment">#预期结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token variable">$3</span> <span class="token comment">#描述</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">assertTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sourceValue</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#测试结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token comment">#描述</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">assertFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sourceValue</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment">#测试结果</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token variable">$2</span> <span class="token comment">#描述</span><span class="token punctuation">}</span><span class="token function-name function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">:</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面有很多函数只有名字没有实现。这样做的目的其实是为了先定义函数,然后可以很好的利用idea的代码提示功能。那必然有实现，实现在 <code>source ./../../BaseShell/Starter/BaseTestEnd.sh</code> 里面，这也就是为甚么单元测试的相关函数要写到 start 和 end 之间的缘故。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BaseShell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> BaseShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell获取当前函数名称</title>
      <link href="/2019/08/26/linux/shell/shell-huo-qu-dang-qian-han-shu-ming-cheng/"/>
      <url>/2019/08/26/linux/shell/shell-huo-qu-dang-qian-han-shu-ming-cheng/</url>
      
        <content type="html"><![CDATA[<p>在Bash中,有这样一个常量FUNCNAME,它是一个数组而非字符串,其中数组的第一个元素为当前函数的名称。FUNCNAME是一个数组，bash中会将它维护成类似一个堆栈的形式。</p><p>运行下面的函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token keyword">function</span> <span class="token function-name function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token variable">${FUNCNAME<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  fun2<span class="token punctuation">}</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  fun1<span class="token punctuation">}</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果是</p><pre class="line-numbers language-none"><code class="language-none">fun2 fun1 main main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由此可见 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>F</mi><mi>U</mi><mi>N</mi><mi>C</mi><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><mtext>是当前函数的名字。</mtext></mrow><annotation encoding="application/x-tex">{FUNCNAME[0]} 是当前函数的名字。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">。</span></span></span></span>{FUNCNAME[1]} 则是调用它的函数的名字</p><p>我们可以这样利用这个变量,我们写一个统一的日志服务函数,打印日志的时候顺便打印一下是哪个方法打印的日志。如下</p><pre class="line-numbers language-none"><code class="language-none"># debug级别的日志 []&lt;-(msg:String)function log_debug(){  echo -e "[$(date +%Y-%m-%dT%H:%M:%S)][$$ $BASHPID][${FUNCNAME[1]}] [DEBUG]:   $*"|trim 1&gt;&amp;2  echo -e "[$(date +%Y-%m-%dT%H:%M:%S)][$$ $BASHPID][${FUNCNAME[1]}] [DEBUG]:   $*"|trim &gt;&gt; "${LOG_DIR}/$(date +%Y-%m-%d).debug.log" 2&gt;&amp;1  echo -e "[$(date +%Y-%m-%dT%H:%M:%S)][$$ $BASHPID][${FUNCNAME[1]}] [DEBUG]:   $*"|trim &gt;&gt; "${LOG_DIR}/$(date +%Y-%m-%d).log" 2&gt;&amp;1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本中调用 log_debug 函数</p><pre class="line-numbers language-none"><code class="language-none">function sum(){  local sum=$(($1+$2))  log_info "所有数之和是:${sum}"  echo "${sum}"}main(){  sum 1 2}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果是</p><pre class="line-numbers language-none"><code class="language-none">[2019-08-26T22:58:20][62045 62077][sum] [INFO]:    所有数之和是:3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就能很方便的知道日志是哪个方法调用的了!还是很方便的</p><p><font color="red"> 注意:这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。</font></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-lsof</title>
      <link href="/2019/08/25/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-lsof/"/>
      <url>/2019/08/25/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-lsof/</url>
      
        <content type="html"><![CDATA[<h1 id="qa-查看当前进程所有打开的文件"><a class="markdownIt-Anchor" href="#qa-查看当前进程所有打开的文件"></a> QA 查看当前进程所有打开的文件</h1><p><code>lsof -p $$</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-less</title>
      <link href="/2019/08/23/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-less/"/>
      <url>/2019/08/23/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-less/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> 基本用法</h2><p>和大多数命令一样,less的一般用法<br>less [参数] 文件名…</p><h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2><p>直接输入 q 退出</p><h2 id="qa"><a class="markdownIt-Anchor" href="#qa"></a> QA</h2><ol><li>带颜色文件如何显示?<br>例如 ESC[32m[2019-08-22T20:34:06][60217 60295][SUCCESS]: test ok[100%],hit [TRUE]ESC[0m 这行文本中 ESC[32m 和 ESC[0m 中间包裹的字在linux中应该表示绿色</li></ol><blockquote><p>用 less -r 文件名 的方式查看</p></blockquote><ol start="2"><li>如何浏览多文件?如何切换?<br>例如我们查看日志文件的时候,不确定信息打印到了 error.log 还是 info.log 的时候,我们一般打开两个文件,现在一个文件里面搜索,在到另一个文件里面搜索。<br>或者两个文件都有我们关心的日志的时候,我么可能来回两个文件一起查看或对比查看来排查问题</li></ol><blockquote><p>用 less [参数] 文件1 文件2 的方式查看<br>输入 :n 浏览下一文件<br>输入 :p 浏览上一文件</p></blockquote><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端各种尺寸单位</title>
      <link href="/2019/08/22/qian-duan/qian-duan-ge-chong-chi-cun-dan-wei/"/>
      <url>/2019/08/22/qian-duan/qian-duan-ge-chong-chi-cun-dan-wei/</url>
      
        <content type="html"><![CDATA[<h2 id="em"><a class="markdownIt-Anchor" href="#em"></a> em</h2><p>在做手机端的时候经常会用到的做字体的尺寸单位</p><p>说白了 em就相当于“倍”，比如设置当前的div的字体大小为1.5em，则当前的div的字体大小为：当前div继承的字体大小*1.5</p><p>但是当div进行嵌套的时候，em始终是按照当前div继承的字体大小来缩放，参照后面的例子。</p><h2 id="rem"><a class="markdownIt-Anchor" href="#rem"></a> rem</h2><p>这里的r就是root的意思，意思是相对于根节点来进行缩放，当有嵌套关系的时候，嵌套关系的元素的字体大小始终按照根节点的字体大小进行缩放。</p><h2 id="vh"><a class="markdownIt-Anchor" href="#vh"></a> vh</h2><p>vh就是当前屏幕可见高度的1%，也就是说<code>height:100vh == height:100%;</code><br>但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，但是设置height:100vh，该元素会被撑开屏幕高度一致。</p><h2 id="vw"><a class="markdownIt-Anchor" href="#vw"></a> vw</h2><p>vw就是当前屏幕宽度的1%<br>补充一句，当设置<code>width:100%</code>，被设置元素的宽度是按照父元素的宽度来设置，但是100vw是相对于屏幕可见宽度来设置的，所以会出现50vw 比50%大的情况</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程规约</title>
      <link href="/2019/08/20/linux/shell/shell-bian-cheng-gui-yue/"/>
      <url>/2019/08/20/linux/shell/shell-bian-cheng-gui-yue/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-text" data-language="text"><code class="language-text"> ____                      _          _ _| __ )  __ _ ___  ___  ___| |__   ___| | ||  _ \ / _` / __|/ _ \/ __| '_ \ / _ \ | || |_) | (_| \__ \  __/\__ \ | | |  __/ | ||____/ \__,_|___/\___||___/_| |_|\___|_|_|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="首条规约"><a class="markdownIt-Anchor" href="#首条规约"></a> 首条规约</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】Linux 工具的使用不必死记硬背,不必死记硬背,不必死记硬背,即查即用即可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="运行方式"><a class="markdownIt-Anchor" href="#运行方式"></a> 运行方式</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】脚本均以`.sh`结尾正例:BaseLog.sh、init.sh说明:以`.sh`结尾,使人可以一目了然知道该文件是脚本文件,而且用的解析器是sh或bash【强制】脚本执行明确指定具体解析器正例: #!/bin/bash 、#!/usr/bin/bash、#!/usr/bin/env bash说明: 参考首行规约,这样可以不用每个文件都单独赋予可执行权限【强制】脚本执行要到脚本所在目录下执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="命名风格"><a class="markdownIt-Anchor" href="#命名风格"></a> 命名风格</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】脚本中变量、函数、文件的命名均不能以数字、下划线、$开头,也不能以下划线或者$结尾反例: _name / __name / $name / name_ / name$ / 5name说明: $作为Shell语言的取值符号,其他命名约束参考Java规约。【强制】代码中的命名严禁使用拼音与英文混合的方式,更不允许直接使用中文的方式。正例:alibaba / taobao / youku / hangzhou 等国际通用的名称,可视同英文。说明:正确的英文拼写和语法可以让阅读者易于理解,避免歧义。注意,即使纯拼音命名方式 也要避免采用。【强制】参数名、局部变量都统一使用 lowerCamelCase 风格,必须遵从 驼峰形式。正例: localValue / errMsg / userName【推荐】使用下划线分割函数命名,都统一使用 lowerCamelCase 风格,必须遵从 驼峰形式。正例:getUserName() / log_info() / map_add()说明: 纯用下划线会使得命名很长,纯用驼峰又无法将函数聚类get_user_english_name()  vs getUserEnglishName()log_info() vs logInfo()map_add() vs mapAdd()log_info "xxx" 在调用的时候类比于Java 的 log.info("xxx")【强制】文件名 UpperCamelCase 风格,首字母大写的驼峰形式正例:BaseLog.sh / BaseString.sh说明:类比Java的类,我们把相同功能的函数抽象到一个脚本文件中,留待后续其他脚本引用。随着我们写的脚本日渐增多我们很有必要分门别类的将它们聚集到一个文本文件中,一是方便后续查阅,而是方便后续调用【强制】常量命名全部大写,单词间用下划线隔开,力求语义表达完整清楚,不要嫌名字长。正例:MAX_STOCK_COUNT 反例:MAX_COUNT【推荐】文件夹名字统一大写或者统一小写,推荐大写【强制】文件名以 .sh 结尾【强制】使用两个空格进行缩进,不适用tab缩进【推荐】不在一行的时候使用 `\` 进行换行,使用 `\` 换行的原则是整齐美观<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于首行"><a class="markdownIt-Anchor" href="#关于首行"></a> 关于首行</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【推荐】推荐使用 `#!/usr/bin/env bash` 作为 shebang说明: 提高脚本的可以执性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="关于数组"><a class="markdownIt-Anchor" href="#关于数组"></a> 关于数组</h1><p>本Shell规约规定</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【强制】传递数组使用 <span class="token string">"<span class="token variable">${list<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span> 形式【强制】接收数组使用 <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$*</span><span class="token punctuation">)</span> 形式正例:<span class="token comment"># @return the number of elements in this list</span><span class="token keyword">function</span> <span class="token function-name function">list_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable">${\<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${size}</span>"</span><span class="token punctuation">}</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>list_size <span class="token string">"<span class="token variable">${list<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>"</span><span class="token variable">)</span></span>assertEquals <span class="token string">"<span class="token variable">${size}</span>"</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于变量"><a class="markdownIt-Anchor" href="#关于变量"></a> 关于变量</h1><p>本shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【推荐】不要定义与环境变量重名的局部变量,会改变环境变量的值,进而影响后续脚本的执行。【推荐】如果要打破上一个推荐,修改后及时修改回来。例如 IFS 代表分隔符的情况。【强制】变量名和等号之间不能有空格,这可能和你熟悉的所有编程语言都不一样。【强制】变量取值用 "${}", 使用 {} 包裹,给所有变量加上花括号,防止产生歧义【强制】变量取值用 "${}", 使用 "" 包裹,防止分词【强制】若需要将调用的函数的返回结果赋值给local变量,使用 $(),不推荐使用 ``【推荐】能缩小变量作用域的就缩小变量的作用域,也就是能用local的就用local修饰【强制】认定为常量的必须用readonly修饰,相当于 Java 中的final【推荐】删除变量能不用就不用,一般没什么应用场景<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于函数"><a class="markdownIt-Anchor" href="#关于函数"></a> 关于函数</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】函数需有注释标识该函数的用途、入参变量、函数的返回值类型【强制】函数的注释 `#` 顶格写, 井号后面紧跟一个空格,对于该格式的要求是为了最后生成函数的帮助文档是用的(markdown语法),然后是注释的内容,注释尽量简短且在一行,最后跟的是函数的类型。【强制】函数内注释 `#` 与缩进格式对整齐【强制】变量的注释紧跟在变量的后面,不推荐换行写注释【强制】在函数内部首先使用有意义的变量名接受参数,然后在使用这些变量进行操作,禁止直接操作$1,$2等,除非这些变量只用一次【推荐】不推荐使用return方式返回,推荐使用echo方式返回结果【推荐】返回结果类型是Boolean类型,也就是说函数的功能是起判断作用,返回结果是真或者假的时候使用才显示 return 返回结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于注释"><a class="markdownIt-Anchor" href="#关于注释"></a> 关于注释</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】认定为常函数的必须用readonly修饰,相当于 Java 中的final。【推荐】使用关键字 `function` 显示定义的函数为 public 的函数,可以供 外部脚本以 `sh 脚本 函数 函数入参` 的形式调用,可以认为成Java当中的public的方法【推荐】未使用关键字 `function` 显示定义的函数为 private 的函数, 仅供本脚本内部调用,可以认为成Java中的私有方法,注意这种private是人为规定的,并不是Shell的语法,不推荐以 `sh 脚本 函数 函数入参` 的形式调用,注意是不推荐而不是不能。【强制】将函数分门别类保存在不同的脚本中【推荐】使用source的方式引入另一个脚本中的函数,不推荐使用`脚本 函数名 函数参数`的形式调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:本Shell规约这样做的目的就在于使脚本具有一定的封装性,看到 <code>function</code> 修饰的就知道这个函数能被外部调用, 没有被修饰的函数就仅供内部调用。你就知道如果你修改的函数的影响范围. 如果是 被function 修饰的函数,修改后可能影响到外部调用他的脚本, 而修改未被function修饰的函数的时候,仅仅影响本文件中其他函数。</p><h1 id="关于分支"><a class="markdownIt-Anchor" href="#关于分支"></a> 关于分支</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HEAD_KEYWORD parameters<span class="token punctuation">;</span> BODY_BEGIN  BODY_COMMANDSBODY_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【强制】将HEAD_KEYWORD和初始化命令或者参数放在第一行；【强制】将BODY_BEGIN同样放在第一行；【强制】复合命令中的BODY部分以2个空格缩进；【强制】BODY_END部分独立一行放在最后；【推荐】parameters部分test表达式变量取值都用""包裹；【推荐】parameters部分test表达式统一使用=等符号, 在明确是数字的时候可以使用 -eq等参数；【强制】if\while\until 后面的判断 使用 双中括号`[[]]`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于数学计算"><a class="markdownIt-Anchor" href="#关于数学计算"></a> 关于数学计算</h1><p>本Shell规约规定</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">【推荐】明确知道变量是整数,计算使用$(())包裹计算,(())内对变量的操作不用$取值正确 a=$((1+1))反例 a=$(($a++))【推荐】复杂计算使用bc计算器,前提是得安装bc计算器命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">【推荐】建议写单元测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>未完待续,明天再写</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>药引</title>
      <link href="/2019/08/20/mo-xiang-zhi-jian/wo-de-shi-ci/yao-yin/"/>
      <url>/2019/08/20/mo-xiang-zhi-jian/wo-de-shi-ci/yao-yin/</url>
      
        <content type="html"><![CDATA[<p>知母两三钱,慈姑攎一捻<br>相思差一味,名字叫当归</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-matery主题优化</title>
      <link href="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/"/>
      <url>/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/</url>
      
        <content type="html"><![CDATA[<p>基于hexo-theme-matery做的个性化美化,仅代表个人审美,我们先来看几个效果截图</p><center>  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/1.jpg" width="100%"></center><center>  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/2.jpeg" width="20%" align="left">  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/3.jpeg" width="20%" align="left">  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/4.jpeg" width="20%" align="left">  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/5.jpeg" width="20%" align="left">  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/6.jpeg" width="20%"></center><h2 id="页面配色"><a class="markdownIt-Anchor" href="#页面配色"></a> 页面配色</h2><p>修改顶部导航栏颜色,底部状态栏颜色,顶部导航栏右上角github图标颜色<br>hexo-theme-matery原来主题Banner头图都是偏紫色系,因此个人觉得原来主题顶部和底部的绿色状态来显示的很突兀.对比如下:</p><center>  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-141343.jpg" width="49%" align="left">  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-141733.jpg" width="49%"></center><p>查找方法基本就是打开chrome浏览器的检查,选择想要查看的页面元素,然后看他的Style文件,找到关键词之后去hexo-theme-matery主题的css文件中查找后修改即可,这个基本没什么难度。</p><center>  <img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/css.jpg" width="80%"></center><p>打开 <code>matery/source/css/matery.css</code> 文件 搜索 <code>.bg-color</code> 大概在198行<br>修改<code>background-image</code>属性中<code>linear-gradient</code>内的值即可改成你自己想要的颜色</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span>#623AA2 0%<span class="token punctuation">,</span>#F97794 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后顶部导航栏颜色,底部状态栏颜色都会改变了</p><p>然后是github右上角的角标。这个通过浏览器搜索可以定位到标签,但在 <code>matery.css</code> 内却找不到关于颜色的标签控制器。因此推断,这个地方的颜色控制没有写在该文件中,理由是因为这个是个性化的配置,而<code>matery.csw</code>这个文件主打的是全局配置,一般多个地方都会用到的样式才会写到这里,因此需要去读源码了。我们先看看 <code>layout</code>中</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ ls_partial       about.ejs      categories.ejs friends.ejs    gallery.ejs    layout.ejs     tag.ejs_widget        archive.ejs    category.ejs   galleries.ejs  index.ejs      post.ejs       tags.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>貌似没有相关的,再看看 <code>_partial</code> 目录下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ lsback-top.ejs           gitalk.ejs             header.ejs             paging.ejs             prev-next.ejs          social-link-simple.ejsbg-cover-content.ejs   github-link.ejs        index-cover.ejs        post-cover.ejs         reprint-statement.ejs  social-link.ejsbg-cover.ejs           gitment.ejs            livere.ejs             post-detail-toc.ejs    reward.ejs             valine.ejsdisqus.ejs             google-analytics.ejs   mobile-nav.ejs         post-detail.ejs        search.ejsfooter.ejs             head.ejs               navigation.ejs         post-statis.ejs        share.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个与github相关的 <code>github-link.ejs</code>,打开查看发现原来配置就在这里,第15行左右</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.github-corner svg</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #F062A7<span class="token punctuation">;</span>    <span class="token property">fill</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们修改 <code>color</code> 的属性值就可以随心所欲的改变github角标的颜色。</p><h2 id="主题中跳转连接都指向自己的github"><a class="markdownIt-Anchor" href="#主题中跳转连接都指向自己的github"></a> 主题中跳转连接都指向自己的github</h2><p>这个在主题的配置文件中</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># Whether to display fork me on github icon and link, default true, You can change it to your repo address # 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址. githubLink:   enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>网站底部还有一部分连接</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">-------------------------- layout/_partial/footer.ejs --------------------------index 8b051a7..1630d35 100755@@ -1,12 +1,7 @@ &lt;footer class="page-footer bg-color"&gt;     &lt;div class="container row center-align"&gt;         &lt;div class="col s12 m8 l8 copy-right"&gt;-            Copyright&amp;nbsp;&amp;copy;-            &lt;span id="year"&gt;年份&lt;/span&gt;-            &lt;a href="&lt;%- config.url %&gt;" target="_blank"&gt;&lt;%- config.author %&gt;&lt;/a&gt;-            |&amp;nbsp;Powered by&amp;nbsp;&lt;a href="https://hexo.io/" target="_blank"&gt;Hexo&lt;/a&gt;-            |&amp;nbsp;Theme&amp;nbsp;&lt;a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank"&gt;Matery&lt;/a&gt;-            &lt;br&gt;+            &amp;nbsp;&amp;copy;&lt;span id="year"&gt;2019&lt;/span&gt;             &lt;% if (theme.wordCount.totalCount) { %&gt;             &amp;nbsp;&lt;i class="fas fa-chart-area"&gt;&lt;/i&gt;&amp;nbsp;站点总字数:&amp;nbsp;&lt;span                 class="white-color"&gt;&lt;%= totalcount(site) %&gt;&lt;/span&gt;&amp;nbsp;字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景图-头图-轮播图-头像-站点图标都替换成自己喜欢的"><a class="markdownIt-Anchor" href="#背景图-头图-轮播图-头像-站点图标都替换成自己喜欢的"></a> 背景图、头图、轮播图、头像、站点图标都替换成自己喜欢的</h2><p>这个在<code>themes/matery/source/medias</code>目录下面,找到图标替换成同名的即可。<br>轮播图的位置在 <code>themes/matery/source/medias/banner</code> 只用放七张就好,代码逻辑是每天换一</p><h2 id="去掉wordcloud功能"><a class="markdownIt-Anchor" href="#去掉wordcloud功能"></a> 去掉wordcloud功能</h2><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-144050.jpg" width="100%"><p>修改 layout/tags.ejs 内容为如下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-cloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/tag-wordcloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/tag-cloud'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-radar'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/post-charts'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其目的是把标签、分类两个页面合二唯一,将所有关于文件分类统计的内容都放到标签页面，这样可以省出一个标签的位置来，顶部导航栏也不会太拥挤,效果如下<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-152930.jpg" width="100%"></p><h2 id="添加百度统计"><a class="markdownIt-Anchor" href="#添加百度统计"></a> 添加百度统计</h2><p>添加百度统计可以看到自己网站的访问情况等等<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-144425.jpg" width="100%"><br>先去注册个百度统计账号，然后管理-代码管理里面可以看到安装方法<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-144711.jpg" width="100%"><br>同时在底部添加一个超链接可以直接连接到百度云统计,这样很方便的可以查看自己网站的访问情况<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-151007.jpg" width="100%"></p><h2 id="自适应屏幕的时候字体大小"><a class="markdownIt-Anchor" href="#自适应屏幕的时候字体大小"></a> 自适应屏幕的时候字体大小</h2><p>修改<code>matery/source/css/matery.css</code>,这样在手机等小屏幕上显示的字体大小就正常了,否则会因为标题字太长导致换行<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/wron.jpg" width="100%"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">---------------------------- source/css/matery.css ----------------------------<span class="token comment">/*全局基础样式*/</span><span class="token comment">/*小屏幕下(手机类)的样式*/</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 95%<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">header .brand-logo .logo-span</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.bg-cover .title</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 1.85em<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*中等屏幕下(平板类)的样式*/</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">header .brand-logo .logo-span</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.bg-cover .title</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 1.85em<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*大屏幕下(桌面类)的样式*/</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 993px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span>        <span class="token property">max-width</span><span class="token punctuation">:</span> 1125px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.post-container</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token property">max-width</span><span class="token punctuation">:</span> 1250px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">header .brand-logo .logo-span</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.bg-cover .title</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 1.85em<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="每一一言"><a class="markdownIt-Anchor" href="#每一一言"></a> 每一一言</h2><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-151408.jpg" width="100%">上面 嗷呜 下的内容是动态生成的，增加网站的趣味性<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">--------------------------- layout/_widget/dream.ejs ---------------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col l8 offset-l2 m10 offset-m1 s10 offset-s1 center-align text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hitokoto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%- theme.dream.text %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="每日诗词"><a class="markdownIt-Anchor" href="#每日诗词"></a> 每日诗词</h2><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-151909.jpg" width="100%"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">--------------------- layout/_partial/bg-cover-content.ejs ---------------------index c7d1b7f..121716f 100755@@ -11,18 +11,8 @@             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                 &lt;% if (theme.subtitle.enable) { %&gt;-                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subtitle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>-                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/typed.js@2.0.11<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>-                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token operator">-</span>                    <span class="token keyword">var</span> typed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typed</span><span class="token punctuation">(</span><span class="token string">"#subtitle"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span>                        strings<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'&lt;%= theme.subtitle.sub1 %&gt;'</span><span class="token punctuation">,</span><span class="token string">'&lt;%= theme.subtitle.sub2 %&gt;'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>                        startDelay<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>startDelay <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">-</span>                        typeSpeed<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>typeSpeed <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">-</span>                        loop<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>loop <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">-</span>                        backSpeed<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>backSpeed <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">-</span>                        showCursor<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>showCursor <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">-</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span>                </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>+     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jinrishici-sentence<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= config.description %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>+                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://sdk.jinrishici.com/v2/browser/jinrishici.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>                 &lt;% } else { %&gt;                 &lt;%= config.description %&gt;                 &lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加文章显示作者名字"><a class="markdownIt-Anchor" href="#添加文章显示作者名字"></a> 添加文章显示作者名字</h2><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/Jietu20191116-152321.jpg" width="100%"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---------------------- layout/_partial/post-detail.ejs -----------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info-break-policy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    &lt;% if (page.author &amp;&amp; page.author.length &gt; 0) { %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-pencil<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 作者: &lt;%- page.author %&gt;     &lt;% } else { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-pencil<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 作者: &lt;%- config.author %&gt;    &lt;% } %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动生成分类"><a class="markdownIt-Anchor" href="#自动生成分类"></a> 自动生成分类</h2><p><code>hexo-enchancer</code> 无法配置生成的目录深度,所以选择了 <code>hexo-auto-category</code> 使用教程参考: <a href="https://blog.eson.org/pub/e2f6e239/">https://blog.eson.org/pub/e2f6e239/</a></p><h2 id="关于页面优化"><a class="markdownIt-Anchor" href="#关于页面优化"></a> 关于页面优化</h2><p><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.25.47.jpg" alt=""></p><p>第一步: 找到 layout/_widget/post-charts.ejs<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.28.55.jpg" alt="找到 layout/_widget/post-charts.ejs"><br>第二步：去掉 tags-chart 相关的代码<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.35.52.jpg" alt="注释掉代码"><br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.34.12.jpg" alt="注释掉代码"><br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.34.45.jpg" alt="注释掉代码"></p><p>最终的效果<br><img src="/2019/08/15/gong-ju-kong/hexo/hexo-theme-matery-zhu-ti-you-hua/iShot_2023-09-05_23.37.19.jpg" alt="最终的效果"></p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala Vs Java</title>
      <link href="/2019/08/14/scala/scala-jiang-yi/"/>
      <url>/2019/08/14/scala/scala-jiang-yi/</url>
      
        <content type="html"><![CDATA[<p>现在的项目虽然都转到 java 来了，但旧的项目hyperloop、space-core依然在使用 scala 维护，这篇讲义只讲scala的简单使用，目的是使各位新来的同事能够首先看懂程序，因为 scala 有的语法对于之前使用习惯了 java 的人来说还是比较晦涩的。</p><p>网上对 scala 的介绍很多，都说从 java 转到 scala 很容易，我觉得说这句话的人90%都没有认真写过 scala 代码。</p><p>Scala like Java ，scala 和 java 很像，我总结下来 scala = java ++ --, Scala 等于 Java 加加减减</p><h1 id="scala-介绍与安装"><a class="markdownIt-Anchor" href="#scala-介绍与安装"></a> scala 介绍与安装</h1><h4 id="这个-体现在"><a class="markdownIt-Anchor" href="#这个-体现在"></a> 这个 ++ 体现在</h4><div width="100%" style="overflow:hidden">    <div style="float:left; width:49%;"><p style="font-size: 20px">Scala</p> 1. Fp(Function programming) 函数编程<br> 2. Future 对异步任务的处理<br> 3. Option 规避 null 指针异常<br> 4. Tuple 元组 返回自由的对象组合<br> 5. 以及无处不在的模式匹配<br> 6. Trait 混入<br>  ...    </div>    <div style="float:right; width:50%;"><p style="font-size: 20px">Java8</p> 1. Java8 则加入了 lamda &amp; stream api &amp; 函数接口<br> 2. Java8 则提供了 completableFuture 工具类<br> 3. Java8 则提供了与之类似的Optional 包装类<br> 4. Java8 目前还不支持，但可以自定义<br> 5. Java8 不支持<br> 6. Java8 接口支持默认方法<br>  ...   </div></div><p><strong>以上2、3、4 是对现有 java中类型的补充和扩展,如早在 java5中就有 Future 、FutureTask 等异步接口了</strong></p><h4 id="这个-就体现在"><a class="markdownIt-Anchor" href="#这个-就体现在"></a> 这个 - - 就体现在</h4><ol><li>语法的精简，让你可以写更多简单易懂的 one line code （一行代码）</li></ol><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>Scala 类似于JAVA，设计初衷是实现可伸缩、融合面向对象编程特性与函式编程风格，可直译、可编译、静态、运行于JVM之上、可与Java互操作的一门多范式的编程语言。Scala 代码会先翻译成 Java 的 class 在执行</p><p><code>下面就讲讲这门多范式的编程语言!!!</code></p><h1 id="函数编程的理解"><a class="markdownIt-Anchor" href="#函数编程的理解"></a> 函数编程的理解</h1><p>啥叫函数编程? 写几个java8 的 stream 表达式就会函数编程了？</p><p>先理解啥叫函数，我类比 OOP 中的对象来说，对象是对事物的抽象，面向对象编程的特点就是抽象、继承、封装、多态等等<br>函数是对行为过程的抽象，要想理解什么是函数式编程,要先知道什么是函数.函数式数学中的概念,从一个状态与另一个状态的对应关系,或者从一个状态到另一个状态的映射就是函数,y=f(x) 这个 f 就是函数。就像谈什么是面向对象一样,继承、封装、多态、抽象一样,谈什么函数式编程就要说函数式编程的特点,函数编程的特点有很多:函数式第一公民、高阶函数、模式匹配、无副作用、不变性。</p><p>函数其实说到底是一个集合到另一集合的映射。函数有 N多个名字,在 java 的类中叫方法，在 scala 的类中叫函数，在 java 的方法参数中叫 lamda 这个 lamda 的类型叫函数接口，而这个 lamda 又有一个别名叫 匿名函数，在引用了外部环境变量的 lamda 中叫闭包 （js 中有这种叫法，不知道准不准），在 OC 中叫 block ，很像，像到我都不想去区分他们。</p><h2 id="一些函数编程的特性"><a class="markdownIt-Anchor" href="#一些函数编程的特性"></a> 一些函数编程的特性</h2><ol><li><p>函数是第一公民: 函数可以传递，这也是语言支持高阶函数的先决条件</p></li><li><p>引用透明：函数式编程的一个特点就是变量状态不可变，无可变状态也就造成了函数的引用透明的特性，函数的引用透明指的是函数没有副作用。scala 还不算纯函数式编程语言，所以它有的函数是可以有副作用的。有一种说法说变量是万恶之源，因为不变的量就不用考虑多线程中线程间通信等问题了。</p></li><li><p>模式匹配：模式可能出现的一个地方就是 模式匹配表达式(pattern matching expression)： 一个表达式 e ，后面跟着关键字 match 以及一个代码块，这个代码块包含了一些匹配样例； 而样例又包含了 case 关键字、模式、可选的 守卫分句(guard clause) ，以及最右边的代码块； 如果模式匹配成功，这个代码块就会执行。 写成代码，看起来会是下面这种样子：</p></li></ol><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">e <span class="token keyword">match</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Pattern1 <span class="token keyword">=&gt;</span> block1  <span class="token keyword">case</span> Pattern2 <span class="token keyword">if</span><span class="token operator">-</span>clause <span class="token keyword">=&gt;</span> block2  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多特点自行百度，不在一一赘述。</p><h1 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h1><h2 id="一切从-hello-word-开始"><a class="markdownIt-Anchor" href="#一切从-hello-word-开始"></a> 一切从 Hello word 开始</h2><div width="100%">    <div style="float:left; width:50%;"><p style="font-size: 20px">Scala</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> ScalaMain <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> variable <span class="token operator">=</span> <span class="token string">"hello word"</span>    println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">variable</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>    <div style="float:left;height:50px; width:0px;border-left:solid white;border-right:1px solid white"></div>    <div style="float:left; width:49%;"><p style="font-size: 20px">Java8</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> variable <span class="token operator">=</span> <span class="token string">"hello word!!"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>上述代码片段刨去关闭花括号的空行之后一共就4行，我们逐一分析。<p>第一行代码有点奇怪，object在这里表示单例类的声明，即ScalaMian是一个类，这个类只有一个实例，这个单一实例会在需要时由scala创建。</p><p>第二行是main函数的函数声明，def表示声明函数，main是函数名，小括号中是函数的参数列表，这里只有一个参数args，args后面跟<code>:</code>和其数据类型，这里是String数组，这个函数没有返回值。</p><p>第三行是给变量 variable 赋值,可见 scala 的变量声明使用 val/var 变量的类型紧跟变量名中间用<code>:</code>隔开。</p><p>第四行代码中调用了一个内置函数println，这个函数输出了Hello World！字符串，这个语句后面没有分号，在scala中分号不是必须的，只有在一行中输入两个语句时才需要用分号分隔。同时可以看到字符串可以向某些脚本语言如 groovy、shell 一样使用<code>$</code>取值,这个用法叫做字符串插值。</p><p>运行上面程序会输出经典的“Hello world!”。</p></div><p>你可能会有几个疑惑的点？为什么声明变量的时候用 var/val ? 为什么不用声明变量的类型呢？object 是个什么鬼?<br><br>答: scala 中声明变量用 var ,声明常量用 val 。var 代表该变量在以后的使用中可以改变其值，而 val 修饰的变量一经定义便不再允许修改。变量可以不用显示的声明类型，其类型有类型推导得来</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> x1<span class="token operator">=</span><span class="token string">"123"</span> <span class="token comment">//自认而然就认识他是字符串类型而不是整型</span><span class="token keyword">val</span> x2<span class="token operator">:</span><span class="token builtin">String</span><span class="token operator">=</span><span class="token string">"123"</span> <span class="token comment">//也可显示表明数据类型</span><span class="token keyword">var</span> x3<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token number">123</span> <span class="token comment">// var 表明 x3 是一个变量</span>x3<span class="token operator">=</span><span class="token number">10</span> <span class="token comment">//这是正确的</span>x1<span class="token operator">=</span><span class="token string">"chenshang"</span> <span class="token comment">// 立马编译报错,因为是 val 修饰的常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scala 中用 def 声明函数</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">/** * 这是最传统的声明方式,还有很多情况可以简写 */</span><span class="token keyword">def</span> add<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token punctuation">{</span>  x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token keyword">def</span> returnUnit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token punctuation">{</span>  println<span class="token punctuation">(</span><span class="token string">"another way to return void"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//写法二，省略非Unit返回值；如果没有写返回值，则根据等号后面的东西进行类型推演</span><span class="token keyword">def</span> test<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>   x<span class="token punctuation">}</span><span class="token comment">//写法三，省略等号，返回Unit</span><span class="token keyword">def</span> returnVoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  println<span class="token punctuation">(</span><span class="token string">"return void"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//写法四：省略花括号，如果函数仅包含一条语句，那么连花括号都可以选择不写</span><span class="token keyword">def</span> max2<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> x <span class="token keyword">else</span> y<span class="token keyword">def</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> println<span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然说到object 这个关键字了，我们先来说说 scala 的这个 object --单例对象。</p><p>Java 中的单例对象的概念,全局独一份的对象实例,scala 中也是这个意思，用 object 修饰的类就变成了单例类,单例类中的方法都是静态,不过 scala 中没有明确的静态方法的概念，因此他没有 staic 这样的关键字的！！所以这个 object 类就是 new 了一个单例对象罢了。我们看看 java 是如何实现一个单例类的呢：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 懒汉式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Single1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Single1</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Single1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 双重检查（Double-Check）版本 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Single3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Single3</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Single3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Single3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Single3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scala 只用一个 object 关键字就搞定了！scala在实例化object 时使用的什么方式呢？大家可以试着反编译一下 scala 生成的 java class 看看。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> ScalaOBJ <span class="token punctuation">{</span>  <span class="token keyword">def</span> get<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> print<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>scalac ScalaOBJ.scala</code>一个 scala 文件被编译成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── ScalaOBJ$.class└── ScalaOBJ.class<span class="token number">0</span> directories, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们有 javap 来翻译一下其中一个.class 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@begon:~/learn$ javap <span class="token parameter variable">-c</span> ScalaOBJ<span class="token punctuation">\</span>$.classCompiled from <span class="token string">"ScalaOBJ.scala"</span>public final class main.javavsscala.ScalaOBJ$ <span class="token punctuation">{</span>  public static main.javavsscala.ScalaOBJ$ MODULE$<span class="token punctuation">;</span>  public static <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Code:       <span class="token number">0</span>: new           <span class="token comment">#2                  // class main/javavsscala/ScalaOBJ$</span>       <span class="token number">3</span>: invokespecial <span class="token comment">#12                 // Method "&lt;init&gt;":()V</span>       <span class="token number">6</span>: <span class="token builtin class-name">return</span>  public void get<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">)</span><span class="token punctuation">;</span>    Code:       <span class="token number">0</span>: getstatic     <span class="token comment">#20                 // Field scala/Predef$.MODULE$:Lscala/Predef$;</span>       <span class="token number">3</span>: aload_1       <span class="token number">4</span>: invokevirtual <span class="token comment">#24                 // Method scala/Predef$.print:(Ljava/lang/Object;)V</span>       <span class="token number">7</span>: <span class="token builtin class-name">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伴生类伴生对象"><a class="markdownIt-Anchor" href="#伴生类伴生对象"></a> 伴生类&amp;伴生对象</h2><p>上面介绍到了object,以此为引申来讲讲伴生对象和伴生类</p><blockquote><p>所谓伴生对象， 也是一个Scala中的单例对象， 使用object关键字修饰。除此之外， 还有一个使用class关键字定义的同名类， 这个类和单例对象存在于同一个文件中，这个类就叫做这个单例对象的伴生类， 相对来说， 这个单例对象叫做伴生类的伴生对象。</p></blockquote><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">// 下面这个类的伴生类</span><span class="token keyword">class</span> OBJ<span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 上面这个类的伴生对象</span><span class="token keyword">object</span> OBJ <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"chenshang"</span>  <span class="token keyword">def</span> apply<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> OBJ <span class="token operator">=</span> <span class="token keyword">new</span> OBJ<span class="token punctuation">(</span>id<span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token keyword">def</span> done<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Scala单例对象是十分重要的，没有像在Java一样，有静态类、静态成员、静态方法，但是Scala提供了object对象，这个object对象类似于Java的静态类,它的成员、它的方法都默认是静态的。</p></blockquote><h3 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3><p>里面的方法全是静态方法 相当于把 java 中静态类的方法单独抽取出来了一个对象</p><h2 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h2><p>上边我们已经自定义过object 单例对象了,它本质上也是定义了一个 class 然后实例化了一个类的对象出来,我们接下来看看 scala 面向对象的特性与 java的有那些写法上的不同。</p><div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">定义scala的简单类</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> Point <span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">val</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意用 val 声明的属相是没有 set 方法的,因为 val 修饰的变量属于常量不可以修改,所以其相当于 java 的类种没有 set 方法。</p><p>上面一行代码就是一个scala类的定义：</p><ol><li>首先是关键字class</li><li>其后是类名 Point</li><li>类名之后的括号中是构造函数的参数列表，这里相当于定义了对象的两个常量，其名称分别为x，y，类型都是Int</li></ol>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><h3>翻译成Java8</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaPoint</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> x<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> y<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">JavaPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> </div></div><p>把上面那个简单的 scala 写成传统形式是这样的</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> Point <span class="token punctuation">(</span>xArg<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> yArg<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">val</span> x <span class="token operator">=</span> xArg  <span class="token keyword">val</span> y <span class="token operator">=</span> yArg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个是不是和 java 的构造方法很像呢？没错,scala将类的主构造方法绑定到一块了,它认为这样做更简洁吧,但 scala 同样支持想 java那样定义类。</p><div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">带函数的 scala 类</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> Point <span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">var</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 定义函数</span>    <span class="token keyword">def</span> add<span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><h3>翻译成Java8</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaPoint</span> <span class="token punctuation">{</span>  <span class="token comment">//省略上面的变量定义和 set/get 方法</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> </div></div><h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2><div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">带继承的 scala 类</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> TalkPoint<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Point <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">def</span> talk<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token string">"my position is ("</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>extends Point(x,y) 之后会自动调用基类的构造函数。不用像 java 一样还得显示的用 super(x,y).注意这里说的是显示,其实 scala 还是这么干了</p>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><h3>翻译成Java8</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TalkPoint</span> extend <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token comment">//省略上面的变量定义和 set/get 方法</span>  <span class="token keyword">public</span> <span class="token class-name">TalkPoin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my position is ("</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> </div></div><p>上面只是 scala 的 class 定义最基本的几种形式,大家可以自行学习一下 scala 的 class 在各种情况下翻译成对应的java 代码长什么样子?想要了解请<a href="www.baidu.com">点击这里</a></p><h2 id="trait"><a class="markdownIt-Anchor" href="#trait"></a> Trait</h2><p>面向对象的本质是抽象,对事物的抽象是对象,对象中行为的抽象就是接口,scala 中没有 interface 在样的关键字,取而代之的是 trait ,翻译成中文叫特性特质,实现 trait 不用 implement 而是用 extends ,过个 trait 用 with 相连标示一个整体,我们先来看一下</p><div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">Scala Trait(特征)</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">trait</span> Equal <span class="token punctuation">{</span>  <span class="token keyword">def</span> isEqual<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>  <span class="token keyword">def</span> isNotEqual<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token operator">!</span>isEqual<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>clase A <span class="token keyword">extends</span> Equal <span class="token keyword">with</span> TraitB<span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><h3>Java8 Interface(接口)</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Equal</span> <span class="token punctuation">{</span>    <span class="token class-name">Boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token class-name">Boolean</span> <span class="token function">isNotEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> implement <span class="token class-name">Equal</span><span class="token punctuation">,</span><span class="token class-name">InterfaceB</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java8 中的默认方法用 default 关键字声明<br></p> </div></div><h3 id="特征构造顺序"><a class="markdownIt-Anchor" href="#特征构造顺序"></a> 特征构造顺序</h3><p>特征也可以有构造器，由字段的初始化和其他特征体中的语句构成。这些语句在任何混入该特征的对象在构造是都会被执行。<br>构造器的执行顺序：</p><ul><li>调用超类的构造器；</li><li>特征构造器在超类构造器之后、类构造器之前执行；</li><li>特征由左到右被构造；</li><li>每个特征当中，父特征先被构造；</li><li>如果多个特征共有一个父特征，父特征不会被重复构造</li><li>所有特征被构造完毕，子类被构造。</li><li>构造器的顺序是类的线性化的反向。线性化是描述某个类型的所有超类型的一种技术规格。</li></ul><h4 id="小结-3"><a class="markdownIt-Anchor" href="#小结-3"></a> 小结</h4><ol><li>Scala Trait(特征) 相当于 Java 的接口，实际上它比接口还功能强大。</li><li>与接口不同的是，它还可以定义属性和方法的实现。</li><li>一般情况下Scala的类只能够继承单一父类，但是如果是 Trait(特征) 的话就可以继承多个，从结果来看就是实现了多重继承</li></ol><h2 id="臭名昭著的菱形问题"><a class="markdownIt-Anchor" href="#臭名昭著的菱形问题"></a> 臭名昭著的菱形问题</h2><p>java 从 c++ 除去了多重继承,只允许单根继承,这个直接解决了<a href="https://my.oschina.net/Barudisshu/blog/419678">菱形问题</a>,但如今 scala 和 java8 都允许接口可以有默认的实现法法了,之所以打破以前的设计在接口中增加具体的方法， 是为了既有的成千上万的Java类库的类增加新的功能， 且不必对这些类重新进行设计。 因此不可避免的的就要花精力来解决这个问题,C++中解决的办法是虚拟基类,我么看看 java 和 scala 是如何处理的。</p><p>我们知道， 接口可以继承接口， 类可以继承类和实现接口。 一旦继承的类和实现的接口中有相同签名的方法， 会出现什么样的状况呢？</p><div width="100%">  <div style="float:left;width:49%;"><p style="font-size: 20px">C++ 解决方法</p><ul><li><p>在C++中是通过虚基类virtual实现，并按照深度优先，从左到右的顺序遍历调用</p></li></ul></div><div style="float:left;width:49%;"><p style="font-size: 20px">Java8 解决方法</p><li><p>类优先于接口。 如果一个子类继承的父类和接口有相同的方法实现。 那么子类继承父类的方法</p></li><li><p>子类型中的方法优先于父类型中的方法。</p></li><li><p>如果以上条件都不满足， 则必须显示覆盖/实现其方法，或者声明成abstract。</p></li></div><div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div><div style="float:left;width:98%;"><p style="font-size: 20px">Scala解决方法</p><li><p>Scala 的基于混入的类构成（mixin class composition）体系是线性混入构成（linearmixin compostion）和对称的混入模块（mixin modules），以及traits这三者的融合。</p></li><li><p>Scala是通过类的全序化(Class Linearization)，或称作类的线性化。线性化指出一个类的祖先类是一条线性路径的，包括超类(superclass)和特性(traits)。它通过两步来处理方法调用的问题:<br><br>① 使用右孩子优先的深度优先遍历搜索(right-first,depth-first search)算法进行搜索。<br><br>② 遍历得到的结构层次中，保留最后一个元素，其余删除。</p></li><li><p>线性混入，即是指使用右孩子优先的深度优先遍历搜索算法，列出层次结构（Scala class hierarchy），因此Scala多重继承的混入类中，如果包含有混入类（Mixins，或称为混入组合），则多重继承中总是选择最右边的（right-mostly）的实现方法。</p></li></div></div><h1 id="项目中常用的语法"><a class="markdownIt-Anchor" href="#项目中常用的语法"></a> 项目中常用的语法</h1><h2 id="字符串插值"><a class="markdownIt-Anchor" href="#字符串插值"></a> 字符串插值</h2><ul><li>Scala中的String类就是Java的String类，所以可以直接调用Java里String的所有方法。</li><li>字符串中的变量替换，Scala中基础的字符串插值就是在字符串前加字幕‘s’，然后在字符串中放入变量，每个变量都应以‘$’开头。字符串前加字母‘s’时，其实是在创建一个处理字符串字面量</li><li>在字符串字面量中使用表达式，“${}内可嵌入任何表达式”,包括等号表达式。</li></ul><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">scala<span class="token operator">&gt;</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"Age next year: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">age <span class="token operator">+</span> <span class="token number">1</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>Age next year<span class="token operator">:</span> <span class="token number">34</span>scala<span class="token operator">&gt;</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"You are 33 years old:</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">age <span class="token operator">==</span> <span class="token number">33</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>You are <span class="token number">33</span> years old<span class="token operator">:</span><span class="token boolean">true</span># 注意，在打印对象字段时使用花括号。scala<span class="token operator">&gt;</span> <span class="token keyword">case</span> <span class="token keyword">class</span> Student<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>defined <span class="token keyword">class</span> Studentscala<span class="token operator">&gt;</span> <span class="token keyword">val</span> hannah <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"Hannah"</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span>hannah<span class="token operator">:</span> Student <span class="token operator">=</span> Student<span class="token punctuation">(</span>Hannah<span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span>scala<span class="token operator">&gt;</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">hannah<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> has a score of </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">hannah<span class="token punctuation">.</span>score</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>Hannah has a score of <span class="token number">95</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-表达式"><a class="markdownIt-Anchor" href="#for-表达式"></a> for 表达式</h2><div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">Scala 定义list</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> list01<span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">10</span><span class="token keyword">val</span> list02<span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><p style="font-size: 20px">Java8 定义 list</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>上面先学会定义一个列表，而 for 主要用来处理循环的,一般应用在 list、seq 等数据类型或者用来解Future 等包装类,这个后面会说<div width="100%">  <div style="float:left; width:49%;"><p style="font-size: 20px">Scala for 表达式</p>  <pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//第一种:普通的 for 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//第二种:带守卫的 for 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> list <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//第三种:中间变量绑定</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> list<span class="token punctuation">;</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token keyword">&lt;-</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">a</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//第四种:for yeild</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">{</span>  x <span class="token keyword">&lt;-</span> list<span class="token punctuation">;</span>  result <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">yield</span> result<span class="token comment">/** * yield 关键字的简短总结: * • 针对每一次 for 循环的迭代, yield 会产生一个值，被循环记录下来 (内部实现上，像是一个缓冲区). * • 当循环结束后, 会返回所有 yield 的值组成的集合. * • 返回集合的类型与被遍历的集合类型是一致的. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </div>  <div style="float:left;height:50px;width:2%;border-left:solid white;border-right:1px solid white"></div>  <div style="float:left;width:49%;"><p style="font-size: 20px">Java8 for 语法糖</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应 scala 中带守卫的 for循环</span>ist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//中间变量绑定</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> y <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Integer</span> finalX <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//注意这个地方有个坑,闭包要求传入的变量是不可变的额</span>    list2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>y <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalX <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for yield , scala 的表达式是有返回值的</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="option-vs-optional"><a class="markdownIt-Anchor" href="#option-vs-optional"></a> Option vs Optional</h2><p>在使用 scala的函数编程之前先要讲解一个新的类型,这个类型在 scala 中叫 Option ,在Java 中叫 Optional。</p><p>以下内容<a href="http://udn.yyuap.com/doc/guides-to-scala-book/chp5-the-option-type.html">原文地址</a></p><h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3><p>Java 开发者一般都知道 NullPointerException（其他语言也有类似的东西）， 通常这是由于某个方法返回了 null ，但这并不是开发者所希望发生的，代码也不好去处理这种异常。</p><p>值 null 通常被滥用来表征一个可能会缺失的值。 不过，某些语言以一种特殊的方法对待 null 值，或者允许你安全的使用可能是 null 的值。 比如说，Groovy 有 安全运算符(Safe Navigation Operator) 用于访问属性， 这样 foo?.bar?.baz 不会在 foo 或 bar 是 null 时而引发异常，而是直接返回 null， 然而，Groovy 中没有什么机制来强制你使用此运算符，所以如果你忘记使用它，那就完蛋了！</p><p>Clojure 对待 nil 基本上就像对待空字符串一样。 也可以把它当作列表或者映射表一样去访问，这意味着， nil 在调用层级中向上冒泡。 很多时候这样是可行的，但有时会导致异常出现在更高的调用层级中，而那里的代码没有对 nil 加以考虑。</p><p>Scala 试图通过摆脱 null 来解决这个问题，并提供自己的类型用来表示一个值是可选的（有值或无值）， 这就是 Option[A] 特质。</p><p>Option[A] 是一个类型为 A 的可选值的容器： 如果值存在， Option[A] 就是一个 Some[A] ，如果不存在， Option[A] 就是对象 None 。</p><p>在类型层面上指出一个值是否存在，使用你的代码的开发者（也包括你自己）就会被编译器强制去处理这种可能性， 而不能依赖值存在的偶然性。</p><p>Option 是强制的！不要使用 null 来表示一个值是缺失的。</p><h3 id="创建-option"><a class="markdownIt-Anchor" href="#创建-option"></a> 创建 Option</h3><p>通常，你可以直接实例化 Some 样例类来创建一个 Option 。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> greeting<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> Some<span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，在知道值缺失的情况下，直接使用 None 对象：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> greeting<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而，在实际工作中，你不可避免的要去操作一些 Java 库， 或者是其他将 null 作为缺失值的JVM 语言的代码。 为此， Option 伴生对象提供了一个工厂方法，可以根据给定的参数创建相应的 Option ：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> absentGreeting<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> Option<span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// absentGreeting will be None</span><span class="token keyword">val</span> presentGreeting<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> Option<span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span> <span class="token comment">// presentGreeting will be Some("Hello!")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用-option"><a class="markdownIt-Anchor" href="#使用-option"></a> 使用 Option</h3><p>目前为止，所有的这些都很简洁，不过该怎么使用 Option 呢？是时候开始举些无聊的例子了。</p><p>想象一下，你正在为某个创业公司工作，要做的第一件事情就是实现一个用户的存储库， 要求能够通过唯一的用户 ID 来查找他们。 有时候请求会带来假的 ID，这种情况，查找方法就需要返回 Option[User] 类型的数据。 一个假想的实现可能是：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span>  id<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>  firstName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>  gender<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">object</span> UserRepository <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> users <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-&gt;</span> User<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> Some<span class="token punctuation">(</span><span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token number">2</span> <span class="token operator">-&gt;</span> User<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Johanna"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> findById<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>User<span class="token punctuation">]</span> <span class="token operator">=</span> users<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token keyword">def</span> findAll <span class="token operator">=</span> users<span class="token punctuation">.</span>values<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，假设从 UserRepository 接收到一个 Option[User] 实例，并需要拿它做点什么，该怎么办呢？</p><p>一个办法就是通过 isDefined 方法来检查它是否有值。 如果有，你就可以用 get 方法来获取该值：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> user1 <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user1<span class="token punctuation">.</span>isDefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>user1<span class="token punctuation">.</span>get<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// will print "John"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这和 Guava 库 中的 Optional 使用方法类似。 不过这种使用方式太过笨重，更重要的是，使用 get 之前， 你可能会忘记用 isDefined 做检查，这会导致运行期出现异常。 这样一来，相对于 null ，使用 Option 并没有什么优势。</p><p><strong>你应该尽可能远离这种访问方式！</strong></p><h3 id="提供一个默认值"><a class="markdownIt-Anchor" href="#提供一个默认值"></a> 提供一个默认值</h3><p>很多时候，在值不存在时，需要进行回退，或者提供一个默认值。 Scala 为 Option 提供了 getOrElse 方法，以应对这种情况：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Johanna"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>println<span class="token punctuation">(</span><span class="token string">"Gender: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>gender<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"not specified"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// will print "not specified"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请注意，作为 getOrElse 参数的默认值是一个 传名参数 ， 这意味着，只有当这个 Option 确实是 None 时，传名参数才会被求值。 因此，没必要担心创建默认值的代价，它只有在需要时才会发生。</p><h3 id="模式匹配"><a class="markdownIt-Anchor" href="#模式匹配"></a> 模式匹配</h3><p>Some 是一个样例类，可以出现在模式匹配表达式或者其他允许模式出现的地方。 上面的例子可以用模式匹配来重写：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Johanna"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>user<span class="token punctuation">.</span>gender <span class="token keyword">match</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Some<span class="token punctuation">(</span>gender<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span><span class="token string">"Gender: "</span> <span class="token operator">+</span> gender<span class="token punctuation">)</span>  <span class="token keyword">case</span> None <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span><span class="token string">"Gender: not specified"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，你想删除重复的 println 语句，并重点突出模式匹配表达式的使用：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Johanna"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token keyword">val</span> gender <span class="token operator">=</span> user<span class="token punctuation">.</span>gender <span class="token keyword">match</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Some<span class="token punctuation">(</span>gender<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> gender  <span class="token keyword">case</span> None <span class="token keyword">=&gt;</span> <span class="token string">"not specified"</span><span class="token punctuation">}</span>println<span class="token punctuation">(</span><span class="token string">"Gender: "</span> <span class="token operator">+</span> gender<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能已经发现用模式匹配处理 Option 实例是非常啰嗦的，这也是它非惯用法的原因。 所以，即使你很喜欢模式匹配，也尽量用其他方法吧。</p><p>不过在 Option 上使用模式确实是有一个相当优雅的方式， 在下面的 for 语句一节中，你就会学到。</p><h3 id="作为集合的-option"><a class="markdownIt-Anchor" href="#作为集合的-option"></a> 作为集合的 Option</h3><p>到目前为止，你还没有看见过优雅使用 Option 的方式吧。下面这个就是了。</p><p>前文我提到过， Option 是类型 A 的容器，更确切地说，你可以把它看作是某种集合， 这个特殊的集合要么只包含一个元素，要么就什么元素都没有。</p><p>虽然在类型层次上， Option 并不是 Scala 的集合类型， 但，凡是你觉得 Scala 集合好用的方法， Option 也有， 你甚至可以将其转换成一个集合，比如说 List 。</p><p>那么这又能让你做什么呢？</p><h3 id="执行一个副作用"><a class="markdownIt-Anchor" href="#执行一个副作用"></a> 执行一个副作用</h3><p>如果想在 Option 值存在的时候执行某个副作用，foreach 方法就派上用场了：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>user <span class="token keyword">=&gt;</span> println<span class="token punctuation">(</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// prints "Johanna"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果这个 Option 是一个 Some ，传递给 foreach 的函数就会被调用一次，且只有一次； 如果是 None ，那它就不会被调用。</p><h3 id="执行映射"><a class="markdownIt-Anchor" href="#执行映射"></a> 执行映射</h3><p>Option 表现的像集合，最棒的一点是， 你可以用它来进行函数式编程，就像处理列表、集合那样。</p><p>正如你可以将 List[A] 映射到 List[B] 一样，你也可以映射 Option[A] 到 Option[B]： 如果 Option[A] 实例是 Some[A] 类型，那映射结果就是 Some[B] 类型；否则，就是 None 。</p><p>如果将 Option 和 List 做对比 ，那 None 就相当于一个空列表： 当你映射一个空的 List[A] ，会得到一个空的 List[B] ， 而映射一个是 None 的 Option[A] 时，得到的 Option[B] 也是 None 。</p><p>让我们得到一个可能不存在的用户的年龄：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> age <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// age is Some(32)</span>Option 与 flatMap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以在 gender 上做 map 操作：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> gender <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment">// gender is an Option[Option[String]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所生成的 gender 类型是 Option[Option[String]] 。这是为什么呢？</p><p>这样想：你有一个装有 User 的 Option 容器，在容器里面，你将 User 映射到 Option[String] （ User 类上的属性 gender 是 Option[String] 类型的）。 得到的必然是嵌套的 Option。</p><p>既然可以 flatMap 一个 List[List[A]] 到 List[B] ， 也可以 flatMap 一个 Option[Option[A]] 到 Option[B] ，这没有任何问题： Option 提供了 flatMap 方法。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> gender1 <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment">// gender is Some("male")</span><span class="token keyword">val</span> gender2 <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment">// gender is None</span><span class="token keyword">val</span> gender3 <span class="token operator">=</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment">// gender is None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在结果就变成了 Option[String] 类型， 如果 user 和 gender 都有值，那结果就会是 Some 类型，反之，就得到一个 None 。</p><p>要理解这是什么原理，让我们看看当 flatMap 一个 List[List[A] 时，会发生什么？ （要记得， Option 就像一个集合，比如列表）</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> names<span class="token operator">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Johanna"</span><span class="token punctuation">,</span> <span class="token string">"Daniel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token string">"Westheide"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// results in List(List("JOHN", "JOHANNA", "DANIEL"), List(), List("DOE", "WESTHEIDE"))</span>names<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// results in List("JOHN", "JOHANNA", "DANIEL", "DOE", "WESTHEIDE")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们使用 flatMap ，内部列表中的所有元素会被转换成一个扁平的字符串列表。 显然，如果内部列表是空的，则不会有任何东西留下。</p><p>现在回到 Option 类型，如果映射一个由 Option 组成的列表呢？</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> names<span class="token operator">:</span> List<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token string">"Johanna"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> Some<span class="token punctuation">(</span><span class="token string">"Daniel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// List(Some("JOHANNA"), None, Some("DANIEL"))</span>names<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>xs <span class="token keyword">=&gt;</span> xs<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// List("JOHANNA", "DANIEL")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果只是 map ，那结果类型还是 List[Option[String]] 。 而使用 flatMap 时，内部集合的元素就会被放到一个扁平的列表里： 任何一个 Some[String] 里的元素都会被解包，放入结果集中； 而原列表中的 None 值由于不包含任何元素，就直接被过滤出去了。</p><p>记住这一点，然后再去看看 faltMap 在 Option 身上做了什么。</p><h3 id="过滤-option"><a class="markdownIt-Anchor" href="#过滤-option"></a> 过滤 Option</h3><p>也可以像过滤列表那样过滤 Option： 如果选项包含有值，而且传递给 filter 的谓词函数返回真， filter 会返回 Some 实例。 否则（即选项没有值，或者谓词函数返回假值），返回值为 None 。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// None, because age is &lt;= 30</span>UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// Some(user), because age is &gt; 30</span>UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// None, because user is already None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for-语句"><a class="markdownIt-Anchor" href="#for-语句"></a> for 语句</h3><p>现在，你已经知道 Option 可以被当作集合来看待，并且有 map 、 flatMap 、 filter 这样的方法。 可能你也在想 Option 是否能够用在 for 语句中，答案是肯定的。 而且，用 for 语句来处理 Option 是可读性最好的方式，尤其是当你有多个 map 、flatMap 、filter 调用的时候。 如果只是一个简单的 map 调用，那 for 语句可能有点繁琐。</p><p>假如我们想得到一个用户的性别，可以这样使用 for 语句：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">{</span>  user <span class="token keyword">&lt;-</span> UserRepository<span class="token punctuation">.</span>findById<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  gender <span class="token keyword">&lt;-</span> user<span class="token punctuation">.</span>gender<span class="token punctuation">}</span> <span class="token keyword">yield</span> gender <span class="token comment">// results in Some("male")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可能你已经知道，这样的 for 语句等同于嵌套的 flatMap 调用。 如果 UserRepository.findById 返回 None，或者 gender 是 None ， 那这个 for 语句的结果就是 None 。 不过这个例子里， gender 含有值，所以返回结果是 Some 类型的。</p><p>如果我们想返回所有用户的性别（当然，如果用户设置了性别），可以遍历用户，yield 其性别：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">{</span>  user <span class="token keyword">&lt;-</span> UserRepository<span class="token punctuation">.</span>findAll  gender <span class="token keyword">&lt;-</span> user<span class="token punctuation">.</span>gender<span class="token punctuation">}</span> <span class="token keyword">yield</span> gender<span class="token comment">// result in List("male")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生成器左侧使用</p><p>也许你还记得，前一章曾经提到过， for 语句中生成器的左侧也是一个模式。 这意味着也可以在 for 语句中使用包含选项的模式。</p><p>重写之前的例子：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">{</span>  User<span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> Some<span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">&lt;-</span> UserRepository<span class="token punctuation">.</span>findAll<span class="token punctuation">}</span> <span class="token keyword">yield</span> gender<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在生成器左侧使用 Some 模式就可以在结果集中排除掉值为 None 的元素。</p><h3 id="链接-option"><a class="markdownIt-Anchor" href="#链接-option"></a> 链接 Option</h3><p>Option 还可以被链接使用，这有点像偏函数的链接： 在 Option 实例上调用 orElse 方法，并将另一个 Option 实例作为传名参数传递给它。 如果一个 Option 是 None ， orElse 方法会返回传名参数的值，否则，就直接返回这个 Option。</p><p>一个很好的使用案例是资源查找：对多个不同的地方按优先级进行搜索。 下面的例子中，我们首先搜索 config 文件夹，并调用 orElse 方法，以传递备用目录：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Resource<span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">val</span> resourceFromConfigDir<span class="token operator">:</span> Option<span class="token punctuation">[</span>Resource<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">val</span> resourceFromClasspath<span class="token operator">:</span> Option<span class="token punctuation">[</span>Resource<span class="token punctuation">]</span> <span class="token operator">=</span> Some<span class="token punctuation">(</span>Resource<span class="token punctuation">(</span><span class="token string">"I was found on the classpath"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> resource <span class="token operator">=</span> resourceFromConfigDir orElse resourceFromClasspath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果想链接多个选项，而不仅仅是两个，使用 orElse 会非常合适。 不过，如果只是想在值缺失的情况下提供一个默认值，那还是使用 getOrElse 吧。</p><h4 id="小结-4"><a class="markdownIt-Anchor" href="#小结-4"></a> 小结</h4><p>在这一章里，你学到了有关 Option 的所有知识， 这有利于你理解别人的代码，也有利于你写出更可读，更函数式的代码。</p><p>这一章最重要的一点是：列表、集合、映射、Option，以及之后你会见到的其他数据类型， 它们都有一个非常统一的使用方式，这种使用方式既强大又优雅。</p><h2 id="java8-optional"><a class="markdownIt-Anchor" href="#java8-optional"></a> Java8 Optional</h2><p>身为一名Java程序员，大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。</p><p>Optional类的Javadoc描述如下：<br>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p><p>今天的主角是 scala ,java8 的 optional 用法请参考<br><a href="http://www.importnew.com/6675.html">相关文档</a></p><h1 id="sclal集合"><a class="markdownIt-Anchor" href="#sclal集合"></a> sclal集合</h1><h2 id="tuple-元组"><a class="markdownIt-Anchor" href="#tuple-元组"></a> Tuple 元组</h2><p>元组是在不使用类的前提下，将元素组合起来形成简单的逻辑集合。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">scala<span class="token operator">&gt;</span> <span class="token keyword">val</span> hostPort <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>hostPort<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>localhost<span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与样本类不同，元组不能通过名称获取字段，而是使用位置下标来读取对象；而且这个下标基于1，而不是基于0。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">scala<span class="token operator">&gt;</span> hostPort<span class="token punctuation">.</span>_1res1<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> localhostscala<span class="token operator">&gt;</span> hostPort<span class="token punctuation">.</span>_2res2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组可以很好得与模式匹配相结合。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">hostPort <span class="token keyword">match</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在创建两个元素的元组时，可以使用特殊语法：-&gt;</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">scala<span class="token operator">&gt;</span>  <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token number">2</span>res3<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="常用函数的"><a class="markdownIt-Anchor" href="#常用函数的"></a> 常用函数的</h1><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> map</h2><p>map对列表中的每个元素应用一个函数，返回应用后的元素所组成的列表。</p><h2 id="foreach"><a class="markdownIt-Anchor" href="#foreach"></a> foreach</h2><p>foreach很像map，但没有返回值。foreach仅用于有副作用[side-effects]的函数。</p><h2 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter</h2><p>filter移除任何对传入函数计算结果为false的元素。返回一个布尔值的函数通常被称为谓词函数[或判定函数]。</p><h2 id="flatmap"><a class="markdownIt-Anchor" href="#flatmap"></a> flatMap</h2><p>flatMap是一种常用的组合子，结合映射[mapping]和扁平化[flattening]。 flatMap需要一个处理嵌套列表的函数，然后将结果串连起来。</p><h1 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h1><p>scala.concurrent 包里的 Future[T] 是一个容器类型，代表一种返回值类型为 T 的计算。 计算可能会出错，也可能会超时；从而，当一个 future 完成时，它可能会包含异常，而不是你期望的那个值。</p><p>Future 只能写一次： 当一个 future 完成后，它就不能再被改变了。 同时，Future 只提供了读取计算值的接口，写入计算值的任务交给了 Promise，这样，API 层面上会有一个清晰的界限。 这篇文章里，我们主要关注前者，下一章会介绍 Promise 的使用。</p><h1 id="之前遇到的坑"><a class="markdownIt-Anchor" href="#之前遇到的坑"></a> 之前遇到的坑</h1><ul><li>酌情在 List 中使用 map 或 flatMap 等操作, map中是一个数据库查询或者是一个远程接口调用,立马会出现并发问题,不是数据库连接数超出,就是接口返回失败,Java8的 stream 就不会这么严重,想想为甚么?</li><li>隐式转换,这个真就需要经验了</li><li>Option 不是说就不会出现空指针问题,尤其在充斥着不是 Option 的环境中,赋默认值永远不失为一个好的方法</li><li>编写隐式转换转 json 的时候,json 如果使用下划线格式则使用JsonNaming.snakecase(Json.format[ClassA]),如果使用驼峰的时候记得用Json.format[ClassB]</li><li>编写 case class的时候记得分好类别,放到对应的文件中,不要随意定义</li><li>注释一定要写,写scala代码简直不要太爽,经常忘记写注释,后人再看的时候是很反感的</li><li>hyperloop 中充斥着没有打 log 的代码,这一点让人很不爽</li><li>代码记得格式化,括号对不整齐很影响心情</li><li>需要一个良好的分支管理策略,切记覆盖别人的代码</li><li>不一定要求你一定写单元测试,但要求一定要做到自测,这也是对测试人员的负责</li></ul><p>参考文档:</p><ul><li><a href="http://udn.yyuap.com/doc/guides-to-scala-book/index.html">http://udn.yyuap.com/doc/guides-to-scala-book/index.html</a></li><li><a href="http://www.importnew.com/3673.html">http://www.importnew.com/3673.html</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo异常</title>
      <link href="/2019/08/09/gong-ju-kong/hexo/hexo-yi-chang/"/>
      <url>/2019/08/09/gong-ju-kong/hexo/hexo-yi-chang/</url>
      
        <content type="html"><![CDATA[<p>本文记录常见Hexo异常和解决方案</p><h1 id="cannot-set-property-lastindex-of-undefined"><a class="markdownIt-Anchor" href="#cannot-set-property-lastindex-of-undefined"></a> Cannot set property ‘lastIndex’ of undefined</h1><pre class="line-numbers language-text" data-language="text"><code class="language-text">INFO  Start processingFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTypeError: Cannot set property 'lastIndex' of undefined    at highlight (/Users/chenshang/Blog/node_modules/highlight.js/lib/highlight.js:579:35)    at /Users/chenshang/Blog/node_modules/highlight.js/lib/highlight.js:629:21    at Array.forEach (&lt;anonymous&gt;)    at Object.highlightAuto (/Users/chenshang/Blog/node_modules/highlight.js/lib/highlight.js:628:62)    at /Users/chenshang/Blog/node_modules/hexo-util/lib/    ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改配置文件<code>_config.yml</code>，注意不是主题里面的配置文件！把<code>auto_detect</code>设置为false，即可解决。</p></blockquote><h1 id="hexo关于categories名字大写导致404问题"><a class="markdownIt-Anchor" href="#hexo关于categories名字大写导致404问题"></a> Hexo关于categories名字大写导致404问题</h1><h1 id="关于hexo-renderer-markdown-it引起的一级目录无法跳转的错误"><a class="markdownIt-Anchor" href="#关于hexo-renderer-markdown-it引起的一级目录无法跳转的错误"></a> 关于hexo-renderer-markdown-it引起的一级目录无法跳转的错误</h1><p><code>hexo-renderer-marked</code> 是 Hexo 默认的 Markdown 的渲染器，针对于普通的 Markdown 的文章书写，该渲染器已经足够，但是由于不支持 Mathjax，不支持插件扩展，不支持 emoji 表情，所以该渲染器也是介绍的渲染器中功能最弱的。</p><p>于是后面安装了 <code>hexo-renderer-markdown-it</code> 这个渲染器，支持 Mathjax 语法（支持不太好），支持 Markdown 以及 CommonMark 语法，渲染速度比 <code>hexo-renderer-marked</code> 快，支持插件配置，支持标题带安全的 id 信息，支持脚注（上标，下标，下划线）。</p><p>但是这个工具会引起一级目录跳转总是回到顶部而不是对应的标题。于是想要改回 <code>hexo-renderer-marked</code> ，可是 这个原生的插件会导致 <code>![图片](目录/图片)</code> 这种写法下图片无法显示，只能转而使用 <code>&lt;img src="目录/图片"&gt;</code> 这种形式，而我文章中已经有大量这样语法写的图片展示了，要是改变写法估计够呛了。</p><p>于是最终百度查到了 <code>hexo-renderer-markdown-it-plus</code> 这个插件，看名字就是 <code>hexo-renderer-markdown-it</code> 的升级版，支持 Katex 插件并默认启用，默认启用插件列表：<code>markdown-it-emoji</code>，<code>markdown-it-sub</code>，<code>markdown-it-sup</code>，<code>markdown-it-deflist</code>，<code>markdown-it-abbr</code>，<code>markdown-it-footnote</code>，<code>markdown-it-ins</code>，<code>markdown-it-mark</code>，<code>@iktakahiro/markdown-it-katex</code>，<code>markdown-it-toc-and-anchor</code>。</p><p>试用了一下，果然所有问题都解决了，目录也能正常跳转了，图片也能正常显示了，完美。</p><p>安装 <code>hexo-renderer-markdown-it-plus</code> 之前，先把<code>hexo-renderer-marked</code>和<code>hexo-renderer-markdown-it</code>都卸载干净</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-marked <span class="token parameter variable">-s</span><span class="token function">npm</span> uninstall hexo-renderer-markdown-it <span class="token parameter variable">-s</span><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-markdown-it-plus <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看出口IP的几种方式</title>
      <link href="/2019/08/05/linux/linux-cha-kan-chu-kou-ip-de-ji-chong-fang-shi/"/>
      <url>/2019/08/05/linux/linux-cha-kan-chu-kou-ip-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>本文记录我常用的几种在Linux下查看出口IP的方式</p><ol><li>curl <a href="http://icanhazip.com">icanhazip.com</a></li><li>curl <a href="http://ifconfig.me">ifconfig.me</a></li><li>curl <a href="http://members.3322.org/dyndns/getip">http://members.3322.org/dyndns/getip</a></li></ol><p>演示一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@chenshangMacBook-Pro:~$ <span class="token function">time</span> <span class="token function">curl</span> icanhazip.com<span class="token number">103.37</span>.140.38real0m0.682suser0m0.008ssys0m0.009schenshang@chenshangMacBook-Pro:~$ <span class="token function">time</span> <span class="token function">curl</span> ifconfig.me<span class="token number">103.220</span>.76.84real0m0.294suser0m0.008ssys0m0.007schenshang@chenshangMacBook-Pro:~$ <span class="token function">time</span> <span class="token function">curl</span> http://members.3322.org/dyndns/getip<span class="token number">103.37</span>.140.21real0m0.082suser0m0.008ssys0m0.007s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来 <code>curl http://members.3322.org/dyndns/getip</code> 耗时最短,当然这也跟你所处的地理位置和网络环境有关。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用管理员权限保存</title>
      <link href="/2017/11/16/gong-ju-kong/vim/vim-shi-yong-guan-li-yuan-quan-xian-bao-cun/"/>
      <url>/2017/11/16/gong-ju-kong/vim/vim-shi-yong-guan-li-yuan-quan-xian-bao-cun/</url>
      
        <content type="html"><![CDATA[<p>当我们使用 vim 在修改 host 文件的时候,往往最后退出的时候发现无法保存,提示<br><code>E45: 'readonly' option is set (add ! to override)</code><br>这时候我们可以使用下面的命令,然后输入管理员密码即可。<br><code>:w !sudo tee %</code><br>当看到vim编辑器底部提示</p><pre class="line-numbers language-none"><code class="language-none">W12: Warning: File "hosts" has changed and the buffer was changed in Vim as wellSee ":help W12" for more info.[O]K, (L)oad File:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入L或者O</p><h3 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h3><ol><li>命令<code>:w !{cmd}</code>,让 vim 执行一个外部命令{cmd}，然后把当前缓冲区的内容从 stdin 传入。</li><li><code>tee</code>&nbsp;是一个把 stdin 保存到文件的小工具。</li><li>而 <code>%</code>,是vim当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。所以执行这个命令，就相当于从vim外部修改了当前编辑的文件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell中&gt;/dev/null 2&gt;&amp;1究竟是个啥?</title>
      <link href="/2017/07/13/linux/linux-chong-ding-xiang/"/>
      <url>/2017/07/13/linux/linux-chong-ding-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="shell重定向介绍"><a class="markdownIt-Anchor" href="#shell重定向介绍"></a> shell重定向介绍</h2><p>就像我们平时写的程序一样，一段程序会处理外部的输入，然后将运算结果输出到指定的位置。在交互式的程序中，输入来自用户的键盘和鼠标，结果输出到用户的屏幕，甚至播放设备中。而对于某些后台运行的程序，输入可能来自于外部的一些文件，运算的结果通常又写到其他的文件中。而且程序在运行的过程中，会有一些关键性的信息，比如异常堆栈，外部接口调用情况等，这些都会统统写到日志文件里。</p><p>shell脚本也一样，但是我们一般在使用shell命令的时候，更多地还是通过键盘输入，然后在屏幕上查看命令的执行结果。如果某些情况下，我们需要将shell命令的执行结果存储到文件中，那么我们就需要使用输入输出的重定向功能。</p><h2 id="文件描述符"><a class="markdownIt-Anchor" href="#文件描述符"></a> 文件描述符</h2><p>当执行shell命令时，会默认打开3个文件，每个文件有对应的文件描述符来方便我们使用：</p><table><thead><tr><th>类型</th><th>文件描述符</th><th>默认情况</th><th>对应文件句柄位置</th></tr></thead><tbody><tr><td>标准输入（standard input）</td><td>0</td><td>从键盘获得输入</td><td>/proc/self/fd/0</td></tr><tr><td>标准输出（standard output）</td><td>1</td><td>输出到屏幕(即控制台)</td><td>/proc/self/fd/1</td></tr><tr><td>错误输出（error output）</td><td>2</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/2</td></tr><tr><td>所以我们平时在执行shell命令中，都默认是从键盘获得输入，并且将结果输出到控制台上。但是我们可以通过更改文件描述符默认的指向，从而实现输入输出的重定向。比如我们将1指向文件，那么标准的输出就会输出到文件中。</td><td></td><td></td><td></td></tr></tbody></table><h2 id="输出重定向"><a class="markdownIt-Anchor" href="#输出重定向"></a> 输出重定向</h2><p>我们使用&gt;或者&gt;&gt;对输出进行重定向。符号的左边表示文件描述符，如果没有的话表示1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。</p><h2 id="输入重定向"><a class="markdownIt-Anchor" href="#输入重定向"></a> 输入重定向</h2><p>我们使用&lt;对输入做重定向，如果符号左边没有写值，那么默认就是0。</p><h2 id="重定向绑定"><a class="markdownIt-Anchor" href="#重定向绑定"></a> 重定向绑定</h2><p>好了，在有了以上知识的基础上，我们再来看开头提到的&gt;/dev/null 2&gt;&amp;1。这条命令其实分为两命令，一个是&gt;/dev/null，另一个是2&gt;&amp;1。</p><ol><li><code>&gt;/dev/null</code><br>这条命令的作用是将标准输出1重定向到/dev/null中。/dev/null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了&gt;/dev/null之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</li><li><code>2&gt;&amp;1</code><br>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</li></ol><p>linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以&gt;/dev/null 2&gt;&amp;1的作用就是让标准输出重定向到/dev/null中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了/dev/null中，错误输出同样也被丢弃了。执行了这条命令之后，该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><p><a href="http://www.kissyu.org/2016/12/25/shell%E4%B8%AD%3E%20:dev:null%202%20%3E%20&amp;1%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>情书</title>
      <link href="/2017/01/11/mo-xiang-zhi-jian/wo-de-shi-ci/qing-shu/"/>
      <url>/2017/01/11/mo-xiang-zhi-jian/wo-de-shi-ci/qing-shu/</url>
      
        <content type="html"><![CDATA[<p>如果我在你的代码里是个bug<br>那么我想让你尽快恢复<br>因为我想在你的程序世界里畅通无阻</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静夜思</title>
      <link href="/2016/10/01/mo-xiang-zhi-jian/wo-de-shi-ci/jing-ye-si/"/>
      <url>/2016/10/01/mo-xiang-zhi-jian/wo-de-shi-ci/jing-ye-si/</url>
      
        <content type="html"><![CDATA[<p>念前事，怯流光<br>窗前明月光疑是地上霜</p><p>月光里你依然素妆<br>思往事，惜流芳<br>桌上凊觞模糊衣袖的香<br>玉杯映你青衣模样<br>人扶醉，月依墙<br>半杯凊觞已断肠<br>尘埃落了纸张，散了墨香又将泪点偷藏<br>良辰美景奈何天已凉<br>赏心乐事谁家院飘香<br>当年的桥梁留不过往<br>易成伤<br>人扶醉，月依墙<br>半杯凊觞已断肠<br>尘埃落了纸张，散了墨香又将泪点偷藏<br>起袖扶尘谁似画凄凉<br>浮光掠影何处琴声扬<br>昨夜的月光今夜有启航<br>已盛觞</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝句</title>
      <link href="/2016/09/21/mo-xiang-zhi-jian/wo-de-shi-ci/jue-ju/"/>
      <url>/2016/09/21/mo-xiang-zhi-jian/wo-de-shi-ci/jue-ju/</url>
      
        <content type="html"><![CDATA[<p>老先生讲作诗要讲求韵律<br>用笔要顾及阴阳上去<br>写意的下着是两千年前的雨</p><p>怪这雨误了花期<br>文人总爱玩文字游戏<br>留下最后一笔<br>待后人写下续集<br>这绝句缺少点睛之笔<br>没有你它怎会有灵气<br>梁祝画蝶的传奇<br>我姑且相信那是天意</p><p>老先生讲打定注意当全心全意<br>作诗不是一朝一夕<br>有时还要埋下伏笔<br>辞藻不用太华丽<br>还要善于用修辞<br>文人总爱玩标点游戏<br>说什么你是否在想我在想你</p><p>老乡生讲结局要直抒胸臆<br>我却喜欢你含蓄<br>爱你却不知从何落笔<br>你为我研墨<br>墨香氤氲了书桌<br>桌上的宣纸平铺了几个雨季<br>一首绝句，待我落笔。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梨花雨</title>
      <link href="/2016/09/20/mo-xiang-zhi-jian/wo-de-shi-ci/li-hua-yu/"/>
      <url>/2016/09/20/mo-xiang-zhi-jian/wo-de-shi-ci/li-hua-yu/</url>
      
        <content type="html"><![CDATA[<p>沿长堤一痕，乘余舟一芥，往湖心亭一点。<br>梨花开正艳，又勾起我思念</p><p>月老庙前三柱香都只剩一半<br>写不成书，只寄相思一点<br>旧时手稿是否还留在枕边<br>一砚梨花雨似你的手绢 撕碎<br>中榜那天，毁了谁一生清白<br>谁的箭射向南来孤雁<br>阻断我信笺<br>星天外，星闪现，星几点<br>平生思念写入琴丝一声清怨<br>一砚梨花雨似你的手绢 撕碎<br>中榜那天，毁了谁一生清白<br>谁的网洒向湖面<br>鲤鱼错了愿<br>梨花开，梨花落，梨花残<br>平生思念写入琴丝一生清怨</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说书人</title>
      <link href="/2016/09/15/mo-xiang-zhi-jian/wo-de-shi-ci/shuo-shu-ren/"/>
      <url>/2016/09/15/mo-xiang-zhi-jian/wo-de-shi-ci/shuo-shu-ren/</url>
      
        <content type="html"><![CDATA[<p>街头巷角一桌一人侃侃而谈，<br>书生意气却孙山名落又经年，</p><p>一段旧事重复多少遍，<br>听书唱到春秋战，<br>长衫泪湿一抚尺拍案，<br>座中客只道故事太短，<br>台下人不懂台上辛酸，<br>故事每一段都是，<br>说书人自传，<br>追溯到落榜那天，<br>才把名利看浅。</p><p>街头巷角一椅一扇默默无言，<br>白驹未现已西山日薄又一天，<br>多少遍重复旧事一段，<br>翻书看到怒冲冠，<br>一抚尺拍案泪湿长衫，<br>说书人只恨时间太慢，<br>局外人妄窥局中悲欢，<br>故事每一段都是，<br>说书人自传，<br>追溯到离别那天，<br>才把生死看淡。</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端生存之道-git别名</title>
      <link href="/2016/09/11/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-git-bie-ming/"/>
      <url>/2016/09/11/linux/zhong-duan-sheng-cun-zhi-dao/linux-zhong-duan-sheng-cun-zhi-dao-git-bie-ming/</url>
      
        <content type="html"><![CDATA[<p>在Linux平台上,很多命令在我们按下<code>tab</code>键之后会自动补全该命令,在多次连续按下<code>tab</code>键之后会一次补全并切换匹配的命令。我们在使用git的过程中,也希望能够自动补全一些指令,比如 我想执行 <code>git status</code> 命令的时候,我只用输入 <code>git st </code> 然后按下<code>tab</code>键,就能输出 <code>git status</code>了。</p><p>在mac平台,使用HomeBrew安装Git <code>brew install git</code><br>我们会得到如下的输出(可以使用 <code>brew info git</code> 命令查看安装git时候的输出信息),我截取了最后几行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.Bash completion has been installed to:  /usr/local/etc/bash_completion.d<span class="token function">zsh</span> completions and functions have been installed to:  /usr/local/share/zsh/site-functionsEmacs Lisp files have been installed to:  /usr/local/share/emacs/site-lisp/git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bash completion has been installed to:</code> 这句话告诉我们git的自动补全脚本已经添加到了 <code>/usr/local/etc/</code> 目录下面的 <code>bash_completion.d</code>文件</p><p>我们所要做的就是,把它加到linux的补全功能中<br>我们首先进入 <code>/etc</code> 目录 ,使用管理员权限修改 <code>bashrc</code> 文件,在文件的最后一行加入下面一句话<br><code>[ -f /usr/local/etc/bash_completion.d/git-completion.bash ] &amp;&amp; . /usr/local/etc/bash_completion.d/git-completion.bash</code><br>保存,重启终端即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 终端生存之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> 终端生存之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作画</title>
      <link href="/2016/09/11/mo-xiang-zhi-jian/wo-de-shi-ci/zuo-hua/"/>
      <url>/2016/09/11/mo-xiang-zhi-jian/wo-de-shi-ci/zuo-hua/</url>
      
        <content type="html"><![CDATA[<p>枯叶落，宣纸留，似蝴蝶吻你手。<br>杯中酒，心上秋，只恐画中人消瘦。</p><p>轻倚楼，月如钩，风拂一宿又一宿。<br>墨未干，何必平添一株柳。<br>茶已凉，那纸上蝶已飞走。<br>遥想当年，桥头栏杆细数天上星宿。<br>指指点点，纤纤细手。<br>喃喃自语，樱桃小口。</p><p>轻挽袖，我欲提笔画你温柔。<br>纸揉皱，谁研墨狼毫已湿透。<br>枯叶落，细数过又几个春秋。<br>宣纸留，新叶又点染柳枝头。</p><p>墨未干，何必平添一株柳。<br>茶已凉，那纸上蝶已飞走。<br>遥想当年，桥头栏杆细数天上星宿。<br>指指点点，纤纤细手。<br>喃喃自语，樱桃小口。</p><p>杯中酒，映梁上燕子去留。<br>心上秋，一撇一捺皆是愁。<br>轻倚楼，清风拂过门前柳。<br>月如钩，谁知谁又等了几个秋。</p>]]></content>
      
      
      <categories>
          
          <category> 墨香纸笺 </category>
          
          <category> 我的诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 墨香纸笺 </tag>
            
            <tag> 我的诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git万能后悔药</title>
      <link href="/2016/09/11/gong-ju-kong/git/git-wan-neng-hou-hui-yao/"/>
      <url>/2016/09/11/gong-ju-kong/git/git-wan-neng-hou-hui-yao/</url>
      
        <content type="html"><![CDATA[<p><code>git reset --hard</code>往往用来移动 HEAD 指针,但这样会导致 commit 的内容被删除,往往后悔不已。</p><p>可以通过reflog来进行恢复，前提是丢失的分支或commit信息没有被git gc清除,一般情况下gc对那些无用的object会保留很长时间后才清除的</p><p>可以使用<code>git reflog</code>或<code>git log -g</code>命令来看到所有的操作日志。你执行的每一条git指令都有迹可循，而且可以回退到任意一步。可谓回滚操作中的万能钥匙了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chenshang@bogon:~/learn/gitk <span class="token punctuation">[</span>master<span class="token punctuation">]</span>$ <span class="token function">git</span> reflogbaf1722 HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: reset: moving to baf1722add2e4e HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: reset: moving to HEAD^f6df0e4 HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: reset: moving to HEAD^^baf1722 HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>: reset: moving to baf1722f6df0e4 HEAD@<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span>: reset: moving to HEAD^^baf1722 HEAD@<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>: merge feture/f2: Merge made by the <span class="token string">'recursive'</span> strategy.0f02b7a HEAD@<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span>: merge feture/f1: Merge made by the <span class="token string">'recursive'</span> strategy.f6df0e4 HEAD@<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span>: checkout: moving from feture/f2 to master3e54d52 HEAD@<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span>: commit: <span class="token number">5</span><span class="token number">5465608</span> HEAD@<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>: checkout: moving from feture/f1 to feture/f20f4153e HEAD@<span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span>: commit: <span class="token number">4</span>add2e4e HEAD@<span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">}</span>: checkout: moving from master to feture/f1f6df0e4 HEAD@<span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">}</span>: merge feture/f2: Merge made by the <span class="token string">'recursive'</span> strategy.add2e4e HEAD@<span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">}</span>: merge feture/f1: Fast-forward1195d28 HEAD@<span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">}</span>: checkout: moving from feture/f2 to master<span class="token number">5465608</span> HEAD@<span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span>: commit: <span class="token number">3</span>1195d28 HEAD@<span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span>: checkout: moving from master to feture/f21195d28 HEAD@<span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">}</span>: checkout: moving from feture/f1 to masteradd2e4e HEAD@<span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span>: commit: <span class="token number">2</span>1195d28 HEAD@<span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">}</span>: checkout: moving from master to feture/f11195d28 HEAD@<span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>: commit: <span class="token number">1</span>9cb291d HEAD@<span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">}</span>: commit <span class="token punctuation">(</span>initial<span class="token punctuation">)</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>恢复的过程很简单</p><ol><li>通过<code>git log -g</code>或<code>git reflog</code> 命令来找到需要恢复的信息对应的 commitid，可以通过提交的时间和日期来辨别,</li><li>找到对应的commitid</li><li>通过 <code>git branch recover_branch commitid</code> 来建立一个新的分支</li></ol><p>这样，就把到commitid为止的代码、各种提交记录等信息都恢复到了recover_branch分支上了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git忽略已经commit的文件</title>
      <link href="/2016/09/11/gong-ju-kong/git/git-hu-lue-yi-jing-commit-de-wen-jian/"/>
      <url>/2016/09/11/gong-ju-kong/git/git-hu-lue-yi-jing-commit-de-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><h1 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h1><ol><li><code>git rm --cached logs/xx.log</code></li><li>然后更新 .gitignore 忽略掉目标文件，</li><li><code>git commit -m "We really don't want Git to track this anymore!"</code></li></ol><h1 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h1><p>每个clone下来的仓库中手动设置不要检查特定文件的更改情况。<br><code>git update-index --assume-unchanged PATH    #在PATH处输入要忽略的文件。</code></p><h1 id="方式三"><a class="markdownIt-Anchor" href="#方式三"></a> 方式三</h1><p>另外 git 还提供了另一种 exclude 的方式来做同样的事情，不同的是 .gitignore 这个文件本身会提交到版本库中去。用来保存的是公共的需要排除的文件。而 .git/info/exclude 这里设置的则是你自己本地需要排除的文件。 他不会影响到其他人。也不会提交到版本库中去。</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地操作</title>
      <link href="/2016/09/11/gong-ju-kong/git/git-ben-di-cao-zuo/"/>
      <url>/2016/09/11/gong-ju-kong/git/git-ben-di-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>Git 是一个工具,工具只有熟练与不熟练之分,没有会与不会之别。孰能生巧,多敲几遍看看效果,如果对你工作有方便,那么记住它就是了,如果记不住就多试几次,这一章的操作只涉及本地操作,所有代码的修改都不会影响远程仓库的代码,也就是说你可以随便玩,而且永远不会把代码玩坏,想要恢复的话只要干掉本地分支,重新建立一个分支追踪远程分支就好。</p><p>使用 Git 你的代码存储的位置变化</p><blockquote><p>工作区(working space) -&gt; 暂存区(staging)-&gt; 本地仓库(Local Repository)-&gt; 远程仓库(Remote Repository)</p></blockquote><p>你的代码状态变化</p><blockquote><p>已修改为跟踪-&gt;已跟踪为提交-&gt;已提交未发布</p></blockquote><h2 id="查看分支的状态"><a class="markdownIt-Anchor" href="#查看分支的状态"></a> 查看分支的状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#是否有已修改未暂存的文件，有的话用 git add 命令暂存。是否有已暂存未提交的文件，有的话用git commit -m " " 命令提交。</span>$ <span class="token function">git</span> status<span class="token comment">#也许能提高速度</span>$ <span class="token function">git</span> status <span class="token parameter variable">-uno</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看分支情况"><a class="markdownIt-Anchor" href="#查看分支情况"></a> 查看分支情况</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#总共有那些分支，当前处于那个分支</span>$ <span class="token function">git</span> branch<span class="token comment"># 查看远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-r</span><span class="token comment"># 查看本地和远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-r</span><span class="token comment"># 删除分支。</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> +分支名<span class="token comment"># 重命名分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-m</span> 原名 新名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-add-操作"><a class="markdownIt-Anchor" href="#git-add-操作"></a> git add 操作</h2><p>使用 “git add <file>…” 以包含要提交的内容</file></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加已修改未暂存的所有文件，也就是跟踪所有文件。未跟踪的文件标记为红色，已跟踪的文件标记为绿色。</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment">#添加指定的已修改未暂存的文件到暂存区。</span><span class="token function">git</span> <span class="token function">add</span> + 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-rm-操作"><a class="markdownIt-Anchor" href="#git-rm-操作"></a> git rm 操作</h2><p>使用 “git rm --cached <file>…” 撤出暂存区</file></p><h2 id="git-commit-操作"><a class="markdownIt-Anchor" href="#git-commit-操作"></a> git commit 操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#提交代码到本地仓库，-m 中的m是message的意思，就是添加一个标记信息，方便查看提交历史，git log 可以查看代码提交日志。</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"xxx"</span><span class="token comment">#可以修改最后一次提交的信息</span><span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-查看提交历史记录"><a class="markdownIt-Anchor" href="#git-查看提交历史记录"></a> git 查看提交历史记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。</span>$ <span class="token function">git</span> log <span class="token comment">#按q退出历史记录列表。</span><span class="token comment"># 以选择显示前n条。</span>$ <span class="token function">git</span> log <span class="token parameter variable">-n</span><span class="token comment"># 显示简要的增改行数统计,每次提交文件的变更统计，-n 同上，前n条，可省略。</span>$ <span class="token function">git</span> log <span class="token parameter variable">--stat</span> <span class="token parameter variable">-n</span><span class="token comment"># 此命令同上，不过显示更全了。</span>$ <span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token parameter variable">-n</span>$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline<span class="token comment"># 一行显示，只显示哈希值和提交说明。</span>$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token comment">#ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况</span>如两天前的提交历史：git log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2</span>.days如指定作者为<span class="token string">"BeginMan"</span>的所有提交:$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span>BeginMan如指定关键字为“init”的所有提交：$ <span class="token function">git</span> log <span class="token parameter variable">--grep</span><span class="token operator">=</span>init如指定提交者为<span class="token string">"Jack"</span>的所有提交：$ <span class="token function">git</span> log <span class="token parameter variable">--committer</span><span class="token operator">=</span>Jack注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。如指定2天前，作者为“BeginMan”的提交含有关键字<span class="token string">'init'</span>的前2条记录：$ <span class="token function">git</span> log <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">2</span>.days <span class="token parameter variable">--author</span><span class="token operator">=</span>BeginMan <span class="token parameter variable">--grep</span><span class="token operator">=</span>init <span class="token parameter variable">-2</span>注意：上面选项后面的参数可以带单双引号，如--author<span class="token operator">=</span><span class="token string">"BeginMan"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-checkout-操作"><a class="markdownIt-Anchor" href="#git-checkout-操作"></a> git checkout 操作</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 切换到指定的分支$ git checkout +分支名# 新建一个分支并切换到该分支，-b就是分支的意思，切换分支，没有的话就新建一个分支出来并切换到新分支，删除分支用 git branch -d +分支名。$ git checkout -b + 分支名# 新建一个分支并切换到该分支，-b就是分支的意思，切换分支，没有的话就新建一个分支出来并切换到新分支，删除分支用 git branch -d +分支名,追踪远程分支$ git checkout -b + 分支名 远程分支# 放弃对文件的修改，回到上次提交之后本次修改之前的原始状态。$ git checkout + 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-暂存操作"><a class="markdownIt-Anchor" href="#git-暂存操作"></a> git 暂存操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git栈，在切换分支的时候，当前分支有未完成提交的代码，但又不想提交，一方面是因为代码没有完成，一方面是因为这样会在log中打印许多无用的日志信息。但是不提交就无法切换分支，于是git便开辟出来一个临时的仓库，这个仓库可以暂时存放最新修改过的代码。</span><span class="token comment"># git栈，可以存放多次修改，切换分支后这些存放的修改还在。</span>$ <span class="token function">git</span> stash <span class="token comment">#保存当前的工作进度,会分别对暂存区和工作区的状态进行保存。保存后工作区恢复到之前最后一次提交的状态</span>显示进度列表。此命令显然显示了git stash 可以多次保存工作进度，并在恢复时候选择。$ <span class="token function">git</span> stash list$ <span class="token function">git</span> stash pop <span class="token punctuation">[</span>--index<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment"># 如果不使用任何参数，会恢复最新保存的工作进度，并将恢复的工作进度从存储的git栈列表中清除。如果提供&lt;stash&gt;参数（来自git stash list显示的列表），则将&lt;stash&gt;工作进度恢复。恢复完毕也将从git栈删除&lt;stash&gt;工作进度。</span>$ <span class="token function">git</span> stash <span class="token punctuation">[</span>save <span class="token punctuation">[</span>--patch<span class="token punctuation">]</span> <span class="token punctuation">[</span>-k<span class="token operator">|</span>--<span class="token punctuation">[</span>no<span class="token punctuation">]</span>keep-index<span class="token punctuation">]</span> <span class="token punctuation">[</span>-q<span class="token operator">|</span>--quiet<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>message<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#这条命令实际上是第一条git stash命令的完整版。使用参数--patch会显示工作区和HEAD的差异，通过对差异文件的编辑决定在进度中最终要保存的工作区的内容，通过编辑差异文件可以在进度中排除无关内容。使用-k或者--keep-index参数，在保存进度后不会将暂存区重置。默认会将暂存区和工作区强制重置。</span><span class="token comment"># 除了不删除恢复的进度之外，其余和git stash pop 命令一样。</span>$ <span class="token function">git</span> stash apply <span class="token punctuation">[</span>--index<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment"># 删除一个存储的进度。默认删除最新的进度。</span>$ <span class="token function">git</span> stash drop <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment"># 删除所有存储的进度。</span>$ <span class="token function">git</span> stash <span class="token function">clear</span><span class="token comment"># 查看git栈中相对与当前分支的修改</span>$ <span class="token function">git</span> stash show <span class="token parameter variable">-p</span> stash<span class="token punctuation">{</span>?<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-标签操作"><a class="markdownIt-Anchor" href="#git-标签操作"></a> git 标签操作</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 列显已有的标签$ git tag = git tag -l# git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。# 创建轻量标签,创建轻量标签不需要传递参数，直接指定标签名称即可。$ git tag v0.1.2-light# 创建附注标签$ git tag -a v0.1.2 -m “0.1.2版本” # 创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。# 切换标签$ git checkout [tagname]# 用git show命令可以查看标签的版本信息# 删除标签$ git tag -d [tagname]# 打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的哈希码（通过git log获取）。# 补打标签$ git tag -a "标签名" 哈希码# 通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：$ git push origin 标签名 # 将v0.1.2标签提交到git服务器$ git push origin –tags # 将本地所有标签一次性提交到git服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-clean-操作"><a class="markdownIt-Anchor" href="#git-clean-操作"></a> git clean 操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clean<span class="token punctuation">(</span>只是删除未跟踪的文件<span class="token punctuation">)</span><span class="token parameter variable">-n</span>  显示将要删除的文件和目录<span class="token parameter variable">-f</span>  删除文件<span class="token parameter variable">-df</span> 删除文件和目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-reset-操作"><a class="markdownIt-Anchor" href="#git-reset-操作"></a> git reset 操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 回到上次提交前的状态，本地的修改和暂存区的跟踪都在。这是最柔软的退回。</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD^<span class="token punctuation">(</span>或SHA码<span class="token punctuation">)</span>:<span class="token comment"># 下面两个命令是一样的，回到上次暂存时的状态，本地的修改还在，但是暂存区中的跟踪已经不再，提交也不在了。</span><span class="token comment"># HEAD^代表本次提交的父提交，可以换成任意次提交的sha码</span>$ <span class="token function">git</span> reset HEAD^$ <span class="token function">git</span> reset <span class="token parameter variable">--mixed</span> HEAD^<span class="token comment"># 直接退回到上次提交的状态，本地修改什么的都不复存在了是最强硬的退回。</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^<span class="token comment"># add错了，从暂存区中删除，但保留更改,如果不加参数，代表删除所有暂存。</span>$ <span class="token function">git</span> reset HEAD +文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-revert"><a class="markdownIt-Anchor" href="#git-revert"></a> git revert</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销某次的提交内容(Revert a commit by providing a new commit with contrary changes)</span>$ <span class="token function">git</span> revert  <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>              <span class="token comment"># 撤销某次提交的某个文件的内容(Revert a specific file from a previous commit)</span>$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-pull"><a class="markdownIt-Anchor" href="#git-pull"></a> git pull</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull <span class="token parameter variable">-p</span> <span class="token comment"># 等同于下面的命令</span>$ <span class="token function">git</span> fetch <span class="token parameter variable">--prune</span> origin$ <span class="token function">git</span> fetch <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="git-分支对比"><a class="markdownIt-Anchor" href="#git-分支对比"></a> git 分支对比</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 dev 有，而 master 中没有的：</span>$ <span class="token function">git</span> log dev ^master<span class="token comment"># 查看 dev 中比 master 中多提交了哪些内容：</span>$ <span class="token function">git</span> log master<span class="token punctuation">..</span>dev<span class="token comment"># 不知道谁提交的多谁提交的少，单纯想知道有什么不一样：</span><span class="token function">git</span> log dev<span class="token punctuation">..</span>.master<span class="token comment"># 在上述情况下，再显示出每个提交是在哪个分支上</span><span class="token function">git</span> log --left-right dev<span class="token punctuation">..</span>.master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Git </tag>
            
            <tag> 工具控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-9</title>
      <link href="/2016/04/28/gong-ju-kong/intellij-idea/idea-mei-ri-tip-9/"/>
      <url>/2016/04/28/gong-ju-kong/intellij-idea/idea-mei-ri-tip-9/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-09.PNG" width="80%"></div>在查找和替换两个功能之间切换是很容易的，当你想要在一个文件中查找和替换的时候，你只需要按下 `Ctrl+F` 即可`Ctrl+Shift+R` 可以带路径的搜索,再按下`Ctrl+H`可以在指定了路径中查找相应的内容]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-8</title>
      <link href="/2016/04/25/gong-ju-kong/intellij-idea/idea-mei-ri-tip-8/"/>
      <url>/2016/04/25/gong-ju-kong/intellij-idea/idea-mei-ri-tip-8/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-08.PNG" width="80%"></div>使用`Ctri+shift+r`，在弹出的对话框中输入 一两个文件夹的简写，中间用`\`或`/`分隔就可以直接跳到你想要的目录了。]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-7</title>
      <link href="/2016/04/23/gong-ju-kong/intellij-idea/idea-mei-ri-tip-7/"/>
      <url>/2016/04/23/gong-ju-kong/intellij-idea/idea-mei-ri-tip-7/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-07.PNG" width="80%"></div><p>当你移动光标选中文本的时候只要你按下<code>atl</code>键你就可以竖向选择<br>更专业一点应该叫块儿选，这个应用在你想批量修改一堆对齐的文本的时候</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-1</title>
      <link href="/2016/04/19/gong-ju-kong/intellij-idea/idea-mei-ri-tip-1/"/>
      <url>/2016/04/19/gong-ju-kong/intellij-idea/idea-mei-ri-tip-1/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-01.PNG" width="80%"></div><p>使用 <code>ctrl+alt+shift+j</code> 快捷键来补全命令，<br>相当于在Live Template 中设置某个命令<br>的简写，然后按下上面的组合按键，就会<br>根据你在Live Template 中定义的命令简<br>写进行提示</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-3</title>
      <link href="/2016/04/18/gong-ju-kong/intellij-idea/idea-mei-ri-tip-3/"/>
      <url>/2016/04/18/gong-ju-kong/intellij-idea/idea-mei-ri-tip-3/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-03.PNG" width="80%"></div>光标移动到一个class上面，按F4可以查看这个类的继承关系!或使用Navigate -&gt; Type Hierarchy查看类的继承关系!]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-2</title>
      <link href="/2016/04/18/gong-ju-kong/intellij-idea/idea-mei-ri-tip-2/"/>
      <url>/2016/04/18/gong-ju-kong/intellij-idea/idea-mei-ri-tip-2/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-02.PNG" width="80%"></div><p>使用 <code>　ctrl+shift+向上/向下箭头　</code> 可以快速在方法中移动光标</p>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-4</title>
      <link href="/2016/04/17/gong-ju-kong/intellij-idea/idea-mei-ri-tip-4/"/>
      <url>/2016/04/17/gong-ju-kong/intellij-idea/idea-mei-ri-tip-4/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-04.PNG" width="80%"></div>在行号一列单击即可设置断点在断点处右击可以设置断点的一些属性，如是否开启该断点]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-5</title>
      <link href="/2016/04/16/gong-ju-kong/intellij-idea/idea-mei-ri-tip-5/"/>
      <url>/2016/04/16/gong-ju-kong/intellij-idea/idea-mei-ri-tip-5/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-05.PNG" width="80%"></div>如果你用惯了代码提示，当你输入 `，`或 `.` 或 `：` 或空格还有其他一些字符的时候IDEA会自动给出代码提示，你可以从他给出的代码提示中选择你想要的选项，而IDEA会自动帮你输入。]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea-Tips-6</title>
      <link href="/2016/04/14/gong-ju-kong/intellij-idea/idea-mei-ri-tip-6/"/>
      <url>/2016/04/14/gong-ju-kong/intellij-idea/idea-mei-ri-tip-6/</url>
      
        <content type="html"><![CDATA[<div align="center">  <img src="https://github.com/chen-shang/Picture/raw/master/idea-tips/tips-06.PNG" width="80%"></div><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 工具控 </category>
          
          <category> Intellij IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具控 </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Idea-Tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
